#!/usr/bin/env python3
"""
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Multi-Tenant —Å–∏—Å—Ç–µ–º–æ–π CUBE_RS
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ –¥–æ—Å—Ç—É–ø–∞–º–∏ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
"""

import sys
import json
import argparse
from pathlib import Path
from typing import List, Dict, Any
from multi_tenant_manager import MultiTenantManager

class MultiTenantAdmin:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è Multi-Tenant —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, db_file: str = "cube_multitenant.db"):
        self.mt_manager = MultiTenantManager(db_file)
        print(f"üîß Multi-Tenant Admin –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–π {db_file}")
    
    # =======================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø–ú–ò
    # =======================================================================
    
    def create_organization(self, name: str, code: str, description: str = None, 
                          contact_person: str = None, phone: str = None, email: str = None):
        """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                conn.execute("""
                    INSERT INTO organizations (name, code, description, contact_person, phone, email)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (name, code, description, contact_person, phone, email))
                
                print(f"‚úÖ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{name}' ({code}) —Å–æ–∑–¥–∞–Ω–∞")
                return True
                
        except sqlite3.IntegrityError:
            print(f"‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è —Å –∫–æ–¥–æ–º '{code}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏: {e}")
            return False
    
    def list_organizations(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT o.*, COUNT(kd.id) as device_count, COUNT(DISTINCT uor.user_id) as user_count
                    FROM organizations o
                    LEFT JOIN kub_devices kd ON o.id = kd.organization_id AND kd.is_active = 1
                    LEFT JOIN user_organization_roles uor ON o.id = uor.organization_id AND uor.is_active = 1
                    WHERE o.is_active = 1
                    GROUP BY o.id
                    ORDER BY o.name
                """)
                
                organizations = cursor.fetchall()
                
                if not organizations:
                    print("üì≠ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                
                print("\nüè¢ –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò:")
                print("=" * 80)
                print(f"{'ID':<5} {'–ö–æ–¥':<15} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<25} {'–£—Å—Ç—Ä–æ–π—Å—Ç–≤':<10} {'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':<12} {'–ö–æ–Ω—Ç–∞–∫—Ç'}")
                print("=" * 80)
                
                for org in organizations:
                    print(f"{org['id']:<5} {org['code']:<15} {org['name']:<25} {org['device_count']:<10} {org['user_count']:<12} {org['contact_person'] or '-'}")
                
                print("=" * 80)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π: {e}")
    
    # =======================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –£–°–¢–†–û–ô–°–¢–í–ê–ú–ò
    # =======================================================================
    
    def add_device(self, organization_code: str, device_id: str, device_name: str, 
                   modbus_slave_id: int, location: str = None, serial_number: str = None):
        """–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                cursor = conn.execute("SELECT id FROM organizations WHERE code = ?", (organization_code,))
                org_result = cursor.fetchone()
                if not org_result:
                    print(f"‚ùå –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è '{organization_code}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                    return False
                
                org_id = org_result[0]
                
                conn.execute("""
                    INSERT INTO kub_devices (organization_id, device_id, device_name, modbus_slave_id, location, serial_number)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (org_id, device_id, device_name, modbus_slave_id, location, serial_number))
                
                print(f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_name}' ({device_id}) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ '{organization_code}'")
                print(f"   Modbus Slave ID: {modbus_slave_id}")
                return True
                
        except sqlite3.IntegrityError as e:
            if "device_id" in str(e):
                print(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å ID '{device_id}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            elif "modbus_slave_id" in str(e):
                print(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å Modbus Slave ID {modbus_slave_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏: {e}")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {e}")
            return False
    
    def list_devices(self, organization_code: str = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–≤—Å–µ—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π)"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                conn.row_factory = sqlite3.Row
                
                if organization_code:
                    cursor = conn.execute("""
                        SELECT kd.*, o.name as org_name, o.code as org_code
                        FROM kub_devices kd
                        JOIN organizations o ON kd.organization_id = o.id
                        WHERE o.code = ? AND kd.is_active = 1
                        ORDER BY kd.device_name
                    """, (organization_code,))
                else:
                    cursor = conn.execute("""
                        SELECT kd.*, o.name as org_name, o.code as org_code
                        FROM kub_devices kd
                        JOIN organizations o ON kd.organization_id = o.id
                        WHERE kd.is_active = 1
                        ORDER BY o.name, kd.device_name
                    """)
                
                devices = cursor.fetchall()
                
                if not devices:
                    if organization_code:
                        print(f"üì≠ –í –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ '{organization_code}' –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
                    else:
                        print("üì≠ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return
                
                title = f"–£–°–¢–†–û–ô–°–¢–í–ê –û–†–ì–ê–ù–ò–ó–ê–¶–ò–ò '{organization_code}'" if organization_code else "–í–°–ï –£–°–¢–†–û–ô–°–¢–í–ê"
                print(f"\nüì¶ {title}:")
                print("=" * 100)
                print(f"{'ID':<15} {'–ù–∞–∑–≤–∞–Ω–∏–µ':<20} {'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è':<20} {'Slave ID':<8} {'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ':<15} {'S/N'}")
                print("=" * 100)
                
                for device in devices:
                    print(f"{device['device_id']:<15} {device['device_name']:<20} {device['org_code']:<20} {device['modbus_slave_id']:<8} {device['location'] or '-':<15} {device['serial_number'] or '-'}")
                
                print("=" * 100)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
    
    # =======================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    # =======================================================================
    
    def add_user_to_organization(self, telegram_id: int, organization_code: str, role: str = "operator"):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é"""
        
        # –°–Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        self.mt_manager.register_user(telegram_id)
        
        success = self.mt_manager.add_user_to_organization(telegram_id, organization_code, role)
        
        if success:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ '{organization_code}' —Å —Ä–æ–ª—å—é '{role}'")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ '{organization_code}'")
        
        return success
    
    def grant_device_access(self, telegram_id: int, device_id: str, access_level: str = "read"):
        """–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
                cursor = conn.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
                user_result = cursor.fetchone()
                if not user_result:
                    print(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    return False
                
                cursor = conn.execute("SELECT id FROM kub_devices WHERE device_id = ?", (device_id,))
                device_result = cursor.fetchone()
                if not device_result:
                    print(f"‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ '{device_id}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    return False
                
                conn.execute("""
                    INSERT OR REPLACE INTO user_device_access (user_id, device_id, access_level)
                    VALUES (?, ?, ?)
                """, (user_result[0], device_result[0], access_level))
                
                print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–æ—Å—Ç—É–ø '{access_level}' –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É '{device_id}'")
                return True
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
            return False
    
    def list_user_access(self, telegram_id: int = None):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                conn.row_factory = sqlite3.Row
                
                if telegram_id:
                    # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    cursor = conn.execute("""
                        SELECT u.telegram_id, u.username, u.first_name, u.last_name,
                               o.name as org_name, o.code as org_code, uor.role,
                               kd.device_id, kd.device_name, COALESCE(uda.access_level, 'read') as access_level
                        FROM users u
                        JOIN user_organization_roles uor ON u.id = uor.user_id
                        JOIN organizations o ON uor.organization_id = o.id
                        JOIN kub_devices kd ON o.id = kd.organization_id
                        LEFT JOIN user_device_access uda ON u.id = uda.user_id AND kd.id = uda.device_id AND uda.is_active = 1
                        WHERE u.telegram_id = ? AND u.is_active = 1 AND uor.is_active = 1 AND o.is_active = 1 AND kd.is_active = 1
                        ORDER BY o.name, kd.device_name
                    """, (telegram_id,))
                    
                    rows = cursor.fetchall()
                    
                    if not rows:
                        print(f"üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–æ–≤")
                        return
                    
                    user_info = rows[0]
                    print(f"\nüë§ –î–û–°–¢–£–ü–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø {telegram_id}:")
                    print(f"–ò–º—è: {user_info['first_name']} {user_info['last_name']} (@{user_info['username'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'})")
                    print("=" * 80)
                    print(f"{'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è':<20} {'–†–æ–ª—å':<10} {'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':<20} {'–î–æ—Å—Ç—É–ø':<10}")
                    print("=" * 80)
                    
                    for row in rows:
                        print(f"{row['org_code']:<20} {row['role']:<10} {row['device_id']:<20} {row['access_level']:<10}")
                    
                    print("=" * 80)
                    
                else:
                    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    cursor = conn.execute("""
                        SELECT u.telegram_id, u.username, u.first_name, u.last_name,
                               COUNT(DISTINCT uor.organization_id) as org_count,
                               COUNT(DISTINCT kd.id) as device_count,
                               GROUP_CONCAT(DISTINCT o.code) as organizations
                        FROM users u
                        LEFT JOIN user_organization_roles uor ON u.id = uor.user_id AND uor.is_active = 1
                        LEFT JOIN organizations o ON uor.organization_id = o.id AND o.is_active = 1
                        LEFT JOIN kub_devices kd ON o.id = kd.organization_id AND kd.is_active = 1
                        WHERE u.is_active = 1
                        GROUP BY u.id
                        ORDER BY u.telegram_id
                    """)
                    
                    users = cursor.fetchall()
                    
                    if not users:
                        print("üì≠ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        return
                    
                    print("\nüë• –í–°–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
                    print("=" * 100)
                    print(f"{'Telegram ID':<12} {'–ò–º—è':<20} {'Username':<15} {'–û—Ä–≥-—Ü–∏–π':<8} {'–£—Å—Ç—Ä–æ–π—Å—Ç–≤':<10} {'–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏'}")
                    print("=" * 100)
                    
                    for user in users:
                        full_name = f"{user['first_name'] or ''} {user['last_name'] or ''}".strip() or "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                        username = f"@{user['username']}" if user['username'] else "-"
                        organizations = user['organizations'] or "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞"
                        
                        print(f"{user['telegram_id']:<12} {full_name[:19]:<20} {username[:14]:<15} {user['org_count']:<8} {user['device_count']:<10} {organizations}")
                    
                    print("=" * 100)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–æ–≤: {e}")
    
    def revoke_access(self, telegram_id: int, organization_code: str = None, device_id: str = None):
        """–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                if device_id:
                    # –û—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
                    cursor = conn.execute("""
                        UPDATE user_device_access 
                        SET is_active = 0 
                        WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
                        AND device_id = (SELECT id FROM kub_devices WHERE device_id = ?)
                    """, (telegram_id, device_id))
                    
                    if cursor.rowcount > 0:
                        print(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É '{device_id}' –æ—Ç–æ–∑–≤–∞–Ω")
                    else:
                        print(f"‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                elif organization_code:
                    # –û—Ç–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                    cursor = conn.execute("""
                        UPDATE user_organization_roles 
                        SET is_active = 0 
                        WHERE user_id = (SELECT id FROM users WHERE telegram_id = ?)
                        AND organization_id = (SELECT id FROM organizations WHERE code = ?)
                    """, (telegram_id, organization_code))
                    
                    if cursor.rowcount > 0:
                        print(f"‚úÖ –î–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ '{organization_code}' –æ—Ç–æ–∑–≤–∞–Ω")
                    else:
                        print(f"‚ùå –î–æ—Å—Ç—É–ø –Ω–µ –Ω–∞–π–¥–µ–Ω")
                        
                else:
                    print("‚ùå –£–∫–∞–∂–∏—Ç–µ organization_code –∏–ª–∏ device_id –¥–ª—è –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞")
                    return False
                
                return cursor.rowcount > 0
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
            return False
    
    # =======================================================================
    # –û–¢–ß–ï–¢–´ –ò –ê–ù–ê–õ–ò–¢–ò–ö–ê
    # =======================================================================
    
    def generate_access_report(self):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –ø–æ –¥–æ—Å—Ç—É–ø–∞–º"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                conn.row_factory = sqlite3.Row
                
                print("\nüìä –û–¢–ß–ï–¢ –ü–û –î–û–°–¢–£–ü–ê–ú")
                print("=" * 60)
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
                cursor = conn.execute("""
                    SELECT o.name, o.code,
                           COUNT(DISTINCT kd.id) as device_count,
                           COUNT(DISTINCT uor.user_id) as user_count
                    FROM organizations o
                    LEFT JOIN kub_devices kd ON o.id = kd.organization_id AND kd.is_active = 1
                    LEFT JOIN user_organization_roles uor ON o.id = uor.organization_id AND uor.is_active = 1
                    WHERE o.is_active = 1
                    GROUP BY o.id
                    ORDER BY device_count DESC, user_count DESC
                """)
                
                orgs = cursor.fetchall()
                
                print("\nüè¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º:")
                for org in orgs:
                    print(f"  ‚Ä¢ {org['name']} ({org['code']}): {org['device_count']} —É—Å—Ç—Ä–æ–π—Å—Ç–≤, {org['user_count']} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                
                # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                cursor = conn.execute("""
                    SELECT COUNT(*) as total_users,
                           COUNT(CASE WHEN uor.id IS NOT NULL THEN 1 END) as users_with_access
                    FROM users u
                    LEFT JOIN user_organization_roles uor ON u.id = uor.user_id AND uor.is_active = 1
                    WHERE u.is_active = 1
                """)
                
                user_stats = cursor.fetchone()
                
                print(f"\nüë• –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
                print(f"  ‚Ä¢ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_stats['total_users']}")
                print(f"  ‚Ä¢ –° –¥–æ—Å—Ç—É–ø–æ–º –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º: {user_stats['users_with_access']}")
                print(f"  ‚Ä¢ –ë–µ–∑ –¥–æ—Å—Ç—É–ø–∞: {user_stats['total_users'] - user_stats['users_with_access']}")
                
                # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                cursor = conn.execute("""
                    SELECT u.telegram_id, u.first_name, u.last_name, 
                           kd.device_id, dal.action, dal.timestamp, dal.success
                    FROM device_access_log dal
                    JOIN users u ON dal.user_id = u.id
                    JOIN kub_devices kd ON dal.device_id = kd.id
                    ORDER BY dal.timestamp DESC
                    LIMIT 10
                """)
                
                activities = cursor.fetchall()
                
                if activities:
                    print(f"\nüìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:")
                    for activity in activities:
                        user_name = f"{activity['first_name']} {activity['last_name']}".strip() or str(activity['telegram_id'])
                        status = "‚úÖ" if activity['success'] else "‚ùå"
                        print(f"  {status} {activity['timestamp'][:16]} - {user_name}: {activity['action']} –Ω–∞ {activity['device_id']}")
                
                print("=" * 60)
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")

# =============================================================================
# –ö–û–ú–ê–ù–î–ù–ê–Ø –°–¢–†–û–ö–ê
# =============================================================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""
    parser = argparse.ArgumentParser(description="Multi-Tenant Admin –¥–ª—è CUBE_RS")
    
    # –û–±—â–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    parser.add_argument('--db', default='cube_multitenant.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π
    org_parser = subparsers.add_parser('org', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏')
    org_subparsers = org_parser.add_subparsers(dest='org_action')
    
    # org create
    create_org_parser = org_subparsers.add_parser('create', help='–°–æ–∑–¥–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')
    create_org_parser.add_argument('name', help='–ù–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    create_org_parser.add_argument('code', help='–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    create_org_parser.add_argument('--description', help='–û–ø–∏—Å–∞–Ω–∏–µ')
    create_org_parser.add_argument('--contact', help='–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ')
    create_org_parser.add_argument('--phone', help='–¢–µ–ª–µ—Ñ–æ–Ω')
    create_org_parser.add_argument('--email', help='Email')
    
    # org list
    org_subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    device_parser = subparsers.add_parser('device', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏')
    device_subparsers = device_parser.add_subparsers(dest='device_action')
    
    # device add
    add_device_parser = device_subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')
    add_device_parser.add_argument('org_code', help='–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    add_device_parser.add_argument('device_id', help='ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    add_device_parser.add_argument('device_name', help='–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    add_device_parser.add_argument('modbus_id', type=int, help='Modbus Slave ID')
    add_device_parser.add_argument('--location', help='–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    add_device_parser.add_argument('--serial', help='–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä')
    
    # device list
    list_device_parser = device_subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    list_device_parser.add_argument('--org', help='–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    
    # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user_parser = subparsers.add_parser('user', help='–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏')
    user_subparsers = user_parser.add_subparsers(dest='user_action')
    
    # user add
    add_user_parser = user_subparsers.add_parser('add', help='–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')
    add_user_parser.add_argument('telegram_id', type=int, help='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    add_user_parser.add_argument('org_code', help='–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    add_user_parser.add_argument('--role', default='operator', choices=['owner', 'admin', 'operator', 'viewer'], help='–†–æ–ª—å')
    
    # user grant
    grant_parser = user_subparsers.add_parser('grant', help='–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É')
    grant_parser.add_argument('telegram_id', type=int, help='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    grant_parser.add_argument('device_id', help='ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    grant_parser.add_argument('--level', default='read', choices=['read', 'write', 'admin'], help='–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞')
    
    # user list
    list_user_parser = user_subparsers.add_parser('list', help='–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    list_user_parser.add_argument('--telegram-id', type=int, help='–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    
    # user revoke
    revoke_parser = user_subparsers.add_parser('revoke', help='–û—Ç–æ–∑–≤–∞—Ç—å –¥–æ—Å—Ç—É–ø')
    revoke_parser.add_argument('telegram_id', type=int, help='Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    revoke_parser.add_argument('--org', help='–ö–æ–¥ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏')
    revoke_parser.add_argument('--device', help='ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    
    # –û—Ç—á–µ—Ç—ã
    subparsers.add_parser('report', help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    admin = MultiTenantAdmin(args.db)
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã
        if args.command == 'org':
            if args.org_action == 'create':
                admin.create_organization(
                    args.name, args.code, args.description,
                    args.contact, args.phone, args.email
                )
            elif args.org_action == 'list':
                admin.list_organizations()
                
        elif args.command == 'device':
            if args.device_action == 'add':
                admin.add_device(
                    args.org_code, args.device_id, args.device_name,
                    args.modbus_id, args.location, args.serial
                )
            elif args.device_action == 'list':
                admin.list_devices(args.org)
                
        elif args.command == 'user':
            if args.user_action == 'add':
                admin.add_user_to_organization(args.telegram_id, args.org_code, args.role)
            elif args.user_action == 'grant':
                admin.grant_device_access(args.telegram_id, args.device_id, args.level)
            elif args.user_action == 'list':
                admin.list_user_access(args.telegram_id)
            elif args.user_action == 'revoke':
                admin.revoke_access(args.telegram_id, args.org, args.device)
                
        elif args.command == 'report':
            admin.generate_access_report()
            
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")

if __name__ == "__main__":
    main()