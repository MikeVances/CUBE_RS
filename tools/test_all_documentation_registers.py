#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–£–ë-1063
"""

import socket
import struct
import time

# –í—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–£–ë-1063
REGISTER_MAP = {
    # –†–µ–≥–∏—Å—Ç—Ä—ã –≤–≤–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏—è 0x04)
    0x0301: ('–í–µ—Ä—Å–∏—è –ü–û', 'version'),
    0x0081: ('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ (1)', 'raw'),
    0x0082: ('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ (2)', 'raw'),
    0x00A2: ('–°–æ—Å—Ç–æ—è–Ω–∏–µ —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤ (3)', 'raw'),
    0x0083: ('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ', 'pressure'),
    0x0084: ('–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å', 'humidity'),
    0x0085: ('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2', 'co2'),
    0x0086: ('–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3', 'nh3'),
    0x0087: ('–í—ã—Ö–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ì–†–í –±–∞–∑–æ–≤–æ–π –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'raw'),
    0x0088: ('–í—ã—Ö–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ì–†–í —Ç—É–Ω–Ω–µ–ª—å–Ω–æ–π –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'raw'),
    0x0089: ('–í—ã—Ö–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–ø—Ñ–µ—Ä–æ–º', 'raw'),
    0x00C3: ('–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤–∞—Ä–∏–∏', 'raw'),
    0x00C7: ('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–≤–∞—Ä–∏–∏', 'raw'),
    0x00CB: ('–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', 'raw'),
    0x00CF: ('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è', 'raw'),
    0x00D0: ('–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'raw'),
    0x00D1: ('–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'raw'),
    0x00D2: ('–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'scheme'),
    0x00D3: ('–°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π', 'raw'),
    0x00D4: ('–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'temperature'),
    0x00D5: ('–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'temperature'),
    0x00D6: ('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'temperature'),
    
    # –†–µ–≥–∏—Å—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ñ—É–Ω–∫—Ü–∏—è 0x03)
    0x0020: ('–°–±—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–≤–∞—Ä–∏–π –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π', 'raw'),
    0x003F: ('–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å', 'raw'),
}

def format_value(value, unit_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    if unit_type == 'raw':
        return f"{value}"
    elif unit_type == 'temperature':
        return f"{value / 10:.1f}¬∞C"
    elif unit_type == 'humidity':
        return f"{value / 10:.1f}%"
    elif unit_type == 'pressure':
        return f"{value / 10:.1f} –ü–∞"
    elif unit_type == 'co2':
        return f"{value} ppm"
    elif unit_type == 'nh3':
        return f"{value / 10:.1f} ppm"
    elif unit_type == 'version':
        return f"{value / 100:.2f}"
    elif unit_type == 'scheme':
        schemes = {0: "–ë–∞–∑–æ–≤–∞—è", 1: "–¢—É–Ω–Ω–µ–ª—å–Ω–∞—è"}
        return schemes.get(value, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({value})")
    else:
        return f"{value}"

def read_register_with_function(register_address, function_code, host='tcp.cloudpub.ru', port=27521):
    """–ß–∏—Ç–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π Modbus"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        sock.connect((host, port))
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Modbus TCP –∑–∞–ø—Ä–æ—Å
        transaction_id = (register_address & 0xFFFF)
        request = struct.pack('>HHHBBHH',
            transaction_id, 0x0000, 0x0006, 0x01, function_code, register_address, 1
        )
        
        sock.send(request)
        response = sock.recv(1024)
        
        if len(response) >= 9:
            response_function = response[7]
            
            if response_function == function_code:
                byte_count = response[8]
                if byte_count >= 2:
                    data = response[9:9+byte_count]
                    raw_value = struct.unpack('>H', data[0:2])[0]
                    sock.close()
                    return True, raw_value, data
                    
            elif response_function == 0x80 + function_code:
                error_code = response[8] if len(response) > 8 else 0
                sock.close()
                return False, None, f"–û—à–∏–±–∫–∞ {error_code}"
                
        sock.close()
        return False, None, "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"
        
    except Exception as e:
        return False, None, str(e)

def test_all_registers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üîç –¢–ï–°–¢ –í–°–ï–• –†–ï–ì–ò–°–¢–†–û–í –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò –ö–£–ë-1063")
    print("=" * 80)
    print("üåê –°–µ—Ä–≤–µ—Ä: tcp.cloudpub.ru:27521")
    print("=" * 80)
    
    results = {
        'input_registers': {},   # –§—É–Ω–∫—Ü–∏—è 0x04
        'holding_registers': {}  # –§—É–Ω–∫—Ü–∏—è 0x03
    }
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã –≤–≤–æ–¥–∞ (—Ñ—É–Ω–∫—Ü–∏—è 0x04)
    print("\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–û–í –í–í–û–î–ê (—Ñ—É–Ω–∫—Ü–∏—è 0x04)")
    print("-" * 80)
    
    input_registers = [
        0x0301, 0x0081, 0x0082, 0x00A2, 0x0083, 0x0084, 0x0085, 0x0086,
        0x0087, 0x0088, 0x0089, 0x00C3, 0x00C7, 0x00CB, 0x00CF, 0x00D0,
        0x00D1, 0x00D2, 0x00D3, 0x00D4, 0x00D5, 0x00D6
    ]
    
    for reg_addr in input_registers:
        if reg_addr in REGISTER_MAP:
            desc, unit_type = REGISTER_MAP[reg_addr]
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {desc}")
            print(f"üìç –ê–¥—Ä–µ—Å: 0x{reg_addr:04X}, –§—É–Ω–∫—Ü–∏—è: 0x04")
            
            success, raw_value, error = read_register_with_function(reg_addr, 0x04)
            
            if success:
                formatted_value = format_value(raw_value, unit_type)
                print(f"‚úÖ –£–°–ü–ï–•: {formatted_value} (0x{raw_value:04X})")
                results['input_registers'][reg_addr] = {
                    'description': desc,
                    'raw_value': raw_value,
                    'formatted_value': formatted_value,
                    'unit_type': unit_type
                }
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {error}")
            
            time.sleep(0.2)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã —Ö—Ä–∞–Ω–µ–Ω–∏—è (—Ñ—É–Ω–∫—Ü–∏—è 0x03)
    print("\n\nüìã –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ì–ò–°–¢–†–û–í –•–†–ê–ù–ï–ù–ò–Ø (—Ñ—É–Ω–∫—Ü–∏—è 0x03)")
    print("-" * 80)
    
    holding_registers = [0x0020, 0x003F]
    
    for reg_addr in holding_registers:
        if reg_addr in REGISTER_MAP:
            desc, unit_type = REGISTER_MAP[reg_addr]
            print(f"\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {desc}")
            print(f"üìç –ê–¥—Ä–µ—Å: 0x{reg_addr:04X}, –§—É–Ω–∫—Ü–∏—è: 0x03")
            
            success, raw_value, error = read_register_with_function(reg_addr, 0x03)
            
            if success:
                formatted_value = format_value(raw_value, unit_type)
                print(f"‚úÖ –£–°–ü–ï–•: {formatted_value} (0x{raw_value:04X})")
                results['holding_registers'][reg_addr] = {
                    'description': desc,
                    'raw_value': raw_value,
                    'formatted_value': formatted_value,
                    'unit_type': unit_type
                }
            else:
                print(f"‚ùå –û–®–ò–ë–ö–ê: {error}")
            
            time.sleep(0.2)
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print("\n" + "=" * 80)
    print("üìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 80)
    
    if results['input_registers']:
        print("\nüå°Ô∏è –†–ï–ì–ò–°–¢–†–´ –í–í–û–î–ê (—Ñ—É–Ω–∫—Ü–∏—è 0x04):")
        print("-" * 40)
        for reg_addr, data in sorted(results['input_registers'].items()):
            print(f"‚Ä¢ 0x{reg_addr:04X} - {data['description']}: {data['formatted_value']}")
    
    if results['holding_registers']:
        print("\n‚öôÔ∏è –†–ï–ì–ò–°–¢–†–´ –•–†–ê–ù–ï–ù–ò–Ø (—Ñ—É–Ω–∫—Ü–∏—è 0x03):")
        print("-" * 40)
        for reg_addr, data in sorted(results['holding_registers'].items()):
            print(f"‚Ä¢ 0x{reg_addr:04X} - {data['description']}: {data['formatted_value']}")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_tested = len(input_registers) + len(holding_registers)
    total_success = len(results['input_registers']) + len(results['holding_registers'])
    
    print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {total_tested}")
    print(f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ: {total_success}")
    print(f"‚Ä¢ –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(total_success/total_tested)*100:.1f}%")
    
    print("\n" + "=" * 80)

if __name__ == "__main__":
    test_all_registers() 