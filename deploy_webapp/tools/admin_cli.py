#!/usr/bin/env python3
"""
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è CUBE_RS
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏, —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏ –∏ –∫–ª—é—á–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
"""
import sys
import os
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from web_app.rbac_system import get_rbac_system, Permission
from web_app.device_registry import get_device_registry

def create_user(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    rbac = get_rbac_system()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å –ø–æ –∏–º–µ–Ω–∏
    role_obj = rbac.get_role_by_name(args.role) if args.role else None
    roles = [role_obj.role_id] if role_obj else []
    
    try:
        user_id = rbac.create_user(
            username=args.username,
            email=args.email,
            full_name=args.full_name,
            password=args.password,
            roles=roles,
            is_admin=args.admin
        )
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   ID: {user_id}")
        print(f"   Username: {args.username}")
        print(f"   Email: {args.email}")
        print(f"   –†–æ–ª—å: {args.role or '–ù–µ—Ç'}")
        print(f"   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {'–î–∞' if args.admin else '–ù–µ—Ç'}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False
    
    return True

def list_users(args):
    """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    rbac = get_rbac_system()
    
    try:
        stats = rbac.get_rbac_stats()
        print(f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:")
        print(f"   –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats.get('active_users', 0)}")
        print(f"   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {stats.get('admin_users', 0)}")
        print(f"   –†–æ–ª–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ: {stats.get('total_roles', 0)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return False
    
    return True

def create_device_key(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    registry = get_device_registry()
    
    try:
        auth_key = registry.generate_auth_key(
            expires_hours=args.expires,
            max_usage=args.max_usage,
            is_reusable=args.reusable,
            is_ephemeral=args.ephemeral,
            tags=args.tags,
            created_by=args.created_by
        )
        
        print(f"üîë –ö–ª—é—á –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
        print(f"   –ö–ª—é—á: {auth_key}")
        print(f"   –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: {args.expires} —á–∞—Å–æ–≤")
        print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {args.max_usage if args.max_usage > 0 else '–ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ'}")
        print(f"   –ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π: {'–î–∞' if args.reusable else '–ù–µ—Ç'}")
        print(f"   –¢–µ–≥–∏: {', '.join(args.tags)}")
        print()
        print("üìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        print(f"   –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç –∫–ª—é—á –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ")
        print(f"   tailscale up --authkey={auth_key}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")
        return False
    
    return True

def list_pending_registrations(args):
    """–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π"""
    registry = get_device_registry()
    
    try:
        requests = registry.get_pending_registration_requests()
        
        if not requests:
            print("üìù –ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
            return True
        
        print(f"üìù –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å—ã ({len(requests)}):")
        print()
        
        for req in requests:
            print(f"üî∏ Request ID: {req.request_id}")
            print(f"   Hostname: {req.device_hostname}")
            print(f"   –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {req.device_type}")
            print(f"   Tailscale IP: {req.tailscale_ip or '–ù–µ —É–∫–∞–∑–∞–Ω'}")
            print(f"   –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: {req.requested_time}")
            print(f"   –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {req.device_info}")
            print()
        
        print(f"üí° –î–ª—è –æ–¥–æ–±—Ä–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print(f"   python tools/admin_cli.py approve-registration --request-id <ID>")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤: {e}")
        return False
    
    return True

def approve_registration(args):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    registry = get_device_registry()
    
    try:
        success = registry.approve_registration_request(
            request_id=args.request_id,
            approved_by=args.approved_by
        )
        
        if success:
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ {args.request_id} –æ–¥–æ–±—Ä–µ–Ω!")
            print(f"   –û–¥–æ–±—Ä–∏–ª: {args.approved_by}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–ª—É—á–∏–ª–æ –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å {args.request_id}")
            print(f"   –í–æ–∑–º–æ–∂–Ω–æ, –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        return False
    
    return True

def list_devices(args):
    """–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    registry = get_device_registry()
    
    try:
        devices = registry.get_registered_devices(
            device_type=args.type,
            status=args.status
        )
        
        if not devices:
            print("üì± –ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return True
        
        print(f"üì± –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(devices)}):")
        print()
        
        for device in devices:
            status_emoji = {
                'active': 'üü¢',
                'pending': 'üü°', 
                'inactive': 'üî¥',
                'revoked': '‚ùå'
            }.get(device.status, '‚ùì')
            
            print(f"{status_emoji} {device.hostname} ({device.device_type})")
            print(f"   ID: {device.device_id}")
            print(f"   Tailscale IP: {device.tailscale_ip}")
            print(f"   –°—Ç–∞—Ç—É—Å: {device.status}")
            print(f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {device.registration_time}")
            print(f"   –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {device.last_seen}")
            print(f"   –¢–µ–≥–∏: {', '.join(device.tags)}")
            print()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {e}")
        return False
    
    return True

def show_system_status(args):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
    rbac = get_rbac_system()
    registry = get_device_registry()
    
    try:
        rbac_stats = rbac.get_rbac_stats()
        device_stats = registry.get_device_stats()
        
        print("üè• –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´ CUBE_RS")
        print("=" * 50)
        
        print("\nüë• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò:")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {rbac_stats.get('active_users', 0)}")
        print(f"   –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã: {rbac_stats.get('admin_users', 0)}")
        print(f"   –í—Å–µ–≥–æ —Ä–æ–ª–µ–π: {rbac_stats.get('total_roles', 0)}")
        print(f"   –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ä–æ–ª–∏: {rbac_stats.get('system_roles', 0)}")
        
        print("\nüì± –£–°–¢–†–û–ô–°–¢–í–ê:")
        print(f"   –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {device_stats.get('total_devices', 0)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {device_stats.get('active_devices', 0)}")
        print(f"   –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è: {device_stats.get('pending_requests', 0)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏: {device_stats.get('active_auth_keys', 0)}")
        
        devices_by_type = device_stats.get('devices_by_type', {})
        if devices_by_type:
            print("\nüìä –£–°–¢–†–û–ô–°–¢–í–ê –ü–û –¢–ò–ü–ê–ú:")
            for device_type, count in devices_by_type.items():
                print(f"   {device_type}: {count}")
        
        print(f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {rbac_stats.get('timestamp', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False
    
    return True

def main():
    parser = argparse.ArgumentParser(description="CLI –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ CUBE_RS")
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_parser = subparsers.add_parser('create-user', help='–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user_parser.add_argument('--username', required=True, help='–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user_parser.add_argument('--email', required=True, help='Email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user_parser.add_argument('--full-name', required=True, help='–ü–æ–ª–Ω–æ–µ –∏–º—è')
    user_parser.add_argument('--password', required=True, help='–ü–∞—Ä–æ–ª—å')
    user_parser.add_argument('--role', help='–†–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    user_parser.add_argument('--admin', action='store_true', help='–°–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    subparsers.add_parser('list-users', help='–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª—é—á–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    key_parser = subparsers.add_parser('create-device-key', help='–°–æ–∑–¥–∞—Ç—å –∫–ª—é—á –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    key_parser.add_argument('--expires', type=int, default=24, help='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è (—á–∞—Å—ã)')
    key_parser.add_argument('--max-usage', type=int, default=-1, help='–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ')
    key_parser.add_argument('--reusable', action='store_true', default=True, help='–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–ª—é—á')
    key_parser.add_argument('--ephemeral', action='store_true', help='–≠—Ñ–µ–º–µ—Ä–Ω—ã–π –∫–ª—é—á')
    key_parser.add_argument('--tags', nargs='+', default=['farm'], help='–¢–µ–≥–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    key_parser.add_argument('--created-by', default='admin', help='–ö—Ç–æ —Å–æ–∑–¥–∞–ª –∫–ª—é—á')
    
    # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
    subparsers.add_parser('list-pending', help='–û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    
    # –û–¥–æ–±—Ä–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    approve_parser = subparsers.add_parser('approve-registration', help='–û–¥–æ–±—Ä–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    approve_parser.add_argument('--request-id', required=True, help='ID –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏')
    approve_parser.add_argument('--approved-by', default='admin', help='–ö—Ç–æ –æ–¥–æ–±—Ä—è–µ—Ç')
    
    # –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    devices_parser = subparsers.add_parser('list-devices', help='–°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
    devices_parser.add_argument('--type', help='–§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    devices_parser.add_argument('--status', help='–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É')
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    subparsers.add_parser('status', help='–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã')
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    print("üöÄ CUBE_RS Admin CLI")
    print("-" * 30)
    
    commands = {
        'create-user': create_user,
        'list-users': list_users,
        'create-device-key': create_device_key,
        'list-pending': list_pending_registrations,
        'approve-registration': approve_registration,
        'list-devices': list_devices,
        'status': show_system_status
    }
    
    command_func = commands.get(args.command)
    if command_func:
        success = command_func(args)
        if not success:
            sys.exit(1)
    else:
        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {args.command}")
        parser.print_help()
        sys.exit(1)

if __name__ == "__main__":
    main()