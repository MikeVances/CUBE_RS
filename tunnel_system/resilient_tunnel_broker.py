#!/usr/bin/env python3
"""
Resilient Tunnel Broker - —É–ª—É—á—à–µ–Ω–Ω—ã–π –±—Ä–æ–∫–µ—Ä —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—á–∏—Å—Ç–∫–æ–π
"""

import os
import sys
import json
import time
import asyncio
import sqlite3
import hashlib
import secrets
import threading
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, List, Any, Set
from dataclasses import dataclass, asdict
from flask import Flask, request, jsonify
from flask_cors import CORS
import websocket_server

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞—Å—Å—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ tunnel_broker.py
sys.path.insert(0, os.path.dirname(__file__))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(name)s] %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@dataclass
class ConnectionState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    request_id: str
    user_id: str
    farm_id: str
    status: str  # 'pending', 'establishing', 'connected', 'failed', 'expired'
    created_at: float
    last_activity: float
    app_offer: Dict
    farm_answer: Optional[Dict] = None
    connection_quality: Dict = None
    error_count: int = 0
    
    def __post_init__(self):
        if self.connection_quality is None:
            self.connection_quality = {
                'latency': None,
                'packet_loss': None,
                'bandwidth': None,
                'last_check': None
            }

class ConnectionStateManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.active_connections: Dict[str, ConnectionState] = {}
        self.farm_connections: Dict[str, Set[str]] = {}  # farm_id -> set of request_ids
        self.user_connections: Dict[str, Set[str]] = {}  # user_id -> set of request_ids
        self.cleanup_interval = 60  # –û—á–∏—Å—Ç–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        self.connection_timeout = 300  # 5 –º–∏–Ω—É—Ç –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.idle_timeout = 1800  # 30 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        self.is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        self.is_running = True
        logger.info("üîß Connection State Manager –∑–∞–ø—É—â–µ–Ω")
        
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–∑ –ë–î
        await self.restore_connections_from_db()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(self.cleanup_loop())
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.is_running = False
        logger.info("üîß Connection State Manager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def restore_connections_from_db(self):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–∑ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT request_id, user_id, farm_id, app_offer, farm_answer, 
                           created_at, status, expires_at
                    FROM connection_requests
                    WHERE status IN ('pending', 'answered') AND expires_at > ?
                """, (time.time(),))
                
                restored_count = 0
                for row in cursor.fetchall():
                    request_id, user_id, farm_id, app_offer, farm_answer, created_at, status, expires_at = row
                    
                    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                    connection_state = ConnectionState(
                        request_id=request_id,
                        user_id=user_id,
                        farm_id=farm_id,
                        status=status,
                        created_at=created_at,
                        last_activity=time.time(),
                        app_offer=json.loads(app_offer) if app_offer else {},
                        farm_answer=json.loads(farm_answer) if farm_answer else None
                    )
                    
                    await self.register_connection(connection_state)
                    restored_count += 1
                
                logger.info(f"‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {restored_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {e}")
    
    async def register_connection(self, connection_state: ConnectionState):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        request_id = connection_state.request_id
        user_id = connection_state.user_id
        farm_id = connection_state.farm_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.active_connections[request_id] = connection_state
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ —Ñ–µ—Ä–º–µ
        if farm_id not in self.farm_connections:
            self.farm_connections[farm_id] = set()
        self.farm_connections[farm_id].add(request_id)
        
        # –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if user_id not in self.user_connections:
            self.user_connections[user_id] = set()
        self.user_connections[user_id].add(request_id)
        
        logger.debug(f"üîó –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {request_id}: {user_id} -> {farm_id}")
    
    async def update_connection_status(self, request_id: str, status: str, farm_answer: Dict = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if request_id in self.active_connections:
            connection = self.active_connections[request_id]
            connection.status = status
            connection.last_activity = time.time()
            
            if farm_answer:
                connection.farm_answer = farm_answer
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
            await self.save_connection_to_db(connection)
            
            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Å—Ç–∞—Ç—É—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {request_id}: {status}")
    
    async def update_connection_activity(self, request_id: str, quality_metrics: Dict = None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if request_id in self.active_connections:
            connection = self.active_connections[request_id]
            connection.last_activity = time.time()
            
            if quality_metrics:
                connection.connection_quality.update(quality_metrics)
                connection.connection_quality['last_check'] = time.time()
            
            logger.debug(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {request_id}")
    
    async def remove_connection(self, request_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if request_id not in self.active_connections:
            return
        
        connection = self.active_connections[request_id]
        user_id = connection.user_id
        farm_id = connection.farm_id
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–¥–µ–∫—Å–æ–≤
        if farm_id in self.farm_connections:
            self.farm_connections[farm_id].discard(request_id)
            if not self.farm_connections[farm_id]:
                del self.farm_connections[farm_id]
        
        if user_id in self.user_connections:
            self.user_connections[user_id].discard(request_id)
            if not self.user_connections[user_id]:
                del self.user_connections[user_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        del self.active_connections[request_id]
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
        await self.remove_connection_from_db(request_id)
        
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {request_id}")
    
    async def get_farm_connections(self, farm_id: str) -> List[ConnectionState]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Ñ–µ—Ä–º—ã"""
        if farm_id not in self.farm_connections:
            return []
        
        connections = []
        for request_id in self.farm_connections[farm_id]:
            if request_id in self.active_connections:
                connections.append(self.active_connections[request_id])
        
        return connections
    
    async def get_user_connections(self, user_id: str) -> List[ConnectionState]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_connections:
            return []
        
        connections = []
        for request_id in self.user_connections[user_id]:
            if request_id in self.active_connections:
                connections.append(self.active_connections[request_id])
        
        return connections
    
    async def cleanup_loop(self):
        """–¶–∏–∫–ª –æ—á–∏—Å—Ç–∫–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while self.is_running:
            try:
                await self.cleanup_expired_connections()
                await self.cleanup_idle_connections()
                await self.cleanup_failed_connections()
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ cleanup loop: {e}")
            
            await asyncio.sleep(self.cleanup_interval)
    
    async def cleanup_expired_connections(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        current_time = time.time()
        expired_connections = []
        
        for request_id, connection in self.active_connections.items():
            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ —Å—Ç–∞—Ç—É—Å–µ pending —Å –∏—Å—Ç–µ–∫—à–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            if (connection.status == 'pending' and 
                current_time - connection.created_at > self.connection_timeout):
                expired_connections.append(request_id)
        
        for request_id in expired_connections:
            connection = self.active_connections[request_id]
            logger.info(f"‚è∞ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {request_id} –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ (pending -> expired)")
            await self.update_connection_status(request_id, 'expired')
            await self.remove_connection(request_id)
    
    async def cleanup_idle_connections(self):
        """–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        current_time = time.time()
        idle_connections = []
        
        for request_id, connection in self.active_connections.items():
            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ
            if (connection.status == 'connected' and 
                current_time - connection.last_activity > self.idle_timeout):
                idle_connections.append(request_id)
        
        for request_id in idle_connections:
            connection = self.active_connections[request_id]
            logger.info(f"üí§ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {request_id} –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ (connected -> idle)")
            await self.remove_connection(request_id)
    
    async def cleanup_failed_connections(self):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –æ—à–∏–±–∫–∞–º–∏"""
        failed_connections = []
        
        for request_id, connection in self.active_connections.items():
            if connection.error_count >= 5:  # –ë–æ–ª–µ–µ 5 –æ—à–∏–±–æ–∫
                failed_connections.append(request_id)
        
        for request_id in failed_connections:
            connection = self.active_connections[request_id]
            logger.info(f"‚ùå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {request_id} –∏–º–µ–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏")
            await self.update_connection_status(request_id, 'failed')
            await self.remove_connection(request_id)
    
    async def save_connection_to_db(self, connection: ConnectionState):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE connection_requests 
                    SET status = ?, farm_answer = ?, last_activity = ?
                    WHERE request_id = ?
                """, (
                    connection.status,
                    json.dumps(connection.farm_answer) if connection.farm_answer else None,
                    connection.last_activity,
                    connection.request_id
                ))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {connection.request_id}: {e}")
    
    async def remove_connection_from_db(self, request_id: str):
        """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("DELETE FROM connection_requests WHERE request_id = ?", (request_id,))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {request_id}: {e}")
    
    def get_statistics(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        stats = {
            'total_active': len(self.active_connections),
            'by_status': {},
            'by_farm': {},
            'avg_connection_age': 0,
            'quality_metrics': {
                'avg_latency': None,
                'connections_with_quality': 0
            }
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        for connection in self.active_connections.values():
            status = connection.status
            stats['by_status'][status] = stats['by_status'].get(status, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–µ—Ä–º–∞–º
        for farm_id, request_ids in self.farm_connections.items():
            stats['by_farm'][farm_id] = len(request_ids)
        
        # –°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        if self.active_connections:
            current_time = time.time()
            total_age = sum(current_time - conn.created_at for conn in self.active_connections.values())
            stats['avg_connection_age'] = total_age / len(self.active_connections)
        
        # –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        latencies = []
        quality_connections = 0
        
        for connection in self.active_connections.values():
            if connection.connection_quality.get('last_check'):
                quality_connections += 1
                if connection.connection_quality.get('latency'):
                    latencies.append(connection.connection_quality['latency'])
        
        stats['quality_metrics']['connections_with_quality'] = quality_connections
        if latencies:
            stats['quality_metrics']['avg_latency'] = sum(latencies) / len(latencies)
        
        return stats

class FarmStatusMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ —Ñ–µ—Ä–º"""
    
    def __init__(self, db_path: str):
        self.db_path = db_path
        self.farm_status = {}  # farm_id -> last_seen, status
        self.offline_threshold = 300  # 5 –º–∏–Ω—É—Ç –±–µ–∑ heartbeat = –æ—Ñ–ª–∞–π–Ω
        self.is_running = False
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ñ–µ—Ä–º"""
        self.is_running = True
        logger.info("üìä Farm Status Monitor –∑–∞–ø—É—â–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—É—Å—ã
        await self.load_farm_statuses()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        asyncio.create_task(self.monitor_loop())
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_running = False
        
    async def load_farm_statuses(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ–µ—Ä–º –∏–∑ –ë–î"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    SELECT farm_id, last_seen, status FROM farms
                """)
                
                for farm_id, last_seen, status in cursor.fetchall():
                    self.farm_status[farm_id] = {
                        'last_seen': last_seen,
                        'status': status
                    }
                
                logger.info(f"üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ–µ—Ä–º: {len(self.farm_status)}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ–µ—Ä–º: {e}")
    
    async def update_farm_heartbeat(self, farm_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ heartbeat —Ñ–µ—Ä–º—ã"""
        current_time = time.time()
        
        self.farm_status[farm_id] = {
            'last_seen': current_time,
            'status': 'online'
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE farms SET last_seen = ?, status = 'online'
                    WHERE farm_id = ?
                """, (current_time, farm_id))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è heartbeat –¥–ª—è {farm_id}: {e}")
    
    async def monitor_loop(self):
        """–¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ —Ñ–µ—Ä–º"""
        while self.is_running:
            try:
                current_time = time.time()
                offline_farms = []
                
                for farm_id, info in self.farm_status.items():
                    if (current_time - info['last_seen'] > self.offline_threshold and 
                        info['status'] == 'online'):
                        offline_farms.append(farm_id)
                
                # –ü–æ–º–µ—á–∞–µ–º —Ñ–µ—Ä–º—ã –∫–∞–∫ offline
                for farm_id in offline_farms:
                    await self.mark_farm_offline(farm_id)
                
                if offline_farms:
                    logger.info(f"üì¥ –§–µ—Ä–º—ã –ø–µ—Ä–µ—à–ª–∏ –≤ offline: {offline_farms}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ monitor loop: {e}")
            
            await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    
    async def mark_farm_offline(self, farm_id: str):
        """–ü–µ—Ä–µ–≤–æ–¥ —Ñ–µ—Ä–º—ã –≤ —Å—Ç–∞—Ç—É—Å offline"""
        self.farm_status[farm_id]['status'] = 'offline'
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE farms SET status = 'offline'
                    WHERE farm_id = ?
                """, (farm_id,))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–º–µ—Ç–∫–∏ {farm_id} –∫–∞–∫ offline: {e}")
    
    def get_online_farms(self) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω —Ñ–µ—Ä–º"""
        return [farm_id for farm_id, info in self.farm_status.items() 
                if info['status'] == 'online']

class ResilientTunnelBroker:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π Tunnel Broker —Å —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏"""
    
    def __init__(self, host: str = "0.0.0.0", port: int = 8080, db_path: str = "resilient_tunnel_broker.db"):
        self.host = host
        self.port = port
        self.db_path = db_path
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î (–∫–æ–ø–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ broker)
        self.init_database()
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        self.connection_manager = ConnectionStateManager(self.db_path)
        self.farm_monitor = FarmStatusMonitor(self.db_path)
        
        # Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = Flask(__name__)
        CORS(self.app)
        self.setup_routes()
        
        # WebSocket –∫–ª–∏–µ–Ω—Ç—ã
        self.ws_clients = {}
        self.setup_websocket()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–∫–µ—Ä–∞
        self.broker_stats = {
            'start_time': time.time(),
            'total_requests': 0,
            'successful_connections': 0,
            'failed_connections': 0
        }
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã (–∫–æ–ø–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ broker)
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    user_id TEXT PRIMARY KEY,
                    username TEXT UNIQUE NOT NULL,
                    email TEXT UNIQUE NOT NULL,
                    password_hash TEXT NOT NULL,
                    created_at REAL NOT NULL
                )
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS farms (
                    farm_id TEXT PRIMARY KEY,
                    owner_id TEXT NOT NULL,
                    farm_name TEXT NOT NULL,
                    last_seen REAL NOT NULL,
                    local_ip TEXT NOT NULL,
                    public_ip TEXT NOT NULL,
                    port INTEGER NOT NULL,
                    status TEXT NOT NULL,
                    api_key TEXT NOT NULL,
                    capabilities TEXT NOT NULL,
                    FOREIGN KEY (owner_id) REFERENCES users (user_id)
                )
            """)
            
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS user_farms (
                    user_id TEXT NOT NULL,
                    farm_id TEXT NOT NULL,
                    access_level TEXT DEFAULT 'read',
                    granted_at REAL NOT NULL,
                    PRIMARY KEY (user_id, farm_id),
                    FOREIGN KEY (user_id) REFERENCES users (user_id),
                    FOREIGN KEY (farm_id) REFERENCES farms (farm_id)
                )
            """)
            
            # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS connection_requests (
                    request_id TEXT PRIMARY KEY,
                    user_id TEXT NOT NULL,
                    farm_id TEXT NOT NULL,
                    app_offer TEXT NOT NULL,
                    farm_answer TEXT,
                    created_at REAL NOT NULL,
                    last_activity REAL NOT NULL,
                    status TEXT NOT NULL,
                    expires_at REAL NOT NULL,
                    error_count INTEGER DEFAULT 0,
                    quality_metrics TEXT,
                    FOREIGN KEY (user_id) REFERENCES users (user_id),
                    FOREIGN KEY (farm_id) REFERENCES farms (farm_id)
                )
            """)
            
            # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS connection_stats (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    farm_id TEXT NOT NULL,
                    user_id TEXT NOT NULL,
                    connection_duration REAL,
                    quality_avg TEXT,
                    disconnect_reason TEXT,
                    timestamp REAL NOT NULL
                )
            """)
            
            conn.commit()
            logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö Resilient Tunnel Broker –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö HTTP –º–∞—Ä—à—Ä—É—Ç–æ–≤"""
        # –ë–∞–∑–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ broker)
        @self.app.route('/health')
        def health():
            stats = self.connection_manager.get_statistics()
            return jsonify({
                'status': 'healthy',
                'service': 'resilient-tunnel-broker',
                'timestamp': time.time(),
                'uptime': time.time() - self.broker_stats['start_time'],
                'connections': stats,
                'online_farms': len(self.farm_monitor.get_online_farms())
            })
        
        @self.app.route('/api/farm/heartbeat', methods=['POST'])
        def farm_heartbeat():
            data = request.json
            farm_id = data.get('farm_id')
            
            if not farm_id:
                return jsonify({'status': 'error', 'message': 'farm_id required'}), 400
            
            # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat
            asyncio.run_coroutine_threadsafe(
                self.farm_monitor.update_farm_heartbeat(farm_id),
                asyncio.get_event_loop()
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.cursor()
                cursor.execute("""
                    UPDATE farms SET last_seen = ?, public_ip = ?, status = 'online'
                    WHERE farm_id = ?
                """, (time.time(), request.remote_addr, farm_id))
                conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º pending –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ñ–µ—Ä–º—ã
            pending_requests = asyncio.run_coroutine_threadsafe(
                self.get_pending_requests_for_farm(farm_id),
                asyncio.get_event_loop()
            ).result()
            
            return jsonify({
                'status': 'success',
                'pending_requests': len(pending_requests),
                'requests': pending_requests
            })
        
        @self.app.route('/api/connect/request', methods=['POST'])
        def request_connection():
            data = request.json
            
            user_id = data.get('user_id')
            farm_id = data.get('farm_id')
            app_offer = data.get('webrtc_offer', {})
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            request_id = f"req_{secrets.token_hex(12)}"
            expires_at = time.time() + 300  # 5 –º–∏–Ω—É—Ç
            
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                with sqlite3.connect(self.db_path) as conn:
                    cursor = conn.cursor()
                    cursor.execute("""
                        INSERT INTO connection_requests (
                            request_id, user_id, farm_id, app_offer, created_at, 
                            last_activity, status, expires_at
                        ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
                    """, (
                        request_id, user_id, farm_id, json.dumps(app_offer),
                        time.time(), time.time(), "pending", expires_at
                    ))
                    conn.commit()
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                connection_state = ConnectionState(
                    request_id=request_id,
                    user_id=user_id,
                    farm_id=farm_id,
                    status='pending',
                    created_at=time.time(),
                    last_activity=time.time(),
                    app_offer=app_offer
                )
                
                # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ
                asyncio.run_coroutine_threadsafe(
                    self.connection_manager.register_connection(connection_state),
                    asyncio.get_event_loop()
                )
                
                # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ñ–µ—Ä–º—É
                self.notify_farm(farm_id, {
                    'type': 'connection_request',
                    'request_id': request_id,
                    'user_id': user_id
                })
                
                self.broker_stats['total_requests'] += 1
                
                return jsonify({
                    'status': 'success',
                    'request_id': request_id,
                    'message': '–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω'
                })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
                return jsonify({
                    'status': 'error',
                    'message': '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞'
                }), 400
        
        @self.app.route('/api/connect/answer', methods=['POST'])
        def answer_connection():
            data = request.json
            request_id = data.get('request_id')
            farm_answer = data.get('webrtc_answer')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            asyncio.run_coroutine_threadsafe(
                self.connection_manager.update_connection_status(
                    request_id, 'answered', farm_answer
                ),
                asyncio.get_event_loop()
            )
            
            return jsonify({
                'status': 'success',
                'message': '–û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω'
            })
        
        @self.app.route('/api/connect/status/<request_id>')
        def get_connection_status(request_id):
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
            if request_id in self.connection_manager.active_connections:
                connection = self.connection_manager.active_connections[request_id]
                
                return jsonify({
                    'status': 'success',
                    'connection_status': connection.status,
                    'farm_answer': connection.farm_answer,
                    'quality': connection.connection_quality,
                    'created_at': connection.created_at,
                    'last_activity': connection.last_activity
                })
            else:
                return jsonify({
                    'status': 'error',
                    'message': '–ó–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                }), 404
        
        @self.app.route('/api/stats')
        def get_broker_stats():
            connection_stats = self.connection_manager.get_statistics()
            
            return jsonify({
                'broker': self.broker_stats,
                'connections': connection_stats,
                'farms': {
                    'online': self.farm_monitor.get_online_farms(),
                    'total_online': len(self.farm_monitor.get_online_farms())
                }
            })
    
    async def get_pending_requests_for_farm(self, farm_id: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Ñ–µ—Ä–º—ã"""
        connections = await self.connection_manager.get_farm_connections(farm_id)
        
        pending_requests = []
        for connection in connections:
            if connection.status == 'pending':
                pending_requests.append({
                    'request_id': connection.request_id,
                    'user_id': connection.user_id,
                    'app_offer': connection.app_offer,
                    'created_at': connection.created_at
                })
        
        return pending_requests
    
    def notify_farm(self, farm_id: str, message: Dict):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–µ—Ä–º—ã —á–µ—Ä–µ–∑ WebSocket"""
        if farm_id in self.ws_clients:
            try:
                client = self.ws_clients[farm_id]
                # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏: websocket_server.send_message(client, json.dumps(message))
                logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ñ–µ—Ä–º–µ {farm_id}: {message.get('type')}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ñ–µ—Ä–º–µ {farm_id}: {e}")
    
    def setup_websocket(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π WebSocket —Å–µ—Ä–≤–µ—Ä
        logger.info(f"üîå WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {self.port + 1}")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ resilient broker"""
        logger.info(f"üöÄ Resilient Tunnel Broker –∑–∞–ø—É—â–µ–Ω –Ω–∞ {self.host}:{self.port}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        await self.connection_manager.start()
        await self.farm_monitor.start()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        flask_thread = threading.Thread(
            target=lambda: self.app.run(
                host=self.host, 
                port=self.port, 
                debug=False, 
                threaded=True
            ),
            daemon=True
        )
        flask_thread.start()
        
        logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã Resilient Tunnel Broker –∑–∞–ø—É—â–µ–Ω—ã")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        try:
            while True:
                await asyncio.sleep(1)
        except KeyboardInterrupt:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Resilient Tunnel Broker...")
            self.connection_manager.stop()
            self.farm_monitor.stop()

if __name__ == '__main__':
    import argparse
    
    parser = argparse.ArgumentParser(description='Resilient Tunnel Broker Server')
    parser.add_argument('--host', default='0.0.0.0', help='Host to bind to')
    parser.add_argument('--port', type=int, default=8080, help='Port to bind to')
    parser.add_argument('--db', default='resilient_tunnel_broker.db', help='Database file path')
    
    args = parser.parse_args()
    
    broker = ResilientTunnelBroker(host=args.host, port=args.port, db_path=args.db)
    
    try:
        asyncio.run(broker.start())
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        pass