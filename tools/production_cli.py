#!/usr/bin/env python3
"""
Production CLI - –£—Ç–∏–ª–∏—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
–ú–∞—Å—Å–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏, –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä—Ç–∏–π, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
"""

import argparse
import sys
import json
import os
from pathlib import Path
from datetime import datetime
import logging
from typing import List, Dict, Any
import secrets
import csv

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ web_app –¥–ª—è –∏–º–ø–æ—Ä—Ç–æ–≤
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'web_app'))

from production_device_registry import get_production_registry, ProductionDeviceRegistry
from rbac_system import get_rbac_system

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

def create_batch(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–æ–π –ø–∞—Ä—Ç–∏–∏"""
    registry = get_production_registry()
    
    tags = args.tags.split(',') if args.tags else ["production"]
    
    hardware_specs = {}
    if args.hardware_specs:
        try:
            hardware_specs = json.loads(args.hardware_specs)
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON –¥–ª—è hardware_specs")
            return False
    
    try:
        batch_id = registry.create_production_batch(
            batch_name=args.name,
            device_count=args.count,
            device_type=args.device_type,
            tags=tags,
            target_deployment=args.deployment,
            hardware_specs=hardware_specs,
            created_by=args.created_by,
            notes=args.notes or ""
        )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è –ø–∞—Ä—Ç–∏—è:")
        print(f"   ID: {batch_id}")
        print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {args.name}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {args.count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print(f"   –¢–∏–ø: {args.device_type}")
        print(f"   –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {args.deployment}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Ç–∏–∏: {e}")
        return False

def prepare_batch(args):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ø–∞—Ä—Ç–∏–∏"""
    registry = get_production_registry()
    
    try:
        devices = registry.prepare_batch_devices(args.batch_id)
        
        print(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∞ –ø–∞—Ä—Ç–∏—è {args.batch_id}:")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
        if args.output:
            output_data = {
                "batch_id": args.batch_id,
                "prepared_time": datetime.now().isoformat(),
                "device_count": len(devices),
                "devices": []
            }
            
            for device in devices:
                output_data["devices"].append({
                    "device_serial": device["device_serial"],
                    "auth_key": device["auth_key"],
                    "activation_token": device["activation_token"],
                    "hardware_id": device["hardware_id"]
                })
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON –∏–ª–∏ CSV
            output_path = Path(args.output)
            if output_path.suffix.lower() == '.csv':
                with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
                    fieldnames = ['device_serial', 'auth_key', 'activation_token', 'hardware_id']
                    writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                    writer.writeheader()
                    for device in devices:
                        writer.writerow(device)
            else:
                with open(output_path, 'w', encoding='utf-8') as f:
                    json.dump(output_data, f, indent=2, ensure_ascii=False)
            
            print(f"   –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {args.output}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        print("\nüì± –ü–µ—Ä–≤—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
        for device in devices[:min(3, len(devices))]:
            print(f"   {device['device_serial']}:")
            print(f"     Auth Key: {device['auth_key'][:30]}...")
            print(f"     Activation Token: {device['activation_token'][:20]}...")
        
        if len(devices) > 3:
            print(f"   ... –∏ –µ—â–µ {len(devices) - 3} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø–∞—Ä—Ç–∏–∏: {e}")
        return False

def list_batches(args):
    """–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π"""
    registry = get_production_registry()
    
    try:
        batches = registry.get_production_batches(status=args.status)
        
        if not batches:
            print("üì¶ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        print(f"üì¶ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ ({len(batches)}):")
        print()
        
        for batch in batches:
            status_icon = {
                "created": "üü°",
                "prepared": "üü¢", 
                "deployed": "üîµ",
                "completed": "‚úÖ"
            }.get(batch.status, "‚ùì")
            
            print(f"{status_icon} {batch.batch_name}")
            print(f"   ID: {batch.batch_id}")
            print(f"   –°—Ç–∞—Ç—É—Å: {batch.status}")
            print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {batch.device_count} ({batch.device_type})")
            print(f"   –°–æ–∑–¥–∞–Ω–æ: {batch.created_time} ({batch.created_by})")
            print(f"   –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {batch.target_deployment}")
            if batch.notes:
                print(f"   –ó–∞–º–µ—Ç–∫–∏: {batch.notes}")
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–∞—Ä—Ç–∏–π: {e}")
        return False

def show_batch(args):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞—Ä—Ç–∏–∏"""
    registry = get_production_registry()
    
    try:
        batches = registry.get_production_batches()
        batch = next((b for b in batches if b.batch_id == args.batch_id), None)
        
        if not batch:
            print(f"‚ùå –ü–∞—Ä—Ç–∏—è {args.batch_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Ç–∏–∏
        print(f"üì¶ –ü–∞—Ä—Ç–∏—è: {batch.batch_name}")
        print(f"   ID: {batch.batch_id}")
        print(f"   –°—Ç–∞—Ç—É—Å: {batch.status}")
        print(f"   –¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {batch.device_type}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {batch.device_count}")
        print(f"   –°–æ–∑–¥–∞–Ω–æ: {batch.created_time} ({batch.created_by})")
        print(f"   –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ: {batch.target_deployment}")
        print(f"   –¢–µ–≥–∏: {', '.join(batch.tags)}")
        
        if batch.hardware_specs:
            print(f"   –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∂–µ–ª–µ–∑–∞:")
            for key, value in batch.hardware_specs.items():
                print(f"     {key}: {value}")
        
        if batch.notes:
            print(f"   –ó–∞–º–µ—Ç–∫–∏: {batch.notes}")
        
        # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ø–∞—Ä—Ç–∏–∏
        devices = registry.get_batch_devices(args.batch_id)
        if devices:
            print(f"\nüì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ø–∞—Ä—Ç–∏–∏ ({len(devices)}):")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
            status_counts = {}
            for device in devices:
                status_counts[device.status] = status_counts.get(device.status, 0) + 1
            
            print("   –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            for status, count in status_counts.items():
                status_icon = {
                    "prepared": "üü°",
                    "activated": "üü†", 
                    "registered": "üü¢",
                    "deployed": "‚úÖ"
                }.get(status, "‚ùì")
                print(f"     {status_icon} {status}: {count}")
            
            if args.show_devices:
                print("\n   –°–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤:")
                for device in devices[:args.limit] if args.limit else devices:
                    status_icon = {
                        "prepared": "üü°",
                        "activated": "üü†", 
                        "registered": "üü¢",
                        "deployed": "‚úÖ"
                    }.get(device.status, "‚ùì")
                    
                    print(f"   {status_icon} {device.device_serial} ({device.status})")
                    if device.activated_time:
                        print(f"       –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω: {device.activated_time}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞—Ä—Ç–∏–∏: {e}")
        return False

def list_activations(args):
    """–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
    registry = get_production_registry()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        pending_requests = registry.get_pending_registration_requests()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ –ø–æ–ª–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        field_activations = []
        for request in pending_requests:
            device_info = request.device_info
            if device_info.get("activation_method") == "field_activation":
                field_activations.append(request)
        
        if not field_activations:
            print("üîÑ –û–∂–∏–¥–∞—é—â–∏—Ö –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª–µ–≤—ã—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        print(f"üîÑ –û–∂–∏–¥–∞—é—â–∏–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è –ø–æ–ª–µ–≤—ã–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ ({len(field_activations)}):")
        print()
        
        for request in field_activations:
            device_info = request.device_info
            print(f"üì± {request.device_hostname}")
            print(f"   Request ID: {request.request_id}")
            print(f"   –¢–∏–ø: {request.device_type}")
            print(f"   –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {request.requested_time}")
            print(f"   –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ: {device_info.get('activated_by', 'unknown')}")
            if request.tailscale_ip:
                print(f"   Tailscale IP: {request.tailscale_ip}")
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∂–µ–ª–µ–∑–µ
            if "hardware_signature" in device_info:
                hw_sig = device_info["hardware_signature"]
                if "mac_addresses" in hw_sig:
                    print(f"   MAC –∞–¥—Ä–µ—Å–∞: {', '.join(hw_sig['mac_addresses'])}")
                if "cpu_serial" in hw_sig:
                    print(f"   CPU Serial: {hw_sig['cpu_serial']}")
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–π: {e}")
        return False

def approve_activation(args):
    """–û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
    registry = get_production_registry()
    
    try:
        success = registry.approve_production_registration(
            request_id=args.request_id,
            approved_by=args.approved_by,
            tailscale_ip=args.tailscale_ip or ""
        )
        
        if success:
            print(f"‚úÖ –ê–∫—Ç–∏–≤–∞—Ü–∏—è –æ–¥–æ–±—Ä–µ–Ω–∞:")
            print(f"   Request ID: {args.request_id}")
            print(f"   –û–¥–æ–±—Ä–∏–ª: {args.approved_by}")
            if args.tailscale_ip:
                print(f"   Tailscale IP: {args.tailscale_ip}")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–¥–æ–±—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é {args.request_id}")
            return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {e}")
        return False

def production_stats(args):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    registry = get_production_registry()
    
    try:
        stats = registry.get_production_stats()
        
        print("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:")
        print()
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        print("üîß –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {stats.get('total_devices', 0)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {stats.get('active_devices', 0)}")
        print(f"   –û–∂–∏–¥–∞—é—â–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {stats.get('pending_requests', 0)}")
        print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö auth –∫–ª—é—á–µ–π: {stats.get('active_auth_keys', 0)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        devices_by_type = stats.get('devices_by_type', {})
        if devices_by_type:
            print(f"\nüì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø–∞–º:")
            for device_type, count in devices_by_type.items():
                print(f"   {device_type}: {count}")
        
        # –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüè≠ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ –ø–∞—Ä—Ç–∏–π: {stats.get('total_production_batches', 0)}")
        print(f"   –ü—Ä–µ–¥–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {stats.get('total_pre_shared_devices', 0)}")
        print(f"   –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –ø—Ä–∏–≤—è–∑–æ–∫ –∫ –∂–µ–ª–µ–∑—É: {stats.get('verified_hardware_bindings', 0)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–∞—Ä—Ç–∏–π –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        batches_by_status = stats.get('batches_by_status', {})
        if batches_by_status:
            print(f"\nüì¶ –ü–∞—Ä—Ç–∏–∏ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
            for status, count in batches_by_status.items():
                status_icon = {
                    "created": "üü°",
                    "prepared": "üü¢", 
                    "deployed": "üîµ",
                    "completed": "‚úÖ"
                }.get(status, "‚ùì")
                print(f"   {status_icon} {status}: {count}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–µ–¥–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        pre_devices_by_status = stats.get('pre_devices_by_status', {})
        if pre_devices_by_status:
            print(f"\nüîÑ –ü—Ä–µ–¥–ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
            for status, count in pre_devices_by_status.items():
                status_icon = {
                    "prepared": "üü°",
                    "activated": "üü†", 
                    "registered": "üü¢",
                    "deployed": "‚úÖ"
                }.get(status, "‚ùì")
                print(f"   {status_icon} {status}: {count}")
        
        print(f"\n‚è∞ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {stats.get('production_timestamp', 'N/A')}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False

def export_batch(args):
    """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–∏ –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è"""
    registry = get_production_registry()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞—Ä—Ç–∏–∏
        batches = registry.get_production_batches()
        batch = next((b for b in batches if b.batch_id == args.batch_id), None)
        
        if not batch:
            print(f"‚ùå –ü–∞—Ä—Ç–∏—è {args.batch_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–∞—Ä—Ç–∏–∏
        devices = registry.get_batch_devices(args.batch_id)
        
        if not devices:
            print(f"‚ùå –í –ø–∞—Ä—Ç–∏–∏ {args.batch_id} –Ω–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
            return False
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_data = {
            "batch_info": {
                "batch_id": batch.batch_id,
                "batch_name": batch.batch_name,
                "device_count": batch.device_count,
                "device_type": batch.device_type,
                "created_time": batch.created_time,
                "status": batch.status,
                "tags": batch.tags,
                "hardware_specs": batch.hardware_specs
            },
            "deployment_instructions": {
                "step_1": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ gateway –Ω–∞ —Ü–µ–ª–µ–≤–æ–µ –∂–µ–ª–µ–∑–æ",
                "step_2": "–ó–∞–ø—É—Å—Ç–∏—Ç–µ gateway —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º auth_key",
                "step_3": "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–∫—Ç–∏–≤–∞—Ü–∏—é —Å –ø–æ–º–æ—â—å—é activation_token",
                "step_4": "–î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"
            },
            "devices": []
        }
        
        for device in devices:
            device_data = {
                "device_serial": device.device_serial,
                "activation_token": device.activation_token,
                "hardware_id": device.hardware_id,
                "status": device.status,
                "created_time": device.created_time
            }
            
            if device.activated_time:
                device_data["activated_time"] = device.activated_time
            
            export_data["devices"].append(device_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_path = Path(args.output)
        
        if output_path.suffix.lower() == '.csv':
            # CSV —ç–∫—Å–ø–æ—Ä—Ç - —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            with open(output_path, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = ['device_serial', 'activation_token', 'hardware_id', 'status']
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                for device in export_data["devices"]:
                    writer.writerow({k: device.get(k, '') for k in fieldnames})
        else:
            # JSON —ç–∫—Å–ø–æ—Ä—Ç - –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
        print(f"   –ü–∞—Ä—Ç–∏—è: {batch.batch_name}")
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤: {len(devices)}")
        print(f"   –§–∞–π–ª: {args.output}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–∞—Ä—Ç–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="Production CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º CUBE_RS",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–∞—Ä—Ç–∏–∏
  python production_cli.py create-batch --name "Gateway_2024_Q1" --count 50 --device-type gateway

  # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –ø–∞—Ä—Ç–∏–∏
  python production_cli.py prepare-batch --batch-id batch_abc123 --output devices.json

  # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–∞—Ä—Ç–∏–π
  python production_cli.py list-batches

  # –î–µ—Ç–∞–ª–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–∞—Ä—Ç–∏–∏
  python production_cli.py show-batch --batch-id batch_abc123 --show-devices

  # –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π
  python production_cli.py list-activations

  # –û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
  python production_cli.py approve-activation --request-id req_123 --approved-by admin

  # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
  python production_cli.py stats

  # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–∏
  python production_cli.py export-batch --batch-id batch_abc123 --output deployment_data.json
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏
    create_parser = subparsers.add_parser('create-batch', help='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—É—é –ø–∞—Ä—Ç–∏—é')
    create_parser.add_argument('--name', required=True, help='–ù–∞–∑–≤–∞–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏')
    create_parser.add_argument('--count', type=int, required=True, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
    create_parser.add_argument('--device-type', default='gateway', help='–¢–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (default: gateway)')
    create_parser.add_argument('--deployment', default='production', help='–¢–∏–ø —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è (default: production)')
    create_parser.add_argument('--tags', help='–¢–µ–≥–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    create_parser.add_argument('--hardware-specs', help='JSON —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –∂–µ–ª–µ–∑–∞')
    create_parser.add_argument('--created-by', default='production_cli', help='–°–æ–∑–¥–∞—Ç–µ–ª—å –ø–∞—Ä—Ç–∏–∏')
    create_parser.add_argument('--notes', help='–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–º–µ—Ç–∫–∏')
    create_parser.set_defaults(func=create_batch)
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä—Ç–∏–∏
    prepare_parser = subparsers.add_parser('prepare-batch', help='–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –ø–∞—Ä—Ç–∏–∏')
    prepare_parser.add_argument('--batch-id', required=True, help='ID –ø–∞—Ä—Ç–∏–∏')
    prepare_parser.add_argument('--output', help='–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (JSON –∏–ª–∏ CSV)')
    prepare_parser.set_defaults(func=prepare_batch)
    
    # –°–ø–∏—Å–æ–∫ –ø–∞—Ä—Ç–∏–π
    list_parser = subparsers.add_parser('list-batches', help='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–∞—Ä—Ç–∏–π')
    list_parser.add_argument('--status', help='–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É')
    list_parser.set_defaults(func=list_batches)
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—Ç–∏—é
    show_parser = subparsers.add_parser('show-batch', help='–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–∞—Ä—Ç–∏–∏')
    show_parser.add_argument('--batch-id', required=True, help='ID –ø–∞—Ä—Ç–∏–∏')
    show_parser.add_argument('--show-devices', action='store_true', help='–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤')
    show_parser.add_argument('--limit', type=int, help='–õ–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –ø–æ–∫–∞–∑–∞')
    show_parser.set_defaults(func=show_batch)
    
    # –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–∞—Ü–∏–π
    activations_parser = subparsers.add_parser('list-activations', help='–°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö –∞–∫—Ç–∏–≤–∞—Ü–∏–π')
    activations_parser.set_defaults(func=list_activations)
    
    # –û–¥–æ–±—Ä–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
    approve_parser = subparsers.add_parser('approve-activation', help='–û–¥–æ–±—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    approve_parser.add_argument('--request-id', required=True, help='ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
    approve_parser.add_argument('--approved-by', default='production_admin', help='–ö—Ç–æ –æ–¥–æ–±—Ä—è–µ—Ç')
    approve_parser.add_argument('--tailscale-ip', help='Tailscale IP –∞–¥—Ä–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    approve_parser.set_defaults(func=approve_activation)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    stats_parser = subparsers.add_parser('stats', help='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è')
    stats_parser.set_defaults(func=production_stats)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä—Ç–∏–∏
    export_parser = subparsers.add_parser('export-batch', help='–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–∞—Ä—Ç–∏–∏')
    export_parser.add_argument('--batch-id', required=True, help='ID –ø–∞—Ä—Ç–∏–∏')
    export_parser.add_argument('--output', required=True, help='–í—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª (JSON –∏–ª–∏ CSV)')
    export_parser.set_defaults(func=export_batch)
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try:
        return args.func(args)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ production_cli")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)