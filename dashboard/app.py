"""
Streamlit Dashboard –¥–ª—è –ö–£–ë-1063
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤ —Å—Ç–∏–ª–µ Grafana
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streamlit as st
import time
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import pandas as pd

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
from modbus.dashboard_reader import read_all, get_statistics, get_historical_data
DEVICE_AVAILABLE = True

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–£–ë-1063 Dashboard", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –°—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ Grafana
st.markdown("""
    <style>
    /* –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–º–∞ */
    .stApp {
        background-color: #0d1117;
        color: #e6edf3;
    }
    
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .stMetric {
        background-color: #21262d;
        border: 1px solid #30363d;
        border-radius: 6px;
        padding: 16px;
        margin: 8px 0;
    }
    
    .stMetric > div {
        background-color: transparent !important;
    }
    
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        color: #58a6ff !important;
    }
    
    /* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã */
    .element-container {
        background-color: #21262d;
        border-radius: 6px;
        margin: 8px 0;
    }
    
    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        background-color: #0d1117;
    }
    </style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫—ç—à–∞ –¥–ª—è —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö)
if 'data_cache' not in st.session_state:
    st.session_state.data_cache = {}
    st.session_state.cache_timestamp = None

def smooth_data(data, cache_window=5):
    """–°–≥–ª–∞–∂–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É—è —Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ"""
    if not data:
        return data
    
    current_time = datetime.now()
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫—ç—à
    if 'data_cache' not in st.session_state:
        st.session_state.data_cache = {}
    
    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥)
    if st.session_state.cache_timestamp:
        if (current_time - st.session_state.cache_timestamp).total_seconds() > 30:
            st.session_state.data_cache = {}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    for key, value in data.items():
        if key not in ['timestamp', 'connection_status', 'success_rate', 'error']:
            if key not in st.session_state.data_cache:
                st.session_state.data_cache[key] = []
            
            if value is not None:
                st.session_state.data_cache[key].append(value)
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫—ç—à–∞
                if len(st.session_state.data_cache[key]) > cache_window:
                    st.session_state.data_cache[key] = st.session_state.data_cache[key][-cache_window:]
    
    st.session_state.cache_timestamp = current_time
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–≥–ª–∞–∂–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    smoothed_data = data.copy()
    for key, values in st.session_state.data_cache.items():
        if values and len(values) > 0:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ–¥–∏–∞–Ω—É –¥–ª—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏ –∫ –≤—ã–±—Ä–æ—Å–∞–º
            import statistics
            try:
                smoothed_value = statistics.median(values)
                smoothed_data[key] = smoothed_value
            except:
                smoothed_data[key] = values[-1]  # –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –µ—Å–ª–∏ –º–µ–¥–∏–∞–Ω–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    return smoothed_data

def get_status_color(value, min_val, max_val):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if min_val <= value <= max_val:
        return "#28a745"  # –ó–µ–ª–µ–Ω—ã–π
    elif abs(value - min_val) < abs(value - max_val):
        return "#ffc107"  # –ñ–µ–ª—Ç—ã–π
    else:
        return "#dc3545"  # –ö—Ä–∞—Å–Ω—ã–π

def main():
    st.title("üìä –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ö–£–ë-1063")
    
    # –°–æ–∑–¥–∞–µ–º placeholder –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    placeholder = st.empty()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
        refresh_interval = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", 1, 60, 5)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è
        st.header("üîß –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
        smoothing_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ", value=True)
        cache_window = st.slider("–û–∫–Ω–æ —Å–≥–ª–∞–∂–∏–≤–∞–Ω–∏—è", 1, 10, 3)
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
        if 'data_cache' in st.session_state and st.session_state.data_cache:
            st.header("üìä –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
            cache_size = sum(len(values) for values in st.session_state.data_cache.values())
            if cache_size > 0:
                st.success(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã ({cache_size} –∏–∑–º–µ—Ä–µ–Ω–∏–π)")
            else:
                st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã")
        
        st.header("üìà –ò—Å—Ç–æ—Ä–∏—è –¥–∞–Ω–Ω—ã—Ö")
        history_hours = st.slider("–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞ —á–∞—Å–æ–≤", 1, 24, 6)
        
        st.info("üíæ –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    while True:
        with placeholder.container():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            try:
                raw_data = read_all()
                if raw_data:
                    # –î–æ–±–∞–≤–ª—è–µ–º timestamp –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    if 'timestamp' not in raw_data:
                        raw_data['timestamp'] = datetime.now()
                    
                    # –°–≥–ª–∞–∂–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    if smoothing_enabled:
                        data = smooth_data(raw_data, cache_window=cache_window)
                    else:
                        data = raw_data
                    
                    # –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ë–î —á–µ—Ä–µ–∑ Gateway
                else:
                    st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
                    data = {}
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                data = {}
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.subheader("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                temp_inside = data.get('temp_inside', 0)
                temp_target = data.get('temp_target', 25)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ None
                if temp_inside is None:
                    temp_inside = 0
                if temp_target is None:
                    temp_target = 25
                    
                temp_color = get_status_color(temp_inside, temp_target - 2, temp_target + 2)
                
                temp_inside_str = f"{temp_inside:.1f}¬∞C" if temp_inside is not None else "N/A"
                temp_target_str = f"{temp_target:.1f}¬∞C" if temp_target is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {temp_color};">
                    <h4 style="margin: 0; color: #e6edf3;">üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</h4>
                    <h2 style="margin: 8px 0; color: {temp_color};">{temp_inside_str}</h2>
                    <small style="color: #8b949e;">–¶–µ–ª—å: {temp_target_str}</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                humidity = data.get('humidity', 0)
                if humidity is None:
                    humidity = 0
                humidity_color = get_status_color(humidity, 40, 70)
                humidity_str = f"{humidity:.1f}%" if humidity is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {humidity_color};">
                    <h4 style="margin: 0; color: #e6edf3;">üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å</h4>
                    <h2 style="margin: 8px 0; color: {humidity_color};">{humidity_str}</h2>
                    <small style="color: #8b949e;">–ù–æ—Ä–º–∞: 40-70%</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                co2 = data.get('co2', 0)
                if co2 is None:
                    co2 = 0
                co2_color = get_status_color(co2, 400, 800)
                co2_str = f"{co2} ppm" if co2 is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {co2_color};">
                    <h4 style="margin: 0; color: #e6edf3;">ü´Å CO‚ÇÇ</h4>
                    <h2 style="margin: 8px 0; color: {co2_color};">{co2_str}</h2>
                    <small style="color: #8b949e;">–ù–æ—Ä–º–∞: 400-3000 ppm</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                ventilation = data.get('ventilation_level', 0)
                if ventilation is None:
                    ventilation = 0
                vent_color = "#58a6ff"
                ventilation_str = f"{ventilation}%" if ventilation is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {vent_color};">
                    <h4 style="margin: 0; color: #e6edf3;">üåÄ –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è</h4>
                    <h2 style="margin: 8px 0; color: {vent_color};">{ventilation_str}</h2>
                    <small style="color: #8b949e;">–£—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏</small>
                </div>
                """, unsafe_allow_html=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            st.subheader("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            col5, col6, col7, col8 = st.columns(4)
            
            with col5:
                pressure = data.get('pressure', 0)
                pressure_str = f"{pressure:.1f} –ü–∞" if pressure is not None else "N/A"
                st.markdown(
                    '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üå™Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ</div>',
                    unsafe_allow_html=True
                )
                st.metric(label="", value=pressure_str, help="–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", label_visibility="collapsed")
            
            with col6:
                nh3 = data.get('nh3', 0)
                nh3_str = f"{nh3:.1f} ppm" if nh3 is not None else "N/A"
                st.markdown(
                    '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üí® NH‚ÇÉ</div>',
                    unsafe_allow_html=True
                )
                st.metric(label="", value=nh3_str, help="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∞–º–º–∏–∞–∫–∞", label_visibility="collapsed")
            
            with col7:
                st.markdown(
                    '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üíª –í–µ—Ä—Å–∏—è –ü–û</div>',
                    unsafe_allow_html=True
                )
                st.metric(label="", value=data.get('software_version', '‚Äì'), help="–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞", label_visibility="collapsed")
            
            with col8:
                last_update = data.get('timestamp', datetime.now())
                st.markdown(
                    '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ</div>',
                    unsafe_allow_html=True
                )
                st.metric(label="", value=last_update.strftime("%H:%M:%S"), help="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", label_visibility="collapsed")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if DEVICE_AVAILABLE:
                try:
                    stats = get_statistics()
                    if stats:
                        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã")
                        col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
                        
                        with col_stats1:
                            st.markdown(
                                '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö</div>',
                                unsafe_allow_html=True
                            )
                            st.metric(label="", value=stats.get('success_count', 0), label_visibility="collapsed")
                        
                        with col_stats2:
                            st.markdown(
                                '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">‚ùå –û—à–∏–±–æ–∫</div>',
                                unsafe_allow_html=True
                            )
                            st.metric(label="", value=stats.get('error_count', 0), label_visibility="collapsed")
                        
                        with col_stats3:
                            success_rate = stats.get('success_rate', 0) * 100
                            st.markdown(
                                '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>',
                                unsafe_allow_html=True
                            )
                            st.metric(label="", value=f"{success_rate:.1f}%", label_visibility="collapsed")
                        
                        with col_stats4:
                            is_running = stats.get('is_running', False)
                            status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                            st.markdown(
                                '<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üîÑ –°—Ç–∞—Ç—É—Å</div>',
                                unsafe_allow_html=True
                            )
                            st.metric(label="", value=status, label_visibility="collapsed")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
            
            # –ì—Ä–∞—Ñ–∏–∫–∏ —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            st.subheader("üìà –ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –≥—Ä–∞—Ñ–∏–∫–∏")
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
                historical_data = get_historical_data(hours=history_hours)
                
                if historical_data and len(historical_data) > 1:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame
                    df = pd.DataFrame(historical_data)
                    df['timestamp'] = pd.to_datetime(df['timestamp'])
                    
                    st.info(f"üìä –ü–æ–∫–∞–∑–∞–Ω–æ {len(historical_data)} –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {history_hours} —á–∞—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
                    
                else:
                    st.warning("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.")
                    st.info("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏")
                    historical_data = None
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
                historical_data = None
                
            if historical_data and len(historical_data) > 1:
                # –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
                col_temp, col_hum = st.columns(2)
                
                with col_temp:
                    fig_temp = go.Figure()
                    
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (—É–±–∏—Ä–∞–µ–º None)
                    temp_data = df[df['temp_inside'].notna()].copy()
                    if not temp_data.empty:
                        fig_temp.add_trace(go.Scatter(
                            x=temp_data['timestamp'], 
                            y=temp_data['temp_inside'],
                            mode='lines+markers',
                            name='–¢–µ–∫—É—â–∞—è',
                            line=dict(color='#58a6ff', width=2),
                            connectgaps=False  # –ù–µ —Å–æ–µ–¥–∏–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
                        ))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–ª–µ–≤—É—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    target_data = df[df['temp_target'].notna()].copy()
                    if not target_data.empty:
                        fig_temp.add_trace(go.Scatter(
                            x=target_data['timestamp'], 
                            y=target_data['temp_target'],
                            mode='lines',
                            name='–¶–µ–ª–µ–≤–∞—è',
                            line=dict(color='#f85149', width=1, dash='dash'),
                            connectgaps=False
                        ))
                    
                    fig_temp.update_layout(
                        title="üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                        xaxis_title="–í—Ä–µ–º—è",
                        yaxis_title="¬∞C",
                        template="plotly_dark",
                        height=300
                    )
                    st.plotly_chart(fig_temp, use_container_width=True)
                
                with col_hum:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏
                    humidity_data = df[df['humidity'].notna()].copy()
                    if not humidity_data.empty:
                        fig_hum = go.Figure()
                        fig_hum.add_trace(go.Scatter(
                            x=humidity_data['timestamp'], 
                            y=humidity_data['humidity'],
                            mode='lines+markers',
                            name='–í–ª–∞–∂–Ω–æ—Å—Ç—å',
                            line=dict(color='#7c3aed', width=2),
                            connectgaps=False
                        ))
                        
                        fig_hum.update_layout(
                            title="üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å",
                            xaxis_title="–í—Ä–µ–º—è",
                            yaxis_title="%",
                            template="plotly_dark",
                            height=300
                        )
                        st.plotly_chart(fig_hum, use_container_width=True)
                    else:
                        st.info("üìä –ì—Ä–∞—Ñ–∏–∫ –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)")
                
                # –ì—Ä–∞—Ñ–∏–∫ CO2 –∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
                col_co2, col_vent = st.columns(2)
                
                with col_co2:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ CO2
                    co2_data = df[df['co2'].notna()].copy()
                    if not co2_data.empty:
                        fig_co2 = go.Figure()
                        fig_co2.add_trace(go.Scatter(
                            x=co2_data['timestamp'], 
                            y=co2_data['co2'],
                            mode='lines+markers',
                            name='CO‚ÇÇ',
                            line=dict(color='#f85149', width=2),
                            connectgaps=False
                        ))
                        
                        fig_co2.update_layout(
                            title="ü´Å –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO‚ÇÇ",
                            xaxis_title="–í—Ä–µ–º—è",
                            yaxis_title="ppm",
                            template="plotly_dark",
                            height=300
                        )
                        st.plotly_chart(fig_co2, use_container_width=True)
                    else:
                        st.info("üìä –ì—Ä–∞—Ñ–∏–∫ CO‚ÇÇ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)")
                
                with col_vent:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
                    vent_data = df[df['ventilation_level'].notna()].copy()
                    if not vent_data.empty:
                        fig_vent = go.Figure()
                        fig_vent.add_trace(go.Scatter(
                            x=vent_data['timestamp'], 
                            y=vent_data['ventilation_level'],
                            mode='lines+markers',
                            name='–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è',
                            line=dict(color='#56d364', width=2),
                            connectgaps=False
                        ))
                        
                        fig_vent.update_layout(
                            title="üåÄ –£—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏",
                            xaxis_title="–í—Ä–µ–º—è",
                            yaxis_title="%",
                            template="plotly_dark",
                            height=300
                        )
                        st.plotly_chart(fig_vent, use_container_width=True)
                    else:
                        st.info("üìä –ì—Ä–∞—Ñ–∏–∫ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥)")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not auto_refresh:
            break
            
        time.sleep(refresh_interval)

if __name__ == "__main__":
    main()