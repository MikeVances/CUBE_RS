#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ö–£–ë-1063
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –¥–≤—É—Ö —à–ª—é–∑–æ–≤
"""

import os
import sys
import time
import signal
import subprocess
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [START] %(message)s",
    handlers=[
        logging.FileHandler("start_services.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

BANNER = (
    "üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ö–£–ë-1063...\n" +
    "=" * 60
)

# –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –≤ –ø–æ—Ä—è–¥–∫–µ –∑–∞–ø—É—Å–∫–∞
SERVICES = [
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —à–ª—é–∑ (—á–∏—Ç–∞–µ—Ç RS485 –∏ –ø–∏—à–µ—Ç –≤ –ë–î)
    {
        "name": "Gateway 1 (Modbus TCP + DB)",
        "cmd": f"{sys.executable} -m modbus.gateway",
        "delay": 2  # –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞
    },
    # –ó–∞—Ç–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —à–ª—é–∑ (—á–∏—Ç–∞–µ—Ç –∏–∑ –ë–î –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Modbus TCP –Ω–∞ 5022)
    {
        "name": "Gateway 2 (Modbus TCP 5022)",
        "cmd": f"{sys.executable} -m modbus.gateway2",
        "delay": 1
    },
    # –î–∞—à–±–æ—Ä–¥
    {
        "name": "Dashboard (Streamlit)",
        "cmd": "streamlit run dashboard/app.py --server.port 8501",
        "delay": 1
    },
    # Telegram –±–æ—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
    {
        "name": "Telegram Bot",
        "cmd": f"{sys.executable} start_bot.py" ,
        "delay": 0.5,
        "optional": True  # –ù–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    }
]


def check_port_available(port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    import socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', port))
            return True
    except:
        return False


def wait_for_service(name, port, timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    import socket
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex(('localhost', port))
                if result == 0:
                    logging.info(f"‚úÖ {name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return True
        except:
            pass
        time.sleep(1)
    
    logging.warning(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ {timeout}—Å")
    return False


def main():
    print(BANNER)
    print(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {ROOT_DIR}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤
    ports_to_check = [5021, 5022, 8501]
    for port in ports_to_check:
        if not check_port_available(port):
            logging.error(f"‚ùå –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç!")
            return 1
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = os.environ.copy()
    env["PYTHONPATH"] = f".:{env.get('PYTHONPATH', '')}"
    env["PYTHONUNBUFFERED"] = "1"  # –î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
    
    processes = []
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        for service in SERVICES:
            name = service["name"]
            cmd = service["cmd"]
            delay = service.get("delay", 1)
            optional = service.get("optional", False)
            
            try:
                logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process = subprocess.Popen(
                    cmd, 
                    shell=True, 
                    env=env, 
                    cwd=ROOT_DIR,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    universal_newlines=True
                )
                
                processes.append({
                    "name": name,
                    "process": process,
                    "optional": optional
                })
                
                logging.info(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                if delay > 0:
                    time.sleep(delay)
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}"
                if optional:
                    logging.warning(f"‚ö†Ô∏è {error_msg} (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å)")
                else:
                    logging.error(error_msg)
                    if not optional:
                        raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        service_checks = [
            ("Gateway 1", 5021),
            ("Gateway 2", 5022),
            ("Dashboard", 8501)
        ]
        
        for name, port in service_checks:
            wait_for_service(name, port, timeout=15)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
        print("\n" + "=" * 60)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –∑–∞–ø—É—â–µ–Ω–∞!")
        print("=" * 60)
        print("üìä –î–∞—à–±–æ—Ä–¥:          http://localhost:8501")
        print("üîß Modbus TCP 1:       localhost:5021 (–æ—Å–Ω–æ–≤–Ω–æ–π)")
        print("üîß Modbus TCP 2:       localhost:5022 (–¥—É–±–ª–∏–∫–∞—Ç)")
        print("üì° –û–±–∞ –ø–æ—Ä—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –ö–£–ë-1063")
        print("ü§ñ Telegram Bot:     –∞–∫—Ç–∏–≤–µ–Ω (–µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω)")
        print("=" * 60)
        print("üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print("   gateway1.log  - –æ—Å–Ω–æ–≤–Ω–æ–π —à–ª—é–∑ (RS485‚Üí–ë–î‚ÜíModbus TCP 5021)")
        print("   gateway2.log  - –¥—É–±–ª–∏–∫–∞—Ç —à–ª—é–∑–∞ (–ë–î‚ÜíModbus TCP 5022)")
        print("   start_services.log - —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç")
        print("=" * 60)
        print("‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("=" * 60)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        while True:
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            for service in processes:
                proc = service["process"]
                if proc.poll() is not None:
                    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                    logging.error(f"‚ùå {service['name']} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–∫–æ–¥: {proc.returncode})")
                    if not service["optional"]:
                        raise Exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å {service['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
    
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        print("\nüîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –°–Ω–∞—á–∞–ª–∞ –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        for service in reversed(processes):
            name = service["name"]
            proc = service["process"]
            
            if proc.poll() is None:
                try:
                    logging.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                    
                    if "Streamlit" in name:
                        # Streamlit –ª—É—á—à–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ SIGINT
                        proc.send_signal(signal.SIGINT)
                    else:
                        proc.terminate()
                        
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        deadline = time.time() + 10
        for service in reversed(processes):
            name = service["name"]
            proc = service["process"]
            
            if proc.poll() is None:
                try:
                    remaining = max(0, deadline - time.time())
                    proc.wait(timeout=remaining)
                    logging.info(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except subprocess.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                    try:
                        proc.kill()
                        proc.wait(timeout=5)
                        logging.info(f"üíÄ {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except:
                        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {name}")
                except KeyboardInterrupt:
                    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π Ctrl+C - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –≤—Å–µ
                    logging.warning("‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π Ctrl+C - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                    try:
                        proc.kill()
                    except:
                        pass
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return 0


if __name__ == "__main__":
    sys.exit(main())