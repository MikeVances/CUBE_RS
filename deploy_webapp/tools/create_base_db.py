#!/usr/bin/env python3
"""
–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è CUBE_RS
–ó–∞–ø—É—Å–∫: python scripts/create_base_db.py
"""

import sys
import os
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def create_base_databases():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞"""
    
    print("üóÑÔ∏è –°–û–ó–î–ê–ù–ò–ï –û–°–ù–û–í–ù–´–• –ë–ê–ó –î–ê–ù–ù–´–• CUBE_RS")
    print("=" * 50)
    
    try:
        # 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        logger.info("üì¶ –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...")
        from modbus.modbus_storage import init_db as init_data_db
        from modbus.writer import CommandStorage
        
        # 2. –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ö–£–ë
        logger.info("üóÑÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ö–£–ë...")
        init_data_db()
        logger.info("‚úÖ –ë–∞–∑–∞ kub_data.db —Å–æ–∑–¥–∞–Ω–∞")
        
        # 3. –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥
        logger.info("üìù –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–º–∞–Ω–¥...")
        command_storage = CommandStorage("kub_commands.db")
        logger.info("‚úÖ –ë–∞–∑–∞ kub_commands.db —Å–æ–∑–¥–∞–Ω–∞")
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        db_files = ["kub_data.db", "kub_commands.db"]
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö:")
        
        for db_file in db_files:
            if Path(db_file).exists():
                size = Path(db_file).stat().st_size
                logger.info(f"   ‚úÖ {db_file} - {size} –±–∞–π—Ç")
            else:
                logger.error(f"   ‚ùå {db_file} - –Ω–µ —Å–æ–∑–¥–∞–Ω!")
                return False
        
        # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–∞–º
        logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π...")
        
        import sqlite3
        
        # –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        with sqlite3.connect("kub_data.db") as conn:
            cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            logger.info(f"   üìä kub_data.db: {len(tables)} —Ç–∞–±–ª–∏—Ü")
        
        # –¢–µ—Å—Ç –±–∞–∑—ã –∫–æ–º–∞–Ω–¥
        with sqlite3.connect("kub_commands.db") as conn:
            cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
            tables = cursor.fetchall()
            logger.info(f"   üìù kub_commands.db: {len(tables)} —Ç–∞–±–ª–∏—Ü")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
            logger.info("   üìã –¢–∞–±–ª–∏—Ü—ã –≤ kub_commands.db:")
            for table in tables:
                logger.info(f"      ‚Ä¢ {table[0]}")
        
        print("\nüéâ –í–°–ï –û–°–ù–û–í–ù–´–ï –ë–ê–ó–´ –î–ê–ù–ù–´–• –°–û–ó–î–ê–ù–´!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è Telegram Bot")
        return True
        
    except ImportError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
        logger.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ CUBE_RS")
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def show_project_structure():
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    logger.info("üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:")
    
    important_paths = [
        "modbus/",
        "modbus/unified_system.py",
        "modbus/writer.py", 
        "modbus/modbus_storage.py",
        "scripts/",
        "telegram_bot/",
        "kub_data.db",
        "kub_commands.db"
    ]
    
    for path in important_paths:
        if Path(path).exists():
            if Path(path).is_dir():
                logger.info(f"   üìÅ {path}")
            else:
                size = Path(path).stat().st_size
                logger.info(f"   üìÑ {path} ({size} –±–∞–π—Ç)")
        else:
            logger.info(f"   ‚ùå {path} - –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

if __name__ == "__main__":
    print("üèóÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã CUBE_RS")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    show_project_structure()
    
    # –°–æ–∑–¥–∞—ë–º –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    success = create_base_databases()
    
    if success:
        print("\n" + "=" * 50)
        print("‚úÖ –ì–û–¢–û–í–û! –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1Ô∏è‚É£ python scripts/init_telegram_db.py  # –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –±–æ—Ç–∞")
        print("2Ô∏è‚É£ –°–æ–∑–¥–∞–≤–∞—Ç—å Telegram Bot –≤ telegram_bot/")
    else:
        print("\n‚ùå –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")