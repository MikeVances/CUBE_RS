#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω—å–æ—Ä–Ω—ã–π –∞—É–¥–∏—Ç —Å–∏—Å—Ç–µ–º—ã –ö–£–ë-1063 –ø–µ—Ä–µ–¥ –ø—Ä–æ–¥–∞–∫—à–Ω
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É.
"""

import os
import sys
import json
import sqlite3
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any, Tuple

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

class ProductionAudit:
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞—É–¥–∏—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent.parent
        self.issues = {
            'critical': [],
            'high': [],
            'medium': [],
            'low': [],
            'info': []
        }
        self.checks_passed = 0
        self.checks_total = 0
    
    def log_issue(self, severity: str, title: str, description: str, file_path: str = None):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø—Ä–æ–±–ª–µ–º—ã"""
        issue = {
            'title': title,
            'description': description,
            'file': file_path,
            'timestamp': datetime.now().isoformat()
        }
        self.issues[severity].append(issue)
    
    def check_file_permissions(self) -> bool:
        """–ê—É–¥–∏—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º"""
        print("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–º —Ñ–∞–π–ª–∞–º...")
        
        critical_files = [
            'kub_data.db',
            'kub_commands.db',
            'config/bot_secrets.json',
            'config/secrets/master.key'
        ]
        
        permissions_ok = True
        for file_path in critical_files:
            full_path = self.project_root / file_path
            if full_path.exists():
                try:
                    stat_info = full_path.stat()
                    mode = stat_info.st_mode & 0o777
                    
                    if mode != 0o600:  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å rw-------
                        self.log_issue('critical', 
                            f'–ù–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {file_path}',
                            f'–§–∞–π–ª {file_path} –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ {oct(mode)}, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 600',
                            str(file_path))
                        permissions_ok = False
                    else:
                        print(f"   ‚úÖ {file_path}: {oct(mode)}")
                except Exception as e:
                    self.log_issue('high',
                        f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤: {file_path}',
                        f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ —Ñ–∞–π–ª–∞: {e}',
                        str(file_path))
                    permissions_ok = False
            else:
                print(f"   ‚ÑπÔ∏è  {file_path}: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        return permissions_ok
    
    def check_secrets_security(self) -> bool:
        """–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
        print("üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤...")
        
        try:
            from core.security_manager import get_security_manager
            from core.config_manager import get_config
            
            sm = get_security_manager()
            config = get_config()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è SecurityManager
            health = sm.health_check()
            
            issues_found = False
            
            if not health.get('encryption_available'):
                self.log_issue('critical',
                    '–®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ',
                    '–ú–æ–¥—É–ª—å cryptography –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
                issues_found = True
            
            if not health.get('master_key_exists'):
                self.log_issue('critical',
                    '–ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                    '–ù–µ –Ω–∞–π–¥–µ–Ω –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–æ–≤')
                issues_found = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram
            if not config.telegram.token:
                self.log_issue('critical',
                    '–¢–æ–∫–µ–Ω Telegram –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç',
                    '–ù–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –¥–ª—è Telegram –±–æ—Ç–∞')
                issues_found = True
            else:
                print("   ‚úÖ –¢–æ–∫–µ–Ω Telegram –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
                secrets_file = self.project_root / 'config' / 'secrets' / 'bot_secrets.enc'
                if secrets_file.exists():
                    print("   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ–∫—Ä–µ—Ç–æ–≤")
                else:
                    self.log_issue('medium',
                        '–°–µ–∫—Ä–µ—Ç—ã –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã',
                        '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ')
                    issues_found = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–æ–≤
            if not config.telegram.admin_users:
                self.log_issue('high',
                    '–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤',
                    '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã')
                issues_found = True
            
            print(f"   ‚úÖ –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ: {health.get('encryption_available')}")
            print(f"   ‚úÖ –ú–∞—Å—Ç–µ—Ä-–∫–ª—é—á: {health.get('master_key_exists')}")
            print(f"   ‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {health.get('file_permissions_secure')}")
            
            return not issues_found
            
        except ImportError:
            self.log_issue('critical',
                'SecurityManager –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏')
            return False
        except Exception as e:
            self.log_issue('high',
                '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤',
                f'–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}')
            return False
    
    def check_database_security(self) -> bool:
        """–ê—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
        print("üóÑÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
        
        databases = ['kub_data.db', 'kub_commands.db']
        db_ok = True
        
        for db_name in databases:
            db_path = self.project_root / db_name
            if db_path.exists():
                try:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –ë–î
                    with sqlite3.connect(db_path) as conn:
                        cursor = conn.execute("PRAGMA integrity_check")
                        result = cursor.fetchone()
                        if result[0] != 'ok':
                            self.log_issue('high',
                                f'–ù–∞—Ä—É—à–µ–Ω–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –ë–î: {db_name}',
                                f'PRAGMA integrity_check: {result[0]}')
                            db_ok = False
                        else:
                            print(f"   ‚úÖ {db_name}: —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å OK")
                        
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∂—É—Ä–Ω–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è
                        cursor = conn.execute("PRAGMA journal_mode")
                        journal_mode = cursor.fetchone()[0]
                        if journal_mode != 'wal':
                            self.log_issue('medium',
                                f'–ù–µ–æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∂—É—Ä–Ω–∞–ª–∞: {db_name}',
                                f'–†–µ–∂–∏–º {journal_mode}, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è WAL')
                        
                except Exception as e:
                    self.log_issue('high',
                        f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {db_name}',
                        f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}')
                    db_ok = False
            else:
                self.log_issue('medium',
                    f'–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {db_name}',
                    '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ')
        
        return db_ok
    
    def check_configuration_security(self) -> bool:
        """–ê—É–¥–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            from core.config_manager import get_config
            config = get_config()
            
            config_ok = True
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
            if config.system.environment == 'development':
                self.log_issue('high',
                    '–û–∫—Ä—É–∂–µ–Ω–∏–µ development',
                    '–°–∏—Å—Ç–µ–º–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –Ω–∞ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏, –Ω–µ –ø—Ä–æ–¥–∞–∫—à–Ω')
                config_ok = False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            if config.system.log_level == 'DEBUG':
                self.log_issue('medium',
                    '–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è DEBUG',
                    '–í –ø—Ä–æ–¥–∞–∫—à–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è INFO –∏–ª–∏ WARNING')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
            if config.modbus_tcp.port < 1024:
                self.log_issue('medium',
                    '–ü—Ä–∏–≤–∏–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç',
                    f'–ü–æ—Ä—Ç {config.modbus_tcp.port} —Ç—Ä–µ–±—É–µ—Ç root –ø—Ä–∞–≤')
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ RS485
            if not os.path.exists(config.rs485.port):
                self.log_issue('high',
                    'RS485 –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω',
                    f'–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {config.rs485.port} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                config_ok = False
            
            print(f"   ‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ: {config.system.environment}")
            print(f"   ‚úÖ –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤: {config.system.log_level}")
            print(f"   ‚úÖ Gateway –ø–æ—Ä—Ç: {config.modbus_tcp.port}")
            
            return config_ok
            
        except Exception as e:
            self.log_issue('critical',
                '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏',
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: {e}')
            return False
    
    def check_dependencies(self) -> bool:
        """–ê—É–¥–∏—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        print("üì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
        
        required_packages = {
            'pymodbus': '3.5.1',
            'pyserial': '3.5',
            'paho-mqtt': '1.6.1',
            'python-telegram-bot': '20.8',
            'cryptography': '41.0.7',
            'PyYAML': '6.0.1'
        }
        
        deps_ok = True
        
        for package, min_version in required_packages.items():
            try:
                # –û—Å–æ–±—ã–µ —Å–ª—É—á–∞–∏ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–∫–µ—Ç–æ–≤
                import_map = {
                    'python-telegram-bot': 'telegram',
                    'paho-mqtt': 'paho.mqtt.client',
                    'PyYAML': 'yaml',
                    'pyserial': 'serial'
                }
                
                pkg_name = import_map.get(package, package.replace("-", "_"))
                
                result = subprocess.run(
                    [sys.executable, '-c', f'import {pkg_name}; print(getattr({pkg_name}, "__version__", "unknown"))'],
                    capture_output=True, text=True, timeout=5
                )
                if result.returncode == 0:
                    version = result.stdout.strip()
                    print(f"   ‚úÖ {package}: {version}")
                else:
                    self.log_issue('critical',
                        f'–ü–∞–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {package}',
                        f'–¢—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {package}>={min_version}')
                    deps_ok = False
            except Exception as e:
                self.log_issue('high',
                    f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–∫–µ—Ç–∞: {package}',
                    f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å {package}: {e}')
                deps_ok = False
        
        return deps_ok
    
    def check_log_security(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–æ–≤"""
        print("üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ª–æ–≥–æ–≤...")
        
        log_files = [
            'config/logs/telegram.log',
            'config/logs/security.log',
            'config/logs/start_services.log'
        ]
        
        logs_secure = True
        
        for log_file in log_files:
            log_path = self.project_root / log_file
            if log_path.exists():
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —É—Ç–µ—á–∫—É —Ç–æ–∫–µ–Ω–æ–≤
                    with open(log_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                        
                        # –ò—â–µ–º –Ω–µ–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                        import re
                        token_patterns = [
                            r'bot\d+:[A-Za-z0-9_-]{35,}',  # –ù–µ–∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã
                            r'Bearer [A-Za-z0-9._-]{20,}',  # JWT —Ç–æ–∫–µ–Ω—ã
                            r'[A-Za-z0-9]{32,}'  # –î–ª–∏–Ω–Ω—ã–µ –∫–ª—é—á–∏
                        ]
                        
                        for pattern in token_patterns:
                            matches = re.findall(pattern, content)
                            if matches:
                                # –ò—Å–∫–ª—é—á–∞–µ–º –∑–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
                                real_leaks = [m for m in matches if '***' not in m]
                                if real_leaks:
                                    self.log_issue('critical',
                                        f'–£—Ç–µ—á–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –ª–æ–≥–∞—Ö: {log_file}',
                                        f'–ù–∞–π–¥–µ–Ω—ã –Ω–µ–∑–∞—â–∏—â–µ–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã: {len(real_leaks)} —à—Ç.')
                                    logs_secure = False
                        
                    print(f"   ‚úÖ {log_file}: –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å OK")
                    
                except Exception as e:
                    self.log_issue('medium',
                        f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∞: {log_file}',
                        f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥ —Ñ–∞–π–ª: {e}')
            else:
                print(f"   ‚ÑπÔ∏è  {log_file}: —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        return logs_secure
    
    def check_network_security(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            from core.config_manager import get_config
            config = get_config()
            
            network_ok = True
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ—Ä—Ç—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—Ç
            used_ports = set()
            
            if config.services.gateway_enabled:
                if config.modbus_tcp.port in used_ports:
                    self.log_issue('high',
                        '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤',
                        f'–ü–æ—Ä—Ç {config.modbus_tcp.port} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã')
                    network_ok = False
                used_ports.add(config.modbus_tcp.port)
            
            if config.services.dashboard_enabled:
                if config.services.dashboard_port in used_ports:
                    self.log_issue('high',
                        '–ö–æ–Ω—Ñ–ª–∏–∫—Ç –ø–æ—Ä—Ç–æ–≤',
                        f'–ü–æ—Ä—Ç {config.services.dashboard_port} –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã')
                    network_ok = False
                used_ports.add(config.services.dashboard_port)
            
            print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ—Ä—Ç—ã: {sorted(used_ports)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∏–Ω–¥–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –Ω–∞ localhost –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            # –≠—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ –∫–æ–¥–µ —Å–µ—Ä–≤–∏—Å–æ–≤
            
            return network_ok
            
        except Exception as e:
            self.log_issue('medium',
                '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–∏',
                f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}')
            return False
    
    def check_code_quality(self) -> bool:
        """–ë–∞–∑–æ–≤—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
        
        code_ok = True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        python_files = [
            'core/config_manager.py',
            'core/security_manager.py',
            'core/log_filter.py',
            'telegram_bot/bot_main.py',
            'modbus/gateway.py',
            'modbus/unified_system.py'
        ]
        
        for py_file in python_files:
            file_path = self.project_root / py_file
            if file_path.exists():
                try:
                    result = subprocess.run(
                        [sys.executable, '-m', 'py_compile', str(file_path)],
                        capture_output=True, text=True
                    )
                    if result.returncode != 0:
                        self.log_issue('high',
                            f'–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {py_file}',
                            f'–û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏: {result.stderr}')
                        code_ok = False
                    else:
                        print(f"   ‚úÖ {py_file}: —Å–∏–Ω—Ç–∞–∫—Å–∏—Å OK")
                except Exception as e:
                    self.log_issue('medium',
                        f'–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {py_file}',
                        f'–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª: {e}')
        
        return code_ok
    
    def run_full_audit(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞—É–¥–∏—Ç–∞"""
        print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –°–ò–ù–¨–û–†–ù–´–ô –ê–£–î–ò–¢ –ö–£–ë-1063 –ü–ï–†–ï–î –ü–†–û–î–ê–ö–®–ù")
        print("=" * 60)
        
        audit_start = datetime.now()
        
        # –°–ø–∏—Å–æ–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
        checks = [
            ("–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º", self.check_file_permissions),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Å–µ–∫—Ä–µ—Ç–æ–≤", self.check_secrets_security),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ë–î", self.check_database_security),
            ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", self.check_configuration_security),
            ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", self.check_dependencies),
            ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ª–æ–≥–æ–≤", self.check_log_security),
            ("–°–µ—Ç–µ–≤–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", self.check_network_security),
            ("–ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞", self.check_code_quality),
        ]
        
        results = {}
        
        for check_name, check_func in checks:
            print(f"\n{check_name}:")
            try:
                result = check_func()
                results[check_name] = result
                self.checks_total += 1
                if result:
                    self.checks_passed += 1
                    print(f"   üü¢ PASSED")
                else:
                    print(f"   üî¥ FAILED")
            except Exception as e:
                print(f"   ‚ùå ERROR: {e}")
                results[check_name] = False
                self.log_issue('critical', f'–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ: {check_name}', str(e))
        
        audit_duration = datetime.now() - audit_start
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞
        report = {
            'timestamp': audit_start.isoformat(),
            'duration_seconds': audit_duration.total_seconds(),
            'checks_passed': self.checks_passed,
            'checks_total': self.checks_total,
            'success_rate': (self.checks_passed / self.checks_total * 100) if self.checks_total > 0 else 0,
            'results': results,
            'issues': self.issues,
            'production_ready': self._is_production_ready()
        }
        
        return report
    
    def _is_production_ready(self) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É"""
        critical_issues = len(self.issues['critical'])
        high_issues = len(self.issues['high'])
        
        # –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞ –µ—Å–ª–∏ –µ—Å—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã
        if critical_issues > 0:
            return False
        
        # –°–∏—Å—Ç–µ–º–∞ –ù–ï –≥–æ—Ç–æ–≤–∞ –µ—Å–ª–∏ –º–Ω–æ–≥–æ –≤—ã—Å–æ–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        if high_issues > 2:
            return False
        
        # –ú–∏–Ω–∏–º—É–º 80% –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å
        if self.checks_passed / self.checks_total < 0.8:
            return False
        
        return True
    
    def print_report(self, report: Dict[str, Any]):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "=" * 60)
        print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ê–£–î–ò–¢–ê")
        print("=" * 60)
        
        print(f"üïí –í—Ä–µ–º—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è: {report['timestamp']}")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {report['duration_seconds']:.2f} —Å–µ–∫")
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {report['checks_passed']}/{report['checks_total']}")
        print(f"üìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {report['success_rate']:.1f}%")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º
        total_issues = sum(len(issues) for issues in self.issues.values())
        if total_issues > 0:
            print(f"\nüö® –ù–ê–ô–î–ï–ù–û –ü–†–û–ë–õ–ï–ú:")
            for severity, issues in self.issues.items():
                if issues:
                    print(f"   {severity.upper()}: {len(issues)}")
        
        # –î–µ—Ç–∞–ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö –ø—Ä–æ–±–ª–µ–º
        critical_and_high = self.issues['critical'] + self.issues['high']
        if critical_and_high:
            print(f"\n‚ö†Ô∏è  –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò –í–´–°–û–ö–ò–ï –ü–†–û–ë–õ–ï–ú–´:")
            for issue in critical_and_high:
                print(f"   ‚Ä¢ {issue['title']}")
                print(f"     {issue['description']}")
                if issue.get('file'):
                    print(f"     –§–∞–π–ª: {issue['file']}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        print(f"\nüéØ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ù:")
        if report['production_ready']:
            print("   üü¢ –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ù –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Æ")
        else:
            print("   üî¥ –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ù")
            print("   üìã –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
        
        print("=" * 60)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞—É–¥–∏—Ç–∞"""
    try:
        auditor = ProductionAudit()
        report = auditor.run_full_audit()
        auditor.print_report(report)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        report_file = auditor.project_root / 'audit_report.json'
        with open(report_file, 'w', encoding='utf-8') as f:
            json.dump(report, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
        return 0 if report['production_ready'] else 1
        
    except Exception as e:
        print(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–£–î–ò–¢–ê: {e}")
        return 2

if __name__ == "__main__":
    sys.exit(main())