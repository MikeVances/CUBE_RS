#!/usr/bin/env python3
"""
–§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ –ö–£–ë-1063
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫—Ä—ã–≤–∞–µ—Ç —Ç–æ–∫–µ–Ω—ã, –∫–ª—é—á–∏ –∏ –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.
"""

import re
import logging

class SecurityLogFilter(logging.Filter):
    """–§–∏–ª—å—Ç—Ä –ª–æ–≥–æ–≤ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç —É—Ç–µ—á–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
    SECRET_PATTERNS = [
        # Telegram bot tokens (—Ü–∏—Ñ—Ä—ã:–±—É–∫–≤—ã_—Ü–∏—Ñ—Ä—ã_–¥–µ—Ñ–∏—Å—ã)
        (r'bot(\d+):([A-Za-z0-9_-]{35,})', r'bot\1:***'),
        # API –∫–ª—é—á–∏ (–¥–ª–∏–Ω–Ω—ã–µ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ-—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –±–æ–ª–µ–µ 32 —Å–∏–º–≤–æ–ª–æ–≤)
        (r'\b[A-Za-z0-9_-]{35,}\b', r'***'),
        # –ü–∞—Ä–æ–ª–∏ –≤ URL
        (r'://([^:@\s]+):([^@\s]+)@', r'://\1:***@'),
        # JWT —Ç–æ–∫–µ–Ω—ã
        (r'Bearer\s+[A-Za-z0-9._-]{20,}', r'Bearer ***'),
        # –û–±—â–∏–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ JSON
        (r'("(?:token|key|secret|password|passwd)"\s*:\s*")([^"]{8,})(")', r'\1***\3'),
    ]
    
    def filter(self, record):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞"""
        if hasattr(record, 'msg') and record.msg:
            original_msg = str(record.msg)
            filtered_msg = self._filter_secrets(original_msg)
            
            if filtered_msg != original_msg:
                record.msg = filtered_msg
                # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
                if not hasattr(record, '_filtered'):
                    record._filtered = True
        
        # –¢–∞–∫–∂–µ —Ñ–∏–ª—å—Ç—Ä—É–µ–º args –µ—Å–ª–∏ –µ—Å—Ç—å
        if hasattr(record, 'args') and record.args:
            filtered_args = []
            for arg in record.args:
                if isinstance(arg, str):
                    filtered_args.append(self._filter_secrets(arg))
                else:
                    filtered_args.append(arg)
            record.args = tuple(filtered_args)
        
        return True
    
    def _filter_secrets(self, text: str) -> str:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫ —Ç–µ–∫—Å—Ç—É"""
        filtered_text = text
        
        for pattern, replacement in self.SECRET_PATTERNS:
            try:
                filtered_text = re.sub(pattern, replacement, filtered_text)
            except Exception:
                # –ï—Å–ª–∏ –ø–∞—Ç—Ç–µ—Ä–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                continue
        
        return filtered_text

def setup_secure_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—Å–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫–æ –≤—Å–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ª–æ–≥–≥–µ—Ä–∞–º
    security_filter = SecurityLogFilter()
    
    # –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ª–æ–≥–≥–µ—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–∫–µ–Ω—ã
    critical_loggers = [
        'httpx',
        'telegram',
        'telegram.ext',
        'telegram.request',
        'urllib3.connectionpool',
        'requests',
        'aiohttp'
    ]
    
    for logger_name in critical_loggers:
        logger = logging.getLogger(logger_name)
        logger.addFilter(security_filter)
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å WARNING —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å DEBUG/INFO —Å —Ç–æ–∫–µ–Ω–∞–º–∏
        logger.setLevel(logging.WARNING)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –∫ –∫–æ—Ä–Ω–µ–≤–æ–º—É –ª–æ–≥–≥–µ—Ä—É
    root_logger = logging.getLogger()
    root_logger.addFilter(security_filter)
    
    return security_filter

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Ñ–∏–ª—å—Ç—Ä–∞
    import logging
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    logging.basicConfig(level=logging.INFO, format='%(message)s')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä
    setup_secure_logging()
    
    logger = logging.getLogger('test')
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã —Å–µ–∫—Ä–µ—Ç–æ–≤
    test_cases = [
        "HTTP Request: POST https://api.telegram.org/bot8353463434:AAETfkpKjr1Y9PE7z1VKnpxFFPkTAtRKTQs/getMe",
        "Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ",
        '{"api_key": "sk-1234567890abcdef1234567890abcdef"}',
        "postgresql://user:secret_password@localhost:5432/db",
        "Normal log message without secrets"
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤:")
    filter_obj = SecurityLogFilter()
    
    for i, test_msg in enumerate(test_cases, 1):
        print(f"\n{i}. –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
        print(f"   {test_msg}")
        
        # –ü—Ä—è–º–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        filtered = filter_obj._filter_secrets(test_msg)
        print("   –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–µ:")
        print(f"   {filtered}")
        
        if filtered != test_msg:
            print("   ‚úÖ –°–µ–∫—Ä–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω –∏ —Å–∫—Ä—ã—Ç")
        else:
            print("   ‚ÑπÔ∏è  –°–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")