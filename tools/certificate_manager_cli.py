#!/usr/bin/env python3
"""
Certificate Manager CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ –¥–ª—è MITM –∑–∞—â–∏—Ç—ã
CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
"""

import argparse
import sys
import json
import os
from datetime import datetime, timedelta
from pathlib import Path
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ security –º–æ–¥—É–ª—è–º
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'security'))

from mutual_tls import CertificateAuthority, setup_device_mtls
from mitm_protection import CertificateManager, get_server_certificate_der
from cryptography import x509
from cryptography.hazmat.backends import default_backend
import socket

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def init_ca(args):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        print("üèõÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...")
        
        ca_config = {
            "ca_name": args.ca_name or "CUBE_RS_CA",
            "ca_country": args.country or "RU",
            "ca_state": args.state or "Moscow",
            "ca_locality": args.locality or "Moscow",
            "ca_organization": args.organization or "CUBE_RS",
            "ca_organizational_unit": args.organizational_unit or "Security",
            "ca_common_name": args.common_name or "CUBE_RS Root CA",
            "ca_validity_days": args.validity_days or 3650,
            "key_size": args.key_size or 2048,
            "ca_cert_path": args.ca_cert_path or "/etc/cube_gateway/certs/ca.crt",
            "ca_key_path": args.ca_key_path or "/etc/cube_gateway/certs/ca.key",
            "client_certs_dir": args.client_certs_dir or "/etc/cube_gateway/certs/clients/",
            "auto_generate_ca": True
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_path = args.config_path or "/etc/cube_gateway/ca_config.json"
        os.makedirs(os.path.dirname(config_path), exist_ok=True)
        
        with open(config_path, 'w', encoding='utf-8') as f:
            json.dump(ca_config, f, indent=2, ensure_ascii=False)
        
        # –°–æ–∑–¥–∞–µ–º CA
        ca = CertificateAuthority(config_path)
        
        print("‚úÖ –¶–µ–Ω—Ç—Ä —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        print(f"   CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {ca_config['ca_cert_path']}")
        print(f"   CA –∫–ª—é—á: {ca_config['ca_key_path']}")
        print(f"   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {config_path}")
        print(f"   –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {ca.ca_cert.not_valid_after}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ CA: {e}")
        return False

def create_client_cert(args):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    try:
        print(f"üìú –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {args.device_id}...")
        
        ca = CertificateAuthority(args.ca_config)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        dns_names = args.dns_names.split(',') if args.dns_names else []
        ip_addresses = args.ip_addresses.split(',') if args.ip_addresses else []
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        cert_pem, key_pem = ca.create_client_certificate(
            device_id=args.device_id,
            common_name=args.common_name,
            dns_names=dns_names,
            ip_addresses=ip_addresses,
            validity_days=args.validity_days
        )
        
        if args.save:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª—ã
            cert_path, key_path = ca.save_client_certificate(args.device_id, cert_pem, key_pem)
            print(f"‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω:")
            print(f"   –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {cert_path}")
            print(f"   –ö–ª—é—á: {key_path}")
        else:
            # –í—ã–≤–æ–¥–∏–º –Ω–∞ —ç–∫—Ä–∞–Ω
            print("‚úÖ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç:")
            print("--- CERTIFICATE ---")
            print(cert_pem.decode('utf-8'))
            print("--- PRIVATE KEY ---")
            print(key_pem.decode('utf-8'))
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False

def list_certificates(args):
    """–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    try:
        ca = CertificateAuthority(args.ca_config)
        clients_dir = ca.config['client_certs_dir']
        
        if not os.path.exists(clients_dir):
            print("üìÇ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        cert_files = list(Path(clients_dir).glob("*.crt"))
        
        if not cert_files:
            print("üìÇ –ö–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        print(f"üìú –ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ({len(cert_files)}):")
        print()
        
        for cert_file in sorted(cert_files):
            try:
                with open(cert_file, 'rb') as f:
                    cert = x509.load_pem_x509_certificate(f.read(), default_backend())
                
                device_id = cert_file.stem
                common_name = dict(x[0] for x in cert.subject)['commonName']
                expires = cert.not_valid_after
                days_left = (expires - datetime.now()).days
                
                status = "‚úÖ" if days_left > 30 else "‚ö†Ô∏è" if days_left > 0 else "‚ùå"
                
                print(f"{status} {device_id}")
                print(f"   CN: {common_name}")
                print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {expires.strftime('%Y-%m-%d %H:%M:%S')} ({days_left} –¥–Ω–µ–π)")
                print(f"   –§–∞–π–ª: {cert_file}")
                
                # SAN –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                try:
                    san_ext = cert.extensions.get_extension_for_oid(x509.oid.ExtensionOID.SUBJECT_ALTERNATIVE_NAME)
                    san_names = []
                    for name in san_ext.value:
                        if isinstance(name, x509.DNSName):
                            san_names.append(f"DNS:{name.value}")
                        elif isinstance(name, x509.IPAddress):
                            san_names.append(f"IP:{name.value}")
                    
                    if san_names:
                        print(f"   SAN: {', '.join(san_names)}")
                except:
                    pass
                
                print()
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {cert_file}: {e}")
                print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤: {e}")
        return False

def revoke_certificate(args):
    """–û—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    try:
        ca = CertificateAuthority(args.ca_config)
        clients_dir = ca.config['client_certs_dir']
        
        cert_path = os.path.join(clients_dir, f"{args.device_id}.crt")
        key_path = os.path.join(clients_dir, f"{args.device_id}.key")
        
        if not os.path.exists(cert_path):
            print(f"‚ùå –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è {args.device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return False
        
        # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –ø–∞–ø–∫—É –æ—Ç–æ–∑–≤–∞–Ω–Ω—ã—Ö
        revoked_dir = os.path.join(clients_dir, "revoked")
        os.makedirs(revoked_dir, exist_ok=True)
        
        revoked_cert_path = os.path.join(revoked_dir, f"{args.device_id}.crt")
        revoked_key_path = os.path.join(revoked_dir, f"{args.device_id}.key")
        
        os.rename(cert_path, revoked_cert_path)
        if os.path.exists(key_path):
            os.rename(key_path, revoked_key_path)
        
        print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {args.device_id} –æ—Ç–æ–∑–≤–∞–Ω:")
        print(f"   –ü–µ—Ä–µ–º–µ—â–µ–Ω –≤: {revoked_cert_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∑—ã–≤–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False

def pin_certificate(args):
    """–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç MITM"""
    try:
        print(f"üîí –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è {args.hostname}...")
        
        cert_manager = CertificateManager(args.pins_config)
        
        if args.cert_file:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
            with open(args.cert_file, 'rb') as f:
                cert_data = f.read()
                
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç (PEM –∏–ª–∏ DER)
            if cert_data.startswith(b'-----BEGIN CERTIFICATE-----'):
                cert = x509.load_pem_x509_certificate(cert_data, default_backend())
                cert_der = cert.public_bytes(x509.Encoding.DER)
            else:
                cert_der = cert_data
        else:
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å —Å–µ—Ä–≤–µ—Ä–∞
            port = args.port or 443
            print(f"   –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å {args.hostname}:{port}...")
            cert_der = get_server_certificate_der(args.hostname, port)
            
            if not cert_der:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å {args.hostname}:{port}")
                return False
        
        # –î–æ–±–∞–≤–ª—è–µ–º pin
        pin_type = args.pin_type or "pubkey-sha256"
        description = args.description or f"Certificate pin for {args.hostname}"
        
        cert_manager.add_certificate_pin(
            hostname=args.hostname,
            cert_der=cert_der,
            pin_type=pin_type,
            description=description
        )
        
        print(f"‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∑–∞–∫—Ä–µ–ø–ª–µ–Ω –¥–ª—è {args.hostname}")
        print(f"   –¢–∏–ø pin: {pin_type}")
        print(f"   –ö–æ–Ω—Ñ–∏–≥: {cert_manager.config_path}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False

def list_pins(args):
    """–°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤"""
    try:
        cert_manager = CertificateManager(args.pins_config)
        
        if not cert_manager.pins_cache:
            print("üîí –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return True
        
        print(f"üîí –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã ({len(cert_manager.pins_cache)}):")
        print()
        
        for hostname, pin_info in cert_manager.pins_cache.items():
            print(f"üåê {hostname}")
            print(f"   –¢–∏–ø pin: {pin_info.pin_type}")
            print(f"   Pin: {pin_info.pin_value[:40]}...")
            print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {pin_info.description}")
            print(f"   –°–æ–∑–¥–∞–Ω: {pin_info.created_at}")
            
            if pin_info.expires:
                expires_date = datetime.fromisoformat(pin_info.expires)
                days_left = (expires_date - datetime.now()).days
                print(f"   –ò—Å—Ç–µ–∫–∞–µ—Ç: {pin_info.expires} ({days_left} –¥–Ω–µ–π)")
            
            print()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ pins: {e}")
        return False

def verify_pin(args):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ certificate pin"""
    try:
        print(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ certificate pin –¥–ª—è {args.hostname}...")
        
        cert_manager = CertificateManager(args.pins_config)
        port = args.port or 443
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        cert_der = get_server_certificate_der(args.hostname, port)
        if not cert_der:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å {args.hostname}:{port}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º pin
        is_valid = cert_manager.verify_certificate_pin(args.hostname, cert_der)
        
        if is_valid:
            print(f"‚úÖ Certificate pin –¥–ª—è {args.hostname} –ü–û–î–¢–í–ï–†–ñ–î–ï–ù")
        else:
            print(f"‚ùå Certificate pin –¥–ª—è {args.hostname} –ù–ï –°–û–í–ü–ê–î–ê–ï–¢!")
            print("   –í–æ–∑–º–æ–∂–Ω–∞ MITM –∞—Ç–∞–∫–∞ –∏–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω")
        
        return is_valid
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ pin: {e}")
        return False

def ca_info(args):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω—Ç—Ä–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    try:
        ca = CertificateAuthority(args.ca_config)
        
        if not ca.ca_cert:
            print("‚ùå CA –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return False
        
        print("üèõÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω—Ç—Ä–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:")
        print()
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        subject_dict = dict(x[0] for x in ca.ca_cert.subject)
        print(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {subject_dict.get('commonName', 'N/A')}")
        print(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {subject_dict.get('organizationName', 'N/A')}")
        print(f"–°—Ç—Ä–∞–Ω–∞: {subject_dict.get('countryName', 'N/A')}")
        print(f"–°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä: {ca.ca_cert.serial_number}")
        print()
        
        # –°—Ä–æ–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è
        not_before = ca.ca_cert.not_valid_before
        not_after = ca.ca_cert.not_valid_after
        days_left = (not_after - datetime.now()).days
        
        print(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω —Å: {not_before.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: {not_after.strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}")
        
        if days_left < 30:
            print("‚ö†Ô∏è  CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–∫–æ—Ä–æ –∏—Å—Ç–µ—á–µ—Ç!")
        elif days_left < 0:
            print("‚ùå CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –∏—Å—Ç–µ–∫!")
        
        print()
        
        # –§–∞–π–ª—ã
        print(f"CA —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: {ca.config['ca_cert_path']}")
        print(f"CA –∫–ª—é—á: {ca.config['ca_key_path']}")
        print(f"–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {ca.config['client_certs_dir']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CA: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="Certificate Manager CLI - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏ CUBE_RS",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:

  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CA
  python certificate_manager_cli.py init-ca --ca-name "CUBE_RS_CA" --organization "My Company"

  # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
  python certificate_manager_cli.py create-client --device-id gateway-001 --save

  # –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
  python certificate_manager_cli.py list-certs

  # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
  python certificate_manager_cli.py pin-cert --hostname api.example.com

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ certificate pin
  python certificate_manager_cli.py verify-pin --hostname api.example.com

  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CA
  python certificate_manager_cli.py ca-info
        """
    )
    
    subparsers = parser.add_subparsers(dest='command', help='–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã')
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CA
    init_parser = subparsers.add_parser('init-ca', help='–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    init_parser.add_argument('--ca-name', help='–ù–∞–∑–≤–∞–Ω–∏–µ CA')
    init_parser.add_argument('--country', help='–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã (RU)')
    init_parser.add_argument('--state', help='–†–µ–≥–∏–æ–Ω/–æ–±–ª–∞—Å—Ç—å')
    init_parser.add_argument('--locality', help='–ì–æ—Ä–æ–¥')
    init_parser.add_argument('--organization', help='–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è')
    init_parser.add_argument('--organizational-unit', help='–ü–æ–¥—Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ')
    init_parser.add_argument('--common-name', help='Common Name CA')
    init_parser.add_argument('--validity-days', type=int, help='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è CA –≤ –¥–Ω—è—Ö (default: 3650)')
    init_parser.add_argument('--key-size', type=int, help='–†–∞–∑–º–µ—Ä –∫–ª—é—á–∞ (default: 2048)')
    init_parser.add_argument('--ca-cert-path', help='–ü—É—Ç—å –∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—É CA')
    init_parser.add_argument('--ca-key-path', help='–ü—É—Ç—å –∫ –∫–ª—é—á—É CA')
    init_parser.add_argument('--client-certs-dir', help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
    init_parser.add_argument('--config-path', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CA')
    init_parser.set_defaults(func=init_ca)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    client_parser = subparsers.add_parser('create-client', help='–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    client_parser.add_argument('--device-id', required=True, help='ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    client_parser.add_argument('--common-name', help='Common Name –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    client_parser.add_argument('--dns-names', help='DNS –∏–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    client_parser.add_argument('--ip-addresses', help='IP –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é')
    client_parser.add_argument('--validity-days', type=int, default=365, help='–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –≤ –¥–Ω—è—Ö')
    client_parser.add_argument('--save', action='store_true', help='–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ —Ñ–∞–π–ª—ã')
    client_parser.add_argument('--ca-config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CA')
    client_parser.set_defaults(func=create_client_cert)
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    list_parser = subparsers.add_parser('list-certs', help='–°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
    list_parser.add_argument('--ca-config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CA')
    list_parser.set_defaults(func=list_certificates)
    
    # –û—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    revoke_parser = subparsers.add_parser('revoke-cert', help='–û—Ç–∑—ã–≤ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    revoke_parser.add_argument('--device-id', required=True, help='ID —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
    revoke_parser.add_argument('--ca-config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CA')
    revoke_parser.set_defaults(func=revoke_certificate)
    
    # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    pin_parser = subparsers.add_parser('pin-cert', help='–ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –¥–ª—è MITM –∑–∞—â–∏—Ç—ã')
    pin_parser.add_argument('--hostname', required=True, help='–ò–º—è —Ö–æ—Å—Ç–∞')
    pin_parser.add_argument('--port', type=int, help='–ü–æ—Ä—Ç (default: 443)')
    pin_parser.add_argument('--cert-file', help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞')
    pin_parser.add_argument('--pin-type', default='pubkey-sha256', help='–¢–∏–ø pin (default: pubkey-sha256)')
    pin_parser.add_argument('--description', help='–û–ø–∏—Å–∞–Ω–∏–µ pin')
    pin_parser.add_argument('--pins-config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pins')
    pin_parser.set_defaults(func=pin_certificate)
    
    # –°–ø–∏—Å–æ–∫ pins
    pins_parser = subparsers.add_parser('list-pins', help='–°–ø–∏—Å–æ–∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤')
    pins_parser.add_argument('--pins-config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pins')
    pins_parser.set_defaults(func=list_pins)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ pin
    verify_parser = subparsers.add_parser('verify-pin', help='–ü—Ä–æ–≤–µ—Ä–∫–∞ certificate pin')
    verify_parser.add_argument('--hostname', required=True, help='–ò–º—è —Ö–æ—Å—Ç–∞')
    verify_parser.add_argument('--port', type=int, help='–ü–æ—Ä—Ç (default: 443)')
    verify_parser.add_argument('--pins-config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ pins')
    verify_parser.set_defaults(func=verify_pin)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CA
    info_parser = subparsers.add_parser('ca-info', help='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω—Ç—Ä–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏')
    info_parser.add_argument('--ca-config', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ CA')
    info_parser.set_defaults(func=ca_info)
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return False
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É
    try:
        return args.func(args)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        logger.exception("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ certificate_manager_cli")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)