import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import config

"""
MQTT Publisher for CUBE RS
–ü—É–±–ª–∏–∫—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ö–£–ë-1063 –≤ MQTT-–±—Ä–æ–∫–µ—Ä
"""

import json
import logging
import time

import paho.mqtt.client as mqtt

from modbus.modbus_storage import read_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler("mqtt.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—Ä–æ–∫–µ—Ä–∞ (–≤—ã–Ω–µ—Å–µ–Ω—ã –≤ config.py)
BROKER_HOST = config.BROKER_HOST
BROKER_PORT = config.BROKER_PORT
MQTT_TOPIC = config.MQTT_TOPIC
PUBLISH_INTERVAL_SEC = 10     # —á–∞—Å—Ç–æ—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏

def publish_loop():
    client = mqtt.Client()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    def on_connect(client, userdata, flags, rc):
        if rc == 0:
            logging.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ MQTT-–±—Ä–æ–∫–µ—Ä—É {config.BROKER_HOST}:{config.BROKER_PORT}")
        else:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: –∫–æ–¥ {rc}")
    
    def on_disconnect(client, userdata, rc):
        if rc != 0:
            logging.warning(f"‚ö†Ô∏è  –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç MQTT –±—Ä–æ–∫–µ—Ä–∞: –∫–æ–¥ {rc}")
        else:
            logging.info("üîå –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç MQTT –±—Ä–æ–∫–µ—Ä–∞")
    
    def on_publish(client, userdata, mid):
        logging.debug(f"üì§ –°–æ–æ–±—â–µ–Ω–∏–µ {mid} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    
    client.on_connect = on_connect
    client.on_disconnect = on_disconnect
    client.on_publish = on_publish

    try:
        if config.MQTT_USER and config.MQTT_PASS:
            client.username_pw_set(config.MQTT_USER, config.MQTT_PASS)
        
        logging.info(f"üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MQTT-–±—Ä–æ–∫–µ—Ä—É {config.BROKER_HOST}:{config.BROKER_PORT}...")
        client.connect(config.BROKER_HOST, config.BROKER_PORT, keepalive=60)
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MQTT: {e}")
        return

    client.loop_start()

    try:
        while True:
            try:
                data = read_data()
                if data:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                    if 'timestamp' in data and hasattr(data['timestamp'], 'isoformat'):
                        data['timestamp'] = data['timestamp'].isoformat()
                    
                    payload = json.dumps(data, ensure_ascii=False)
                    result = client.publish(config.MQTT_TOPIC, payload)
                    
                    if result.rc == mqtt.MQTT_ERR_SUCCESS:
                        logging.info(f"üì§ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ {config.MQTT_TOPIC}: {len(payload)} –±–∞–π—Ç")
                    else:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: –∫–æ–¥ {result.rc}")
                else:
                    logging.warning("‚ö†Ô∏è  –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
                    
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                
            time.sleep(PUBLISH_INTERVAL_SEC)
            
    except KeyboardInterrupt:
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ Ctrl+C")
    finally:
        client.loop_stop()
        client.disconnect()


if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä–∞ MQTT –≤—Ä—É—á–Ω—É—é...")
    publish_loop()