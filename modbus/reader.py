"""
Modbus RTU Reader for –ö–£–ë-1063
–ß–∏—Ç–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ RS485 –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö
"""

import serial
import time
import crcmod
import logging
from datetime import datetime
from typing import Dict, Optional, Any

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
PORT = "/dev/tty.usbserial-21230"  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –ø–æ—Ä—Ç
BAUDRATE = 9600
SLAVE_ID = 1
TIMEOUT = 2.0

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler("reader.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# CRC16 –¥–ª—è Modbus RTU
crc16 = crcmod.predefined.mkPredefinedCrcFun('modbus')

# –ö–∞—Ä—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –ö–£–ë-1063 (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
REGISTER_MAP = {
    "software_version": 0x0301,    # –í–µ—Ä—Å–∏—è –ü–û
    "temp_inside": 0x00D5,         # –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    "temp_target": 0x00D4,         # –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    "humidity": 0x0084,            # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
    "co2": 0x0085,                 # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2
    "nh3": 0x0086,                 # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3
    "pressure": 0x0083,            # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
    "ventilation_level": 0x00D1,   # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
    "ventilation_target": 0x00D0,  # –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
    "ventilation_scheme": 0x00D2,  # –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
    "day_counter": 0x00D3,         # –°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π
}

class KUB1063Reader:
    """–ö–ª–∞—Å—Å –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –ö–£–ë-1063"""

    # =========================
    # –ú–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∑–∞–ø–∏—Å–∏ (Writer API)
    # =========================

    def build_modbus_write_request(self, function_code: int, register: int, value: int) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ Modbus RTU –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–∏"""
        if function_code == 0x06:  # Write Single Register
            request = bytearray([
                self.slave_id,
                function_code,
                (register >> 8) & 0xFF,
                register & 0xFF,
                (value >> 8) & 0xFF,
                value & 0xFF
            ])
        elif function_code == 0x10:  # Write Multiple Registers (–Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
            raise NotImplementedError("Write Multiple Registers –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω")
        else:
            raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø–∏—Å–∏: {function_code}")

        crc = crc16(request)
        request.append(crc & 0xFF)
        request.append((crc >> 8) & 0xFF)
        return bytes(request)

    def write_register(self, register: int, value: int, function_code: int = 0x06) -> bool:
        """–ó–∞–ø–∏—Å—å –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ (FC=06 - Write Single Register)"""
        if not self.serial_connection or not self.serial_connection.is_open:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –¥–ª—è –∑–∞–ø–∏—Å–∏")
            return False

        try:
            request = self.build_modbus_write_request(function_code, register, value)
            self.serial_connection.flushInput()
            self.serial_connection.flushOutput()
            self.serial_connection.write(request)
            self.serial_connection.flush()
            time.sleep(0.2)

            if self.serial_connection.in_waiting > 0:
                response = self.serial_connection.read(self.serial_connection.in_waiting)
                if len(response) >= 8 and response[0] == self.slave_id and response[1] == function_code:
                    received_crc = (response[-1] << 8) | response[-2]
                    calculated_crc = crc16(response[:-2])
                    if received_crc == calculated_crc:
                        returned_register = (response[2] << 8) | response[3]
                        returned_value = (response[4] << 8) | response[5]
                        if returned_register == register and returned_value == value:
                            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:04X} = {value} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                            return True
                        else:
                            logger.warning(f"‚ö†Ô∏è –ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤ –æ—Ç–≤–µ—Ç–µ –∑–∞–ø–∏—Å–∏: –æ–∂–∏–¥–∞–ª–∏ {register:04X}={value}, –ø–æ–ª—É—á–∏–ª–∏ {returned_register:04X}={returned_value}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ CRC –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:04X}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:04X}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:04X}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register:04X}: {e}")
            return False

    def write_and_verify(self, register: int, value: int) -> bool:
        """–ó–∞–ø–∏—Å—å —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π - –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ —Å—Ä–∞–∑—É —á–∏—Ç–∞–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
        write_success = self.write_register(register, value)
        if not write_success:
            return False
        time.sleep(0.1)
        read_value = self.read_register(register)
        if read_value is None:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:04X} –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            return False
        if read_value == value:
            logger.info(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ —Ä–µ–≥–∏—Å—Ç—Ä 0x{register:04X} = {value} –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–∞")
            return True
        else:
            logger.error(f"‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≤–∞–ª–µ–Ω–∞: –∑–∞–ø–∏—Å–∞–ª–∏ {value}, –ø—Ä–æ—á–∏—Ç–∞–ª–∏ {read_value}")
            return False

    def get_writable_registers(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ –∂–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã —á—Ç–æ –∏ –≤ Writer
        from writer import KUB1063Writer
        return KUB1063Writer.WRITABLE_REGISTERS

    def validate_write_operation(self, register: int, value: int) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–ø–∏—Å–∏"""
        writable = self.get_writable_registers()
        if register not in writable:
            return False, f"–†–µ–≥–∏—Å—Ç—Ä 0x{register:04X} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∑–∞–ø–∏—Å–∏"
        reg_config = writable[register]
        if 'min_value' in reg_config and value < reg_config['min_value']:
            return False, f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ {reg_config['min_value']}"
        if 'max_value' in reg_config and value > reg_config['max_value']:
            return False, f"–ó–Ω–∞—á–µ–Ω–∏–µ {value} –±–æ–ª—å—à–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ {reg_config['max_value']}"
        return True, ""

# --- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Reader + Writer ---

    def test_reader_writer_integration():
        """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è Reader –∏ Writer"""
        print("üß™ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç Reader + Writer")
        print("=" * 60)
        reader = KUB1063Reader()
        from writer import KUB1063Writer
        writer = KUB1063Writer()
        writer.start()
        try:
            # 1. –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ Reader
            print("1. –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ Reader:")
            data = reader.read_all()
            if data:
                param_count = len([k for k, v in data.items() if v is not None and k not in ['timestamp', 'connection_status']])
                print(f"    ‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ {param_count} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
                temp = data.get('temp_inside')
                humidity = data.get('humidity')
                print(f"    üìä –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp if temp is not None else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}¬∞C")
                print(f"    üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity if humidity is not None else '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}%")
            else:
                print("    ‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç Reader")

            # 2. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Writer
            print("\n2. –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Writer:")
            success, result = writer.add_write_command(
                register=0x0020,  # –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π
                value=1,
                source_ip="127.0.0.1",
                user_info="integration_test"
            )
            print(f"    –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π: {'‚úÖ' if success else '‚ùå'} {result}")

            # 3. –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Reader
            print("\n3. –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Reader:")
            if reader.connect():
                valid, msg = reader.validate_write_operation(0x0020, 1)
                print(f"    –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã: {'‚úÖ' if valid else '‚ùå'} {msg}")
                if valid:
                    write_ok = reader.write_register(0x0020, 1)
                    print(f"    –ü—Ä—è–º–∞—è –∑–∞–ø–∏—Å—å: {'‚úÖ' if write_ok else '‚ùå'}")
                    verify_ok = reader.write_and_verify(0x0020, 0)  # –°–±—Ä–æ—Å –æ–±—Ä–∞—Ç–Ω–æ
                    print(f"    –ó–∞–ø–∏—Å—å —Å –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π: {'‚úÖ' if verify_ok else '‚ùå'}")
                reader.disconnect()
            else:
                print("    ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥–ª—è –ø—Ä—è–º–æ–π –∑–∞–ø–∏—Å–∏")

            # 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Writer
            print("\n4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Writer:")
            stats = writer.get_statistics()
            for key, value in stats.items():
                print(f"    {key}: {value}")

            time.sleep(3)

            # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            print("\n5. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            final_stats = writer.get_statistics()
            for key, value in final_stats.items():
                print(f"    {key}: {value}")
        finally:
            writer.stop()

    # =============================================================================
    # –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –ò–ó–ú–ï–ù–ï–ù–ò–ô –î–õ–Ø modbus/reader.py
    # =============================================================================

    """
    –ò–ó–ú–ï–ù–ï–ù–ò–Ø –î–õ–Ø –î–û–ë–ê–í–õ–ï–ù–ò–Ø –í modbus/reader.py:

    1. –î–æ–±–∞–≤–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ):
    # –£–∂–µ –µ—Å—Ç—å: serial, time, crcmod, logging, datetime, typing

    2. –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –≤ –∫–ª–∞—Å—Å KUB1063Reader:
    - build_modbus_write_request()
    - write_register()
    - write_and_verify()
    - get_writable_registers()
    - validate_write_operation()

    3. –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —Ñ–∞–π–ª–∞:
    "Modbus RTU Reader/Writer for –ö–£–ë-1063"
    "–ß–∏—Ç–∞–µ—Ç –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ RS485"

    4. –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞ —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é:
    test_reader_writer_integration()

    –û–ë–†–ê–¢–ù–ê–Ø –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨:
    - –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã —á—Ç–µ–Ω–∏—è –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    - –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
    - –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
    """
    
    def __init__(self, port: str = PORT, baudrate: int = BAUDRATE, slave_id: int = SLAVE_ID):
        self.port = port
        self.baudrate = baudrate
        self.slave_id = slave_id
        self.serial_connection = None
        
    def build_modbus_request(self, function_code: int, register: int, count: int = 1) -> bytes:
        """–°–æ–∑–¥–∞–Ω–∏–µ Modbus RTU –∑–∞–ø—Ä–æ—Å–∞"""
        request = bytearray([
            self.slave_id,
            function_code,
            (register >> 8) & 0xFF,
            register & 0xFF,
            (count >> 8) & 0xFF,
            count & 0xFF
        ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º CRC
        crc = crc16(request)
        request.append(crc & 0xFF)
        request.append((crc >> 8) & 0xFF)
        
        return bytes(request)
    
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        try:
            self.serial_connection = serial.Serial(
                port=self.port,
                baudrate=self.baudrate,
                bytesize=serial.EIGHTBITS,
                parity=serial.PARITY_NONE,  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: 8N1 –≤–º–µ—Å—Ç–æ 8E1
                stopbits=serial.STOPBITS_ONE,
                timeout=TIMEOUT,
                xonxoff=False,
                rtscts=False,
                dsrdtr=False
            )
            logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.port} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.port}: {e}")
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        if self.serial_connection and self.serial_connection.is_open:
            self.serial_connection.close()
            logger.info("üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
    
    def is_connected(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        return (self.serial_connection is not None and 
                self.serial_connection.is_open)
    
    def read_register(self, register: int, function_code: int = 0x04) -> Optional[int]:
        """–ß—Ç–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        if not self.serial_connection or not self.serial_connection.is_open:
            logger.error("‚ùå –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
            return None
        
        try:
            # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
            request = self.build_modbus_request(function_code, register, 1)
            
            # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä—ã
            self.serial_connection.flushInput()
            self.serial_connection.flushOutput()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.serial_connection.write(request)
            self.serial_connection.flush()
            
            # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞
            time.sleep(0.2)
            
            if self.serial_connection.in_waiting > 0:
                response = self.serial_connection.read(self.serial_connection.in_waiting)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
                if len(response) >= 5 and response[0] == self.slave_id and response[1] == function_code:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º CRC
                    received_crc = (response[-1] << 8) | response[-2]
                    calculated_crc = crc16(response[:-2])
                    
                    if received_crc == calculated_crc:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                        raw_value = (response[3] << 8) | response[4]
                        return raw_value
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ CRC –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register:04X}")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register:04X}")
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register:04X}")
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register:04X}: {e}")
            return None
    
    def parse_value(self, raw_value: int, register_name: str) -> Any:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        if raw_value is None:
            return None
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        if raw_value == 0xFFFF:
            return None  # –î–∞—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω
        elif raw_value == 0x7FFF:
            return None  # –ù–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
        elif raw_value == 0x7FFE:
            return None  # –û—à–∏–±–∫–∞ –¥–∞—Ç—á–∏–∫–∞
        elif raw_value >= 0xFFF0:  # –ö–æ–¥—ã –æ—à–∏–±–æ–∫ (0xFFFF - N)
            return None  # –î–∞—Ç—á–∏–∫ –æ—Ç–∫–ª—é—á–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –ø–æ —Ç–∏–ø—É —Ä–µ–≥–∏—Å—Ç—Ä–∞
        if register_name == "software_version":
            # –í–µ—Ä—Å–∏—è –ü–û: 401 -> "4.01"
            return f"{raw_value // 100}.{raw_value % 100:02d}"
        
        elif register_name in ["temp_inside", "temp_target"]:
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö ¬∞C (–∑–Ω–∞–∫–æ–≤–æ–µ —á–∏—Å–ª–æ)
            if raw_value >= 0x8000:
                temp = (raw_value - 0x10000) / 10.0
            else:
                temp = raw_value / 10.0
            return round(temp, 1)
        
        elif register_name in ["humidity", "pressure", "nh3"]:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö (—Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
            if raw_value >= 0x8000:
                value = (raw_value - 0x10000) / 10.0
            else:
                value = raw_value / 10.0
            return round(value, 1)
        
        elif register_name in ["ventilation_level", "ventilation_target"]:
            # –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è - –¥–µ–ª–∏–º –Ω–∞ 10 (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 191% -> 19.1%)
            return raw_value / 10.0
        
        elif register_name in ["co2", "day_counter"]:
            # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞
            return raw_value
        
        elif register_name == "ventilation_scheme":
            # 0 ‚Äî –±–∞–∑–æ–≤–∞—è, 1 ‚Äî —Ç—É–Ω–Ω–µ–ª—å–Ω–∞—è
            return "–±–∞–∑–æ–≤–∞—è" if raw_value == 0 else "—Ç—É–Ω–Ω–µ–ª—å–Ω–∞—è"
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return raw_value
    
    def read_all(self) -> Dict[str, Any]:
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
        if not self.connect():
            return {}
        
        data = {
            'timestamp': datetime.now(),
            'connection_status': 'connected'
        }
        
        success_count = 0
        total_count = len(REGISTER_MAP)
        
        try:
            for name, register in REGISTER_MAP.items():
                raw_value = self.read_register(register)
                parsed_value = self.parse_value(raw_value, name)
                data[name] = parsed_value
                
                if parsed_value is not None:
                    success_count += 1
                    logger.debug(f"‚úÖ {name}: {parsed_value}")
                else:
                    logger.debug(f"‚ùå {name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.1)
            
            data['success_rate'] = success_count / total_count
            logger.info(f"üìä –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {success_count}/{total_count} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            data['connection_status'] = 'error'
            data['error'] = str(e)
        
        finally:
            self.disconnect()
        
        return data
    
    def read_all_keep_connection(self) -> Dict[str, Any]:
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –ë–ï–ó –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (–¥–ª—è TimeWindowManager)"""
        if not self.is_connected():
            if not self.connect():
                return {}
        
        data = {
            'timestamp': datetime.now(),
            'connection_status': 'connected'
        }
        
        success_count = 0
        total_count = len(REGISTER_MAP)
        
        try:
            for name, register in REGISTER_MAP.items():
                raw_value = self.read_register(register)
                parsed_value = self.parse_value(raw_value, name)
                data[name] = parsed_value
                
                if parsed_value is not None:
                    success_count += 1
                    logger.debug(f"‚úÖ {name}: {parsed_value}")
                else:
                    logger.debug(f"‚ùå {name}: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
                time.sleep(0.05)  # –£–º–µ–Ω—å—à–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            
            data['success_rate'] = success_count / total_count
            logger.debug(f"üìä –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–æ {success_count}/{total_count} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            data['connection_status'] = 'error'
            data['error'] = str(e)
        
        # –ù–ï –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        
        return data
    
    def write_register(self, register: int, value: int) -> bool:
        """–ó–∞–ø–∏—Å—å –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–µ–≥–∏—Å—Ç—Ä (–¥–ª—è TimeWindowManager)"""
        if not self.is_connected():
            if not self.connect():
                return False
        
        try:
            # –°–æ–∑–¥–∞–Ω–∏–µ Modbus RTU –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–ø–∏—Å–∏ (FC=06)
            request = bytearray([
                self.slave_id,
                0x06,  # Function Code: Write Single Register
                (register >> 8) & 0xFF,
                register & 0xFF,
                (value >> 8) & 0xFF,
                value & 0xFF
            ])
            
            # –î–æ–±–∞–≤–ª—è–µ–º CRC
            crc = crc16(request)
            request.append(crc & 0xFF)
            request.append((crc >> 8) & 0xFF)
            
            # –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–æ–≤
            self.serial.flushInput()
            self.serial.flushOutput()
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            self.serial.write(request)
            self.serial.flush()
            
            # –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            time.sleep(0.2)
            
            if self.serial.in_waiting > 0:
                response = self.serial.read(self.serial.in_waiting)
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
                if len(response) >= 8 and response[0] == self.slave_id and response[1] == 0x06:
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ CRC
                    received_crc = (response[-1] << 8) | response[-2]
                    calculated_crc = crc16(response[:-2])
                    
                    if received_crc == calculated_crc:
                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∑–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
                        returned_register = (response[2] << 8) | response[3]
                        returned_value = (response[4] << 8) | response[5]
                        
                        if returned_register == register and returned_value == value:
                            logger.debug(f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–∞: 0x{register:04X}={value}")
                            return True
                        else:
                            logger.warning(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: —Ä–µ–≥–∏—Å—Ç—Ä=0x{returned_register:04X}, –∑–Ω–∞—á–µ–Ω–∏–µ={returned_value}")
                            return False
                    else:
                        logger.warning("‚ùå –û—à–∏–±–∫–∞ CRC –≤ –æ—Ç–≤–µ—Ç–µ –∑–∞–ø–∏—Å–∏")
                        return False
                else:
                    logger.warning("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø–∏—Å–∏")
                    return False
            else:
                logger.warning("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register:04X}: {e}")
            return False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —á–∏—Ç–∞—Ç–µ–ª—è
_reader = KUB1063Reader()

def read_all() -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥–∞—à–±–æ—Ä–¥–µ"""
    return _reader.read_all()

def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    reader = KUB1063Reader()
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ö–£–ë-1063")
    print("=" * 40)
    
    if reader.connect():
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        test_registers = {
            "–í–µ—Ä—Å–∏—è –ü–û": 0x0301,
            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞": 0x00D5,
            "–í–ª–∞–∂–Ω–æ—Å—Ç—å": 0x0084,
            "CO2": 0x0085
        }
        
        for name, register in test_registers.items():
            raw_value = reader.read_register(register)
            if raw_value is not None:
                print(f"‚úÖ {name}: 0x{raw_value:04X} ({raw_value})")
            else:
                print(f"‚ùå {name}: –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        
        reader.disconnect()
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ
    test_connection()
    
    print("\n" + "=" * 50)
    print("üìä –ü–æ–ª–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö:")
    print("=" * 50)
    
    result = read_all()
    for key, value in result.items():
        if key != 'timestamp':
            print(f"{key:20}: {value}")
    
    if result.get('success_rate'):
        print(f"\nüìà –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {result['success_rate']*100:.1f}%")