#!/usr/bin/env python3
"""
API Gateway –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ö–£–ë-1063 –≤–Ω–µ—à–Ω–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º
–†–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞—â–∏—â–µ–Ω–Ω—ã–π API
"""

import os
import sys
from flask import Flask, jsonify, request, abort
from flask_cors import CORS
import logging
import hashlib
import hmac
import time
from typing import Optional, Dict, Any
import json

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

try:
    from dashboard.dashboard_reader import read_all, get_historical_data, get_statistics, test_connection
    from core.config_manager import get_config
    from core.security_manager import SecurityManager
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(name)s] %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask
app = Flask(__name__)
CORS(app, origins=["*"])  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ–º–µ–Ω—ã

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    config = get_config()
    security_manager = SecurityManager()
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    config = None
    security_manager = None

class APIAuth:
    """–°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ API"""
    
    def __init__(self):
        self.api_keys = {}
        self.load_api_keys()
    
    def load_api_keys(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç API –∫–ª—é—á–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            if security_manager:
                # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å API –∫–ª—é—á–∏ –∏–∑ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
                api_config = security_manager.load_encrypted_config('api_keys')
                if api_config:
                    self.api_keys = api_config
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.api_keys)} API –∫–ª—é—á–µ–π")
                else:
                    # –°–æ–∑–¥–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –Ω–∞–±–æ—Ä –∫–ª—é—á–µ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
                    self.create_default_keys()
            else:
                self.create_default_keys()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ API –∫–ª—é—á–µ–π: {e}")
            self.create_default_keys()
    
    def create_default_keys(self):
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª—é—á–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"""
        import secrets
        
        default_key = "dev-api-key"
        default_secret = secrets.token_hex(32)
        
        self.api_keys = {
            default_key: {
                'secret': default_secret,
                'name': 'Development Key',
                'permissions': ['read'],
                'created': time.time()
            }
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–∏
        if security_manager:
            try:
                security_manager.save_encrypted_config('api_keys', self.api_keys)
                logger.info("‚úÖ API –∫–ª—é—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –≤–∏–¥–µ")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è API –∫–ª—é—á–µ–π: {e}")
        
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–ª—é—á–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏!")
        logger.info(f"üîë API Key: {default_key}")
        logger.info(f"üîê API Secret: {default_secret}")
    
    def verify_request(self, api_key: str, timestamp: str, signature: str, payload: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–ø–∏—Å—å API –∑–∞–ø—Ä–æ—Å–∞"""
        if api_key not in self.api_keys:
            logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π API –∫–ª—é—á: {api_key}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º timestamp (–Ω–µ —Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
        try:
            request_time = int(timestamp)
            current_time = int(time.time())
            if abs(current_time - request_time) > 300:  # 5 –º–∏–Ω—É—Ç
                logger.warning("–ó–∞–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π")
                return False
        except ValueError:
            logger.warning("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç timestamp")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—å
        secret = self.api_keys[api_key]['secret']
        expected_signature = self.generate_signature(payload, timestamp, secret)
        
        if not hmac.compare_digest(signature, expected_signature):
            logger.warning("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∑–∞–ø—Ä–æ—Å–∞")
            return False
        
        return True
    
    def generate_signature(self, payload: str, timestamp: str, secret: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HMAC –ø–æ–¥–ø–∏—Å—å"""
        message = f"{timestamp}{payload}"
        return hmac.new(
            secret.encode('utf-8'),
            message.encode('utf-8'),
            hashlib.sha256
        ).hexdigest()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
auth = APIAuth()

def require_auth(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    def decorated_function(*args, **kwargs):
        api_key = request.headers.get('X-API-Key')
        timestamp = request.headers.get('X-Timestamp')
        signature = request.headers.get('X-Signature')
        
        if not all([api_key, timestamp, signature]):
            logger.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            abort(401, description="–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –ü–æ–ª—É—á–∞–µ–º payload
        if request.method in ['POST', 'PUT', 'PATCH']:
            payload = request.get_data(as_text=True) or ''
        else:
            payload = ''
        
        if not auth.verify_request(api_key, timestamp, signature, payload):
            abort(403, description="–ù–µ–≤–µ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
        
        return f(*args, **kwargs)
    
    decorated_function.__name__ = f.__name__
    return decorated_function

@app.route('/api/health')
@require_auth
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è API"""
    db_status = test_connection()
    
    return jsonify({
        'status': 'healthy' if db_status else 'degraded',
        'service': 'kub-1063-api-gateway',
        'database': 'connected' if db_status else 'disconnected',
        'timestamp': time.time()
    })

@app.route('/api/data/current')
@require_auth
def get_current_data():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –ö–£–ë-1063"""
    try:
        data = read_all()
        
        if data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è JSON
            if 'timestamp' in data:
                data['timestamp'] = data['timestamp'].isoformat()
            
            return jsonify({
                'status': 'success',
                'data': data,
                'retrieved_at': time.time()
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'
            }), 404
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return jsonify({
            'status': 'error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.route('/api/data/history')
@require_auth
def get_history():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        hours = request.args.get('hours', 6, type=int)
        hours = min(max(hours, 1), 168)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 1-168 —á–∞—Å–æ–≤
        
        data = get_historical_data(hours)
        
        if data:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º datetime –æ–±—ä–µ–∫—Ç—ã –≤ ISO —Ñ–æ—Ä–º–∞—Ç
            formatted_data = []
            for record in data:
                formatted_record = {}
                for key, value in record.items():
                    if hasattr(value, 'isoformat'):  # datetime –æ–±—ä–µ–∫—Ç
                        formatted_record[key] = value.isoformat()
                    else:
                        formatted_record[key] = value
                formatted_data.append(formatted_record)
            
            return jsonify({
                'status': 'success',
                'data': formatted_data,
                'hours': hours,
                'count': len(formatted_data),
                'retrieved_at': time.time()
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ—Ç –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
            }), 404
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return jsonify({
            'status': 'error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.route('/api/data/statistics')
@require_auth
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        data = get_statistics()
        
        if data:
            return jsonify({
                'status': 'success',
                'data': data,
                'retrieved_at': time.time()
            })
        else:
            return jsonify({
                'status': 'error',
                'message': '–ù–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö'
            }), 404
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return jsonify({
            'status': 'error',
            'message': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
        }), 500

@app.route('/api/keys/info')
@require_auth
def get_api_info():
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± API –∫–ª—é—á–µ (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–∞)"""
    api_key = request.headers.get('X-API-Key')
    if api_key in auth.api_keys:
        key_info = auth.api_keys[api_key].copy()
        key_info.pop('secret', None)  # –£–¥–∞–ª—è–µ–º —Å–µ–∫—Ä–µ—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
        
        return jsonify({
            'status': 'success',
            'key_info': key_info
        })
    else:
        return jsonify({
            'status': 'error',
            'message': '–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω'
        }), 404

@app.errorhandler(401)
def unauthorized(error):
    return jsonify({'error': '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø', 'message': str(error.description)}), 401

@app.errorhandler(403)
def forbidden(error):
    return jsonify({'error': '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω', 'message': str(error.description)}), 403

@app.errorhandler(404)
def not_found(error):
    return jsonify({'error': '–ù–µ –Ω–∞–π–¥–µ–Ω–æ'}), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({'error': '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'}), 500

if __name__ == '__main__':
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ API Gateway –¥–ª—è –ö–£–ë-1063")
    logger.info(f"üîë –ó–∞–≥—Ä—É–∂–µ–Ω–æ API –∫–ª—é—á–µ–π: {len(auth.api_keys)}")
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = int(os.environ.get('API_PORT', 8000))
    app.run(host='0.0.0.0', port=port, debug=False)