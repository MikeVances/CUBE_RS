#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã CUBE_RS
–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
"""
import sys
import os
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

def test_basic_structure():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    print("üìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞...")
    
    required_files = [
        "requirements.txt",
        "README.md",
        "config/app_config.yaml"
    ]
    
    for file_path in required_files:
        full_path = project_root / file_path
        status = "‚úÖ" if full_path.exists() else "‚ùå"
        print(f"   {status} {file_path}")

def test_databases():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    import sqlite3
    
    db_files = [
        "kub_data.db",
        "kub_commands.db",
        "tunnel_broker.db"
    ]
    
    for db_file in db_files:
        db_path = project_root / db_file
        if db_path.exists():
            try:
                conn = sqlite3.connect(str(db_path))
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()
                conn.close()
                print(f"   ‚úÖ {db_file}: {len(tables)} —Ç–∞–±–ª–∏—Ü")
            except Exception as e:
                print(f"   ‚ö†Ô∏è {db_file}: –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ({e})")
        else:
            print(f"   ‚ùå {db_file}: –Ω–µ –Ω–∞–π–¥–µ–Ω")

def test_core_modules():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ core –º–æ–¥—É–ª–µ–π"""
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ core –º–æ–¥—É–ª–µ–π...")
    
    try:
        from core.config_manager import get_config
        print("   ‚úÖ config_manager")
        
        config = get_config()
        print("   ‚úÖ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
    except Exception as e:
        print(f"   ‚ùå config_manager: {e}")
    
    try:
        from core.security_manager import SecurityManager
        print("   ‚úÖ security_manager")
    except Exception as e:
        print(f"   ‚ö†Ô∏è security_manager: {e}")

def test_module_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π...")
    
    modules_to_test = [
        ("modbus.gateway", "gateway –º–æ–¥—É–ª—å"),
        ("modbus.unified_system", "unified_system –º–æ–¥—É–ª—å"),
        ("tunnel_system.tunnel_broker", "tunnel_broker –º–æ–¥—É–ª—å"),
        ("publish.websocket_server", "websocket_server –º–æ–¥—É–ª—å")
    ]
    
    for module_path, description in modules_to_test:
        try:
            __import__(module_path)
            print(f"   ‚úÖ {description}")
        except ImportError as e:
            print(f"   ‚ùå {description}: {e}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è {description}: {e}")

def test_services_status():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    print("\nüåê –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤...")
    
    import requests
    
    services = [
        ("http://localhost:8000", "Modbus Gateway"),
        ("http://localhost:5000", "Web Application"), 
        ("http://localhost:8765", "WebSocket Server")
    ]
    
    for url, service_name in services:
        try:
            response = requests.get(url, timeout=2)
            print(f"   ‚úÖ {service_name}: –¥–æ—Å—Ç—É–ø–µ–Ω")
        except requests.RequestException:
            print(f"   ‚ùå {service_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")

def fix_import_issues():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏"""
    print("\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏...")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º web_app/app.py
    webapp_path = project_root / "web_app" / "app.py"
    if webapp_path.exists():
        try:
            with open(webapp_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            if 'from tailscale_integration import' in content:
                content = content.replace(
                    'from tailscale_integration import',
                    'from .tailscale_integration import'
                )
                
                with open(webapp_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ web_app/app.py")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è web_app/app.py: {e}")
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º telegram_bot/bot_main.py
    bot_path = project_root / "telegram_bot" / "bot_main.py"
    if bot_path.exists():
        try:
            with open(bot_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç
            if 'from bot_database import' in content:
                content = content.replace(
                    'from bot_database import',
                    'from .bot_database import'
                )
                
                with open(bot_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                print("   ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç –≤ telegram_bot/bot_main.py")
        except Exception as e:
            print(f"   ‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è telegram_bot/bot_main.py: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("ü©∫ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ CUBE_RS")
    print("=" * 50)
    
    test_basic_structure()
    test_databases() 
    test_core_modules()
    test_module_imports()
    test_services_status()
    
    print("\nüîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
    print("=" * 30)
    fix_import_issues()
    
    print("\nüìä –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï")
    print("=" * 30)
    print("‚úÖ –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω—ã")
    print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–º–ø–æ—Ä—Ç–∞–º–∏ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
    print("‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–∏—Å—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã (–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã)")
    
    print("\nüöÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã: python tools/start_all_services.py")
    print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –≤ config/logs/")
    print("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ ARCHITECTURE_REFACTOR.md")

if __name__ == "__main__":
    main()