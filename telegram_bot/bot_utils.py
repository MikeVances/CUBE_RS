#!/usr/bin/env python3
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram Bot
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
–í–ö–õ–Æ–ß–ï–ù–´ –í–°–ï UX –£–õ–£–ß–®–ï–ù–ò–Ø!
"""

from datetime import datetime
from typing import Dict, Any
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
EMOJI = {
    'temperature': 'üå°Ô∏è',
    'humidity': 'üíß',
    'co2': 'ü´Å',
    'pressure': 'üåÄ',
    'alarm': 'üö®',
    'warning': '‚ö†Ô∏è',
    'ok': '‚úÖ',
    'error': '‚ùå',
    'info': '‚ÑπÔ∏è',
    'clock': 'üïê',
    'statistics': 'üìä',
    'system': '‚öôÔ∏è',
    'connection': 'üîó',
    'offline': 'üì¥',
    'home': 'üè†',
    'refresh': 'üîÑ'
}

def format_sensor_data(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    if not data:
        return f"{EMOJI['error']} **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–∏—Å—Ç–µ–º—ã**"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_status = data.get('connection_status', 'unknown')
    if connection_status != 'connected':
        return f"{EMOJI['offline']} **–°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–°—Ç–∞—Ç—É—Å: `{connection_status}`"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
    temp_inside = data.get('temp_inside')
    temp_target = data.get('temp_target')
    humidity = data.get('humidity')
    co2 = data.get('co2')
    pressure = data.get('pressure')
    nh3 = data.get('nh3')
    
    # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    timestamp = data.get('updated_at') or data.get('timestamp')
    if timestamp:
        try:
            if isinstance(timestamp, str):
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            else:
                dt = timestamp
            time_str = dt.strftime('%H:%M:%S')
            date_str = dt.strftime('%d.%m.%Y')
        except:
            time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üìä **–ü–û–ö–ê–ó–ê–ù–ò–Ø –ö–£–ë-1063**\n"
    text += f"{EMOJI['clock']} –û–±–Ω–æ–≤–ª–µ–Ω–æ: `{time_str}` ({date_str})\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    text += "**üå°Ô∏è –ö–õ–ò–ú–ê–¢:**\n"
    
    if temp_inside is not None:
        temp_status = _get_temperature_status(temp_inside, temp_target)
        text += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{temp_inside:.1f}¬∞C` {temp_status}\n"
    else:
        text += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö` {EMOJI['error']}\n"
    
    if temp_target is not None:
        text += f"‚Ä¢ –¶–µ–ª–µ–≤–∞—è T¬∞: `{temp_target:.1f}¬∞C`\n"
    
    if humidity is not None:
        humidity_status = _get_humidity_status(humidity)
        text += f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: `{humidity:.1f}%` {humidity_status}\n"
    else:
        text += f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: `–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö` {EMOJI['error']}\n"
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
    text += "\n**ü´Å –ö–ê–ß–ï–°–¢–í–û –í–û–ó–î–£–•–ê:**\n"
    
    if co2 is not None:
        co2_status = _get_co2_status(co2)
        text += f"‚Ä¢ CO‚ÇÇ: `{co2} ppm` {co2_status}\n"
    else:
        text += f"‚Ä¢ CO‚ÇÇ: `–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö` {EMOJI['error']}\n"
    
    if nh3 is not None:
        nh3_status = _get_nh3_status(nh3)
        text += f"‚Ä¢ NH‚ÇÉ: `{nh3:.1f} ppm` {nh3_status}\n"
    
    if pressure is not None:
        text += f"‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: `{pressure:.1f} –ü–∞`\n"
    
    # –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    text += "\n**‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:**\n"
    
    ventilation_level = data.get('ventilation_level')
    ventilation_target = data.get('ventilation_target')
    
    if ventilation_level is not None:
        text += f"‚Ä¢ –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è: `{ventilation_level:.1f}%`"
        if ventilation_target is not None:
            text += f" (—Ü–µ–ª—å: {ventilation_target:.1f}%)"
        text += "\n"
    
    # –ê–≤–∞—Ä–∏–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
    active_alarms = data.get('active_alarms', 0)
    active_warnings = data.get('active_warnings', 0)
    
    if active_alarms > 0:
        text += f"\nüö® **–ê–í–ê–†–ò–ò: {active_alarms}**\n"
    
    if active_warnings > 0:
        text += f"‚ö†Ô∏è **–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–Ø: {active_warnings}**\n"
    
    if active_alarms == 0 and active_warnings == 0:
        text += f"\n{EMOJI['ok']} **–°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º–µ**\n"
    
    return text

def _get_temperature_status(temp_inside: float, temp_target: float = None) -> str:
    """–°—Ç–∞—Ç—É—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã"""
    if temp_target:
        diff = abs(temp_inside - temp_target)
        if diff <= 1.0:
            return EMOJI['ok']
        elif diff <= 3.0:
            return EMOJI['warning']
        else:
            return EMOJI['error']
    else:
        # –û–±—â–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã –¥–ª—è –ø—Ç–∏—Ü–µ–≤–æ–¥—Å—Ç–≤–∞
        if 18 <= temp_inside <= 25:
            return EMOJI['ok']
        elif 15 <= temp_inside <= 30:
            return EMOJI['warning']
        else:
            return EMOJI['error']

def _get_humidity_status(humidity: float) -> str:
    """–°—Ç–∞—Ç—É—Å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏"""
    if 50 <= humidity <= 70:
        return EMOJI['ok']
    elif 40 <= humidity <= 80:
        return EMOJI['warning']
    else:
        return EMOJI['error']

def _get_co2_status(co2: int) -> str:
    """–°—Ç–∞—Ç—É—Å CO2"""
    if co2 <= 3000:
        return EMOJI['ok']
    elif co2 <= 5000:
        return EMOJI['warning']
    else:
        return EMOJI['error']

def _get_nh3_status(nh3: float) -> str:
    """–°—Ç–∞—Ç—É—Å NH3 (–∞–º–º–∏–∞–∫)"""
    if nh3 <= 10:
        return EMOJI['ok']
    elif nh3 <= 25:
        return EMOJI['warning']
    else:
        return EMOJI['error']

# ========================================================================
# UX –£–õ–£–ß–®–ï–ù–ò–Ø: –ú–ï–ù–Æ –ò –ö–ù–û–ü–ö–ò
# ========================================================================

def build_main_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """
    üéØ –û–°–ù–û–í–ù–û–ï –ú–ï–ù–Æ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    """
    buttons = [
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è", callback_data="show_status")],
        [InlineKeyboardButton(f"{EMOJI['refresh']} –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")],
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞
    if access_level in ("operator", "admin", "engineer"):
        buttons.append([InlineKeyboardButton("üö® –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π", callback_data="reset_alarms")])
    
    if access_level in ("admin", "engineer"):
        buttons.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")])
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏
    buttons.append([InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")])
    buttons.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")])
    
    return InlineKeyboardMarkup(buttons)

def build_confirmation_menu(confirm_action: str, cancel_action: str = "main_menu") -> InlineKeyboardMarkup:
    """
    üéØ –ú–ï–ù–Æ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=confirm_action)],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=cancel_action)],
        [InlineKeyboardButton(f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def build_back_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """
    üéØ –ú–ï–ù–Æ –° –ö–ù–û–ü–ö–û–ô –ù–ê–ó–ê–î –¥–ª—è –ª—é–±—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{EMOJI['refresh']} –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_status")],
        [InlineKeyboardButton(f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def build_stats_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """
    üéØ –ú–ï–ù–Æ –î–õ–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ò —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    """
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"{EMOJI['refresh']} –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", callback_data="refresh_stats")],
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è", callback_data="show_status")],
        [InlineKeyboardButton(f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

def build_settings_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """
    ‚öôÔ∏è –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö –°–ò–°–¢–ï–ú–´
    """
    buttons = []
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –∑–∞–ø–∏—Å–∏
    if access_level in ['operator', 'engineer', 'admin']:
        buttons.append([InlineKeyboardButton("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="manage_users")])
        buttons.append([InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è", callback_data="switch_level_menu")])
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
    if access_level in ['engineer', 'admin']:
        buttons.append([InlineKeyboardButton("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_config")])
        buttons.append([InlineKeyboardButton("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã", callback_data="system_logs")])
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if access_level == 'admin':
        buttons.append([InlineKeyboardButton("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏", callback_data="permissions_config")])
        buttons.append([InlineKeyboardButton("üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏", callback_data="backup_config")])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    buttons.append([InlineKeyboardButton(f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(buttons)

def build_user_management_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """
    üë• –ú–ï–ù–Æ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    """
    buttons = [
        [InlineKeyboardButton("üë§ –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="list_users")],
        [InlineKeyboardButton("‚ûï –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="invite_user")],
    ]
    
    if access_level in ['engineer', 'admin']:
        buttons.append([InlineKeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="block_user")])
        buttons.append([InlineKeyboardButton("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="unblock_user")])
    
    if access_level == 'admin':
        buttons.append([InlineKeyboardButton("üëë –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞", callback_data="change_permissions")])
    
    buttons.extend([
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="user_stats")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")],
        [InlineKeyboardButton(f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(buttons)

def build_switch_level_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """
    üîÑ –ú–ï–ù–Æ –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –£–†–û–í–ù–Ø –î–û–°–¢–£–ü–ê
    """
    buttons = []
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
    available_levels = {
        'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'operator': 'üë∑ –û–ø–µ—Ä–∞—Ç–æ—Ä', 
        'engineer': 'üîß –ò–Ω–∂–µ–Ω–µ—Ä',
        'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ —Ä–∞–∑–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
    for level, name in available_levels.items():
        if level != access_level:  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
            buttons.append([InlineKeyboardButton(name, callback_data=f"temp_level_{level}")])
    
    buttons.extend([
        [InlineKeyboardButton("üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π", callback_data="restore_level")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ", callback_data="level_info_menu")],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞–∑–∞–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")],
        [InlineKeyboardButton(f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    
    return InlineKeyboardMarkup(buttons)

def build_user_list_menu(users: list, action: str, access_level: str = "user") -> InlineKeyboardMarkup:
    """
    üë• –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –ú–ï–ù–Æ –°–ü–ò–°–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô –° –ö–ù–û–ü–ö–ê–ú–ò
    action: 'promote', 'block', 'unblock', 'view'
    """
    buttons = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–∞–∫—Å–∏–º—É–º 8 –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
    for user_data in users[:8]:
        username = user_data.get('username') or '–ë–µ–∑ username'
        first_name = user_data.get('first_name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'
        user_access_level = user_data.get('access_level', 'user')
        user_id = user_data.get('telegram_id')
        is_active = user_data.get('is_active', True)
        
        # –í—ã–±–∏—Ä–∞–µ–º emoji –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∏ —É—Ä–æ–≤–Ω—è
        status_emoji = "‚úÖ" if is_active else "‚ùå"
        level_emoji = {"user": "üë§", "operator": "üë∑", "engineer": "üîß", "admin": "üëë"}.get(user_access_level, "‚ùì")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        if action == 'block' and not is_active:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if action == 'unblock' and is_active:
            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            
        button_text = f"{status_emoji} {level_emoji} {first_name} (@{username})"
        callback_data = f"{action}_user_{user_id}"
        
        buttons.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ–ª—å—à–µ 8, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ"
    if len(users) > 8:
        buttons.append([InlineKeyboardButton(f"üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ ({len(users)-8})", callback_data=f"{action}_more_users")])
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons.append([InlineKeyboardButton("üë• –ù–∞–∑–∞–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_users")])
    buttons.append([InlineKeyboardButton("‚öôÔ∏è –ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º", callback_data="settings")])
    buttons.append([InlineKeyboardButton(f"{EMOJI['home']} –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(buttons)

def build_level_selection_menu(user_id: int, current_level: str) -> InlineKeyboardMarkup:
    """
    üîÑ –ú–ï–ù–Æ –í–´–ë–û–†–ê –ù–û–í–û–ì–û –£–†–û–í–ù–Ø –î–û–°–¢–£–ü–ê –î–õ–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
    """
    buttons = []
    
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
    levels = {
        'user': 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        'operator': 'üë∑ –û–ø–µ—Ä–∞—Ç–æ—Ä', 
        'engineer': 'üîß –ò–Ω–∂–µ–Ω–µ—Ä',
        'admin': 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–Ω—è, –∫—Ä–æ–º–µ —Ç–µ–∫—É—â–µ–≥–æ
    for level, name in levels.items():
        if level != current_level:
            buttons.append([InlineKeyboardButton(name, callback_data=f"set_level_{user_id}_{level}")])
    
    # –ö–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
    buttons.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="promote_users")])
    buttons.append([InlineKeyboardButton("üë• –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_users")])
    
    return InlineKeyboardMarkup(buttons)

def build_invitation_level_menu() -> InlineKeyboardMarkup:
    """
    üé´ –ú–ï–ù–Æ –í–´–ë–û–†–ê –£–†–û–í–ù–Ø –î–õ–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø
    """
    buttons = [
        [InlineKeyboardButton("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", callback_data="invite_level_user")],
        [InlineKeyboardButton("üë∑ –û–ø–µ—Ä–∞—Ç–æ—Ä", callback_data="invite_level_operator")],
        [InlineKeyboardButton("üîß –ò–Ω–∂–µ–Ω–µ—Ä", callback_data="invite_level_engineer")],
        [InlineKeyboardButton("üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", callback_data="invite_level_admin")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="manage_users")],
        [InlineKeyboardButton("üë• –ö —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é", callback_data="manage_users")]
    ]
    
    return InlineKeyboardMarkup(buttons)

def format_system_stats(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    if not stats:
        return f"{EMOJI['error']} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**"
    
    text = f"üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    success_count = stats.get('success_count', 0)
    error_count = stats.get('error_count', 0)
    success_rate = stats.get('success_rate', 0)
    
    text += f"**üìä –û–ë–ú–ï–ù –î–ê–ù–ù–´–ú–ò:**\n"
    text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö —á—Ç–µ–Ω–∏–π: `{success_count}`\n"
    text += f"‚Ä¢ –û—à–∏–±–æ–∫: `{error_count}`\n"
    text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: `{success_rate:.1f}%`\n\n"
    
    # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    last_success = stats.get('last_success')
    if last_success:
        try:
            dt = datetime.fromisoformat(last_success.replace('Z', '+00:00'))
            time_str = dt.strftime('%H:%M:%S %d.%m.%Y')
            text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ: `{time_str}`\n"
        except:
            text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ: `{last_success}`\n"
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    is_running = stats.get('is_running', False)
    status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
    text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: `{status}`\n"
    
    return text

# ========================================================================
# UX –£–õ–£–ß–®–ï–ù–ò–Ø: –≠–ú–£–õ–Ø–¶–ò–Ø –ü–ï–ß–ê–¢–ê–ù–ò–Ø –ò –î–ï–ô–°–¢–í–ò–Ø
# ========================================================================

async def send_typing_action(update, context):
    """
    üéØ UX: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç '–ø–µ—á–∞—Ç–∞–µ—Ç...' –ø–æ–∫–∞ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞
    –†–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π, –∏ –¥–ª—è callback'–æ–≤
    """
    try:
        chat_id = None
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º chat_id –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ update
        if hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        elif hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        elif hasattr(update, 'effective_chat'):
            chat_id = update.effective_chat.id
        
        if chat_id:
            await context.bot.send_chat_action(chat_id=chat_id, action="typing")
            
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ typing action - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        pass

async def send_upload_action(update, context):
    """
    üéØ UX: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç '–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª...' –¥–ª—è –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    """
    try:
        chat_id = None
        
        if hasattr(update, 'message') and update.message:
            chat_id = update.message.chat_id
        elif hasattr(update, 'callback_query') and update.callback_query:
            chat_id = update.callback_query.message.chat_id
        
        if chat_id:
            await context.bot.send_chat_action(chat_id=chat_id, action="upload_document")
            
    except Exception:
        pass

# ========================================================================
# UX –£–õ–£–ß–®–ï–ù–ò–Ø: –§–û–†–ú–ê–¢–ò–†–û–í–ê–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–ô
# ========================================================================

def error_message(text: str) -> str:
    """üéØ UX: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ"""
    return f"‚ùå **–û—à–∏–±–∫–∞**\n\n{text}"

def success_message(text: str) -> str:
    """üéØ UX: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ"""
    return f"‚úÖ **–£—Å–ø–µ—Ö**\n\n{text}"

def info_message(text: str) -> str:
    """üéØ UX: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    return f"‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è**\n\n{text}"

def warning_message(text: str) -> str:
    """üéØ UX: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è"""
    return f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ**\n\n{text}"

def loading_message(text: str) -> str:
    """üéØ UX: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ"""
    return f"‚è≥ **–û–±—Ä–∞–±–æ—Ç–∫–∞...**\n\n{text}"

# ========================================================================
# UX –£–õ–£–ß–®–ï–ù–ò–Ø: –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ========================================================================

def truncate_text(text: str, max_length: int = 4000) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è Telegram (–ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)"""
    if len(text) <= max_length:
        return text
    
    return text[:max_length-3] + "..."

def format_uptime(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã"""
    if seconds < 60:
        return f"{seconds}—Å"
    elif seconds < 3600:
        return f"{seconds//60}–º {seconds%60}—Å"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days}–¥ {hours}—á"

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø
# =============================================================================

def test_bot_utils():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π —É—Ç–∏–ª–∏—Ç"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ bot_utils (—Å UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏)")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_data = {
        'temp_inside': 23.5,
        'temp_target': 24.0,
        'humidity': 65.0,
        'co2': 2500,
        'nh3': 8.5,
        'pressure': 101.3,
        'ventilation_level': 45.5,
        'ventilation_target': 50.0,
        'active_alarms': 0,
        'active_warnings': 1,
        'connection_status': 'connected',
        'timestamp': datetime.now().isoformat()
    }
    
    # –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    print("1. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤...")
    formatted = format_sensor_data(test_data)
    print("   ‚úÖ –î–∞–Ω–Ω—ã–µ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
    print("2. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é...")
    menu = build_main_menu("admin")
    print(f"   ‚úÖ –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é: {len(menu.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
    
    # –¢–µ—Å—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    print("3. –¢–µ—Å—Ç –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...")
    confirm_menu = build_confirmation_menu("test_confirm", "test_cancel")
    print(f"   ‚úÖ –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {len(confirm_menu.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
    
    # –¢–µ—Å—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("4. –¢–µ—Å—Ç –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    stats_menu = build_stats_menu("operator")
    print(f"   ‚úÖ –ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {len(stats_menu.inline_keyboard)} —Ä—è–¥–æ–≤ –∫–Ω–æ–ø–æ–∫")
    
    # –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
    print("5. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    error_msg = error_message("–¢–µ—Å—Ç –æ—à–∏–±–∫–∏")
    success_msg = success_message("–¢–µ—Å—Ç —É—Å–ø–µ—Ö–∞")
    info_msg = info_message("–¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è: error={len(error_msg)}, success={len(success_msg)}, info={len(info_msg)} —Å–∏–º–≤–æ–ª–æ–≤")
    
    # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("6. –¢–µ—Å—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
    test_stats = {
        'success_count': 150,
        'error_count': 5,
        'success_rate': 96.8,
        'is_running': True,
        'last_success': datetime.now().isoformat()
    }
    stats_formatted = format_system_stats(test_stats)
    print("   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∞")
    
    print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Ç–∏–ª–∏—Ç —Å UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
    print("üéØ –í–∫–ª—é—á–µ–Ω–æ:")
    print("   ‚Ä¢ –≠–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è")
    print("   ‚Ä¢ –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é")
    print("   ‚Ä¢ –ú–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π")
    print("   ‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")

def build_invitation_level_menu() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("üë§ User", callback_data="invite_level_user")],
        [InlineKeyboardButton("‚öôÔ∏è Operator", callback_data="invite_level_operator")],
        [InlineKeyboardButton("üîß Engineer", callback_data="invite_level_engineer")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_users")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

def build_invitation_confirmation_menu(level: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –°–æ–∑–¥–∞—Ç—å —Å—Å—ã–ª–∫—É", callback_data=f"confirm_invite_{level}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="invite_user")],
    ]
    
    return InlineKeyboardMarkup(keyboard)

def build_invitation_share_menu(invite_link: str, access_level: str) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
    from urllib.parse import quote
    
    # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    share_text = f"üéâ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ö–£–ë-1063 Control Bot!\n\nüîó –ü–µ—Ä–µ–π–¥–∏ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n{invite_link}"
    encoded_text = quote(share_text)
    
    keyboard = [
        [InlineKeyboardButton("üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è", url=f"https://t.me/share/url?url={quote(invite_link)}&text={quote('üéâ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ö–£–ë-1063 Control Bot!')}")],
        [InlineKeyboardButton("üìã –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"copy_link_{invite_link}")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="manage_users")]
    ]
    
    return InlineKeyboardMarkup(keyboard)

if __name__ == "__main__":
    test_bot_utils()