"""
Gateway 2 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ FC=03 –∏ FC=04
–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ò –≤ Holding Registers (FC=03) –ò –≤ Input Registers (FC=04)
"""

import sys
import os
import time
import threading
import logging

sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pymodbus.server import StartTcpServer
from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from pymodbus.datastore import ModbusSequentialDataBlock

try:
    from modbus.modbus_storage import read_data
except ImportError:
    try:
        from .modbus_storage import read_data
    except ImportError:
        import modbus_storage
        read_data = modbus_storage.read_data

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [GATEWAY2] %(message)s",
    handlers=[
        logging.FileHandler("gateway2.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)

store_lock = threading.Lock()

# –ú–∞–ø–ø–∏–Ω–≥ –ø–æ–ª–µ–π –ë–î –Ω–∞ –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
DB_TO_REGISTER_MAP = {
    "software_version": 0x0301,
    "temp_inside": 0x00D5,
    "temp_target": 0x00D4,
    "humidity": 0x0084,
    "co2": 0x0085,
    "nh3": 0x0086,
    "pressure": 0x0083,
    "ventilation_level": 0x00D1,
    "ventilation_target": 0x00D0,
    "ventilation_scheme": 0x00D2,
    "day_counter": 0x00D3,
}

def create_modbus_datastore():
    """–°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫–∏ –¥–ª—è –û–ë–û–ò–• —Ç–∏–ø–æ–≤ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
    registers = [0] * 65536
    return ModbusSequentialDataBlock(0, registers)

def convert_value_to_register(value, field_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    if value is None:
        return 0
    
    try:
        if field_name == "software_version":
            if isinstance(value, str):
                parts = value.split('.')
                if len(parts) == 2:
                    return int(parts[0]) * 100 + int(parts[1])
            return 0
        
        elif field_name in ["temp_inside", "temp_target"]:
            temp = float(value) * 10
            if temp < 0:
                return int(65536 + temp)
            return int(temp)
        
        elif field_name in ["humidity", "pressure", "nh3"]:
            val = float(value) * 10
            if val < 0:
                return int(65536 + val)
            return int(val)
        
        elif field_name in ["ventilation_level", "ventilation_target"]:
            return int(float(value) * 10)
        
        elif field_name == "ventilation_scheme":
            if isinstance(value, str):
                return 1 if "—Ç—É–Ω–Ω–µ–ª—å–Ω–∞—è" in value.lower() else 0
            return int(value)
        
        else:
            return int(float(value))
            
    except (ValueError, TypeError):
        return 0

def update_register_in_both_stores(store, register_addr, value):
    """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ò –≤ Holding Registers (FC=03) –ò –≤ Input Registers (FC=04)"""
    try:
        with store_lock:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Holding Registers (FC=03)
            store.setValues(3, register_addr, [int(value)])
            
            # –¢–ê–ö–ñ–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Input Registers (FC=04) 
            store.setValues(4, register_addr, [int(value)])
            
        logging.debug(f"üì° –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –û–ë–ê —Ç–∏–ø–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 0x{register_addr:04X} = {int(value)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_addr:04X}: {e}")

def update_registers_from_database(store):
    """–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –û–ë–ê —Ç–∏–ø–∞ Modbus —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
    try:
        data = read_data()
        
        if not data:
            logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
            return 0
        
        updated_count = 0
        
        for field_name, register_addr in DB_TO_REGISTER_MAP.items():
            if field_name in data and data[field_name] is not None:
                register_value = convert_value_to_register(data[field_name], field_name)
                update_register_in_both_stores(store, register_addr, register_value)
                updated_count += 1
        
        if updated_count > 0:
            logging.info(f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ (FC=03 + FC=04)")
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
            temp = data.get('temp_inside')
            humidity = data.get('humidity') 
            co2 = data.get('co2')
            logging.info(f"üì° –î–∞–Ω–Ω—ã–µ: temp={temp}¬∞C, humidity={humidity}%, CO2={co2}ppm")
        
        return updated_count
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        return 0

def run_modbus_server(context):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Modbus TCP —Å–µ—Ä–≤–µ—Ä –Ω–∞ –ø–æ—Ä—Ç—É 5022"""
    try:
        logging.info("üß≤ –ó–∞–ø—É—Å–∫ Modbus TCP —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5022...")
        logging.info("üîß –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç FC=03 (Holding) –∏ FC=04 (Input) —Ä–µ–≥–∏—Å—Ç—Ä—ã")
        StartTcpServer(context=context, address=("0.0.0.0", 5022))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ TCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û Gateway 2 (FC=03 + FC=04)")

    try:
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –û–ë–û–ò–ú–ò —Ç–∏–ø–∞–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
        holding_registers = create_modbus_datastore()  # FC=03
        input_registers = create_modbus_datastore()    # FC=04
        
        store = ModbusSlaveContext(
            hr=holding_registers,  # Holding Registers (FC=03)
            ir=input_registers     # Input Registers (FC=04)  
        )
        
        context = ModbusServerContext(slaves=store, single=True)
        logging.info("‚úÖ Modbus –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω (FC=03 + FC=04)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        raise

    # –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: —á–∏—Ç–∞–µ–º –ë–î –∏ –æ–±–Ω–æ–≤–ª—è–µ–º datastore
    def update_loop():
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–ø–æ–¥–¥–µ—Ä–∂–∫–∞ FC=03 + FC=04)")
        
        while True:
            try:
                updated_count = update_registers_from_database(store)
                
                if updated_count == 0:
                    logging.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")

                time.sleep(3)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                time.sleep(3)

    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ TCP —Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=update_loop, daemon=True).start()
    run_modbus_server(context)

if __name__ == "__main__":
    main()