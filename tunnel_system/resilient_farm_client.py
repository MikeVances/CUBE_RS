#!/usr/bin/env python3
"""
Resilient Farm Client - —É–ª—É—á—à–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∫ —Å–µ—Ç–µ–≤—ã–º —Å–±–æ—è–º
"""

import os
import sys
import json
import time
import asyncio
import requests
import websocket
import threading
import secrets
import logging
import socket
from typing import Dict, Any, Optional, List
from datetime import datetime, timedelta
import psutil

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π —Å–∏—Å—Ç–µ–º—ã
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(name)s] %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ConnectionHealthMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–¥–æ—Ä–æ–≤—å—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
    
    def __init__(self, farm_client):
        self.farm_client = farm_client
        self.connection_metrics = {}
        self.is_monitoring = False
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.is_monitoring = True
        logger.info("üîç Connection Health Monitor –∑–∞–ø—É—â–µ–Ω")
        
        while self.is_monitoring:
            try:
                await self.check_broker_health()
                await self.check_webrtc_connections_health()
                await self.cleanup_stale_connections()
                
                await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ health monitor: {e}")
                await asyncio.sleep(30)
    
    async def check_broker_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–∏ —Å –±—Ä–æ–∫–µ—Ä–æ–º"""
        try:
            start_time = time.time()
            
            # –ü—Ä–æ—Å—Ç–æ–π ping –∫ –±—Ä–æ–∫–µ—Ä—É
            response = requests.get(
                f"{self.farm_client.broker_url}/health",
                timeout=10
            )
            
            latency = time.time() - start_time
            
            if response.status_code == 200:
                self.connection_metrics['broker'] = {
                    'status': 'healthy',
                    'latency': latency,
                    'last_check': time.time()
                }
            else:
                raise Exception(f"HTTP {response.status_code}")
                
        except Exception as e:
            logger.warning(f"Broker health check failed: {e}")
            self.connection_metrics['broker'] = {
                'status': 'unhealthy', 
                'error': str(e),
                'last_check': time.time()
            }
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É
            asyncio.create_task(self.farm_client.reconnect_to_broker())
    
    async def check_webrtc_connections_health(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        current_time = time.time()
        
        for request_id, conn_info in list(self.farm_client.active_connections.items()):
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                if current_time - conn_info['created_at'] > 3600:  # 1 —á–∞—Å
                    logger.info(f"–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {request_id}")
                    await self.farm_client.cleanup_connection(request_id)
                    continue
                
                # –ü–∏–Ω–≥—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–µ—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ)
                if hasattr(conn_info.get('webrtc'), 'ping'):
                    await conn_info['webrtc'].ping()
                    conn_info['last_activity'] = current_time
                    
            except Exception as e:
                logger.warning(f"WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ {request_id} –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ: {e}")
                await self.farm_client.cleanup_connection(request_id)
    
    async def cleanup_stale_connections(self):
        """–û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        current_time = time.time()
        stale_connections = []
        
        for request_id, conn_info in self.farm_client.active_connections.items():
            if current_time - conn_info.get('last_activity', 0) > 300:  # 5 –º–∏–Ω—É—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                stale_connections.append(request_id)
        
        for request_id in stale_connections:
            logger.info(f"–û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {request_id}")
            await self.farm_client.cleanup_connection(request_id)

class IPChangeDetector:
    """–î–µ—Ç–µ–∫—Ç–æ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è IP –∞–¥—Ä–µ—Å–∞"""
    
    def __init__(self, farm_client):
        self.farm_client = farm_client
        self.current_ip = None
        self.is_monitoring = False
        
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ IP"""
        self.is_monitoring = True
        self.current_ip = self.get_public_ip()
        logger.info(f"üìç IP Change Detector –∑–∞–ø—É—â–µ–Ω, —Ç–µ–∫—É—â–∏–π IP: {self.current_ip}")
        
        while self.is_monitoring:
            try:
                new_ip = self.get_public_ip()
                
                if new_ip != self.current_ip:
                    logger.warning(f"üîÑ IP –∞–¥—Ä–µ—Å –∏–∑–º–µ–Ω–∏–ª—Å—è: {self.current_ip} -> {new_ip}")
                    await self.handle_ip_change(self.current_ip, new_ip)
                    self.current_ip = new_ip
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ IP change detector: {e}")
                await asyncio.sleep(60)
    
    def get_public_ip(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–≥–æ IP"""
        try:
            # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ—Ä–≤–∏—Å–æ–≤
            services = [
                'https://ifconfig.me/ip',
                'https://icanhazip.com',
                'https://ipinfo.io/ip'
            ]
            
            for service in services:
                try:
                    response = requests.get(service, timeout=10)
                    if response.status_code == 200:
                        return response.text.strip()
                except:
                    continue
            
            # Fallback - –ª–æ–∫–∞–ª—å–Ω—ã–π IP
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
                s.connect(("8.8.8.8", 80))
                return s.getsockname()[0]
                
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å IP: {e}")
            return "unknown"
    
    async def handle_ip_change(self, old_ip: str, new_ip: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è IP"""
        logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã IP: {old_ip} -> {new_ip}")
        
        # –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –±—Ä–æ–∫–µ—Ä–µ
        await self.farm_client.send_immediate_heartbeat()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await self.notify_connections_about_ip_change(old_ip, new_ip)
        
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        self.farm_client.restart_websocket()
    
    async def notify_connections_about_ip_change(self, old_ip: str, new_ip: str):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –æ —Å–º–µ–Ω–µ IP"""
        for request_id, conn_info in list(self.farm_client.active_connections.items()):
            try:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebRTC
                if conn_info.get('webrtc'):
                    await conn_info['webrtc'].send_notification({
                        'type': 'ip_change',
                        'old_ip': old_ip,
                        'new_ip': new_ip,
                        'action': 'reconnect_required'
                    })
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è {request_id}: {e}")

class AutoReconnectManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    
    def __init__(self, farm_client):
        self.farm_client = farm_client
        self.reconnect_attempts = 0
        self.max_attempts = -1  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ
        self.base_delay = 5  # –ë–∞–∑–æ–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        self.max_delay = 300  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (5 –º–∏–Ω—É—Ç)
        self.is_reconnecting = False
        
    async def attempt_reconnection(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π"""
        if self.is_reconnecting:
            return
        
        self.is_reconnecting = True
        
        try:
            while True:
                self.reconnect_attempts += 1
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
                delay = min(self.base_delay * (2 ** min(self.reconnect_attempts - 1, 6)), self.max_delay)
                
                logger.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #{self.reconnect_attempts} —á–µ—Ä–µ–∑ {delay}—Å")
                
                await asyncio.sleep(delay)
                
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä—É
                if await self.farm_client.connect_to_broker():
                    logger.info(f"‚úÖ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞ {self.reconnect_attempts} –ø–æ–ø—ã—Ç–æ–∫")
                    self.reconnect_attempts = 0
                    break
                else:
                    logger.warning(f"‚ùå –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #{self.reconnect_attempts} –Ω–µ—É–¥–∞—á–Ω–∞")
                    
                    # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –º–∞–∫—Å–∏–º—É–º–∞ –ø–æ–ø—ã—Ç–æ–∫
                    if self.max_attempts > 0 and self.reconnect_attempts >= self.max_attempts:
                        logger.error("üõë –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        break
        
        finally:
            self.is_reconnecting = False
    
    def reset_attempts(self):
        """–°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏"""
        self.reconnect_attempts = 0

class ResilientFarmClient:
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π Farm Client —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é"""
    
    def __init__(self, broker_url: str, farm_config: Dict):
        self.broker_url = broker_url.rstrip('/')
        self.farm_id = farm_config.get('farm_id') or f"farm_{secrets.token_hex(8)}"
        self.owner_id = farm_config.get('owner_id', 'default_user')
        self.farm_name = farm_config.get('farm_name', f"–§–µ—Ä–º–∞ {self.farm_id}")
        self.api_port = farm_config.get('api_port', 8000)
        
        # WebSocket –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç –±—Ä–æ–∫–µ—Ä–∞
        self.ws_url = broker_url.replace('http', 'ws').replace('https', 'wss')
        self.ws_url = f"{self.ws_url}:8081"
        self.ws = None
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.active_connections = {}
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        self.health_monitor = ConnectionHealthMonitor(self)
        self.ip_detector = IPChangeDetector(self)  
        self.reconnect_manager = AutoReconnectManager(self)
        
        # –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞
        self.is_running = False
        self.heartbeat_interval = 60  # 1 –º–∏–Ω—É—Ç–∞ (–≤–º–µ—Å—Ç–æ 5)
        self.is_connected_to_broker = False
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_connections': 0,
            'active_connections': 0,
            'reconnect_count': 0,
            'ip_changes': 0,
            'uptime_start': time.time()
        }
    
    async def connect_to_broker(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É"""
        try:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–µ—Ä–º—É
            if await self.register_farm():
                self.is_connected_to_broker = True
                self.setup_websocket()
                self.reconnect_manager.reset_attempts()
                self.stats['reconnect_count'] += 1
                return True
            else:
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±—Ä–æ–∫–µ—Ä—É: {e}")
            return False
    
    async def reconnect_to_broker(self):
        """–ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É"""
        logger.info("üîÑ –ò–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±—Ä–æ–∫–µ—Ä—É...")
        self.is_connected_to_broker = False
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.ws:
            self.ws.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await self.reconnect_manager.attempt_reconnection()
    
    def get_local_ip(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ IP –∞–¥—Ä–µ—Å–∞"""
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_DGRAM) as s:
                s.connect(("8.8.8.8", 80))
                return s.getsockname()[0]
        except Exception:
            return "127.0.0.1"
    
    async def register_farm(self) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ñ–µ—Ä–º—ã –≤ Tunnel Broker"""
        try:
            registration_data = {
                'farm_id': self.farm_id,
                'owner_id': self.owner_id,
                'farm_name': self.farm_name,
                'local_ip': self.get_local_ip(),
                'port': self.api_port,
                'api_key': secrets.token_hex(16),
                'capabilities': ['kub1063', 'monitoring', 'resilient']  # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
            }
            
            response = requests.post(
                f"{self.broker_url}/api/farm/register",
                json=registration_data,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                if result.get('status') == 'success':
                    logger.info(f"‚úÖ –§–µ—Ä–º–∞ {self.farm_name} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞: {self.farm_id}")
                    return True
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {result.get('message')}")
            else:
                logger.error(f"HTTP –æ—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {response.status_code}")
                
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        
        return False
    
    async def send_heartbeat(self) -> Dict:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –≤ Tunnel Broker"""
        try:
            heartbeat_data = {
                'farm_id': self.farm_id,
                'timestamp': time.time(),
                'status': 'online',
                'local_ip': self.get_local_ip(),
                'stats': {
                    'active_connections': len(self.active_connections),
                    'uptime': time.time() - self.stats['uptime_start'],
                    'total_connections': self.stats['total_connections']
                }
            }
            
            response = requests.post(
                f"{self.broker_url}/api/farm/heartbeat",
                json=heartbeat_data,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                logger.debug(f"Heartbeat –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, pending requests: {result.get('pending_requests', 0)}")
                return result
            else:
                logger.warning(f"–û—à–∏–±–∫–∞ heartbeat: {response.status_code}")
                
                # –ü—Ä–∏ –æ—à–∏–±–∫–µ heartbeat –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                if response.status_code in [500, 502, 503, 504]:
                    asyncio.create_task(self.reconnect_to_broker())
                
        except requests.exceptions.RequestException as e:
            logger.error(f"–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ heartbeat: {e}")
            # –ü—Ä–∏ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–µ –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            asyncio.create_task(self.reconnect_to_broker())
        except Exception as e:
            logger.error(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ heartbeat: {e}")
        
        return {}
    
    async def send_immediate_heartbeat(self):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ heartbeat (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–º–µ–Ω–µ IP)"""
        logger.info("üì° –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ heartbeat...")
        result = await self.send_heartbeat()
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
        if result.get('requests'):
            for request in result['requests']:
                asyncio.create_task(self.handle_connection_request(request))
    
    def setup_websocket(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±—Ä–æ–∫–µ—Ä–æ–º"""
        def on_open(ws):
            logger.info("‚úÖ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±—Ä–æ–∫–µ—Ä–æ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ–µ—Ä–º—É –≤ WebSocket
            ws.send(json.dumps({
                'type': 'register',
                'farm_id': self.farm_id
            }))
        
        def on_message(ws, message):
            try:
                data = json.loads(message)
                logger.info(f"üì® WebSocket —Å–æ–æ–±—â–µ–Ω–∏–µ: {data.get('type')}")
                
                if data.get('type') == 'connection_request':
                    # –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                    asyncio.run_coroutine_threadsafe(
                        self.handle_connection_request(data),
                        asyncio.get_event_loop()
                    )
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        def on_error(ws, error):
            logger.error(f"WebSocket –æ—à–∏–±–∫–∞: {error}")
        
        def on_close(ws, close_status_code, close_msg):
            logger.warning(f"WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ: {close_status_code} {close_msg}")
            
            # –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –µ—Å–ª–∏ –º—ã –µ—â–µ –∞–∫—Ç–∏–≤–Ω—ã
            if self.is_running and self.is_connected_to_broker:
                logger.info("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WebSocket —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥...")
                time.sleep(30)
                if self.is_running:
                    self.setup_websocket()
        
        try:
            self.ws = websocket.WebSocketApp(
                self.ws_url,
                on_open=on_open,
                on_message=on_message,
                on_error=on_error,
                on_close=on_close
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            ws_thread = threading.Thread(
                target=self.ws.run_forever,
                daemon=True
            )
            ws_thread.start()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ WebSocket: {e}")
    
    def restart_websocket(self):
        """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        logger.info("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...")
        
        if self.ws:
            self.ws.close()
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        self.setup_websocket()
    
    async def handle_connection_request(self, request_data: Dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ"""
        request_id = request_data.get('request_id')
        user_id = request_data.get('user_id')
        
        logger.info(f"üîó –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç {user_id}: {request_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞
            response = requests.get(
                f"{self.broker_url}/api/connect/status/{request_id}",
                timeout=15
            )
            
            if response.status_code == 200:
                request_details = response.json()
                
                # –°–æ–∑–¥–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–∑–∞–≥–ª—É—à–∫–∞)
                webrtc_answer = await self.create_webrtc_answer(request_details)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º answer –æ–±—Ä–∞—Ç–Ω–æ –≤ –±—Ä–æ–∫–µ—Ä
                answer_response = requests.post(
                    f"{self.broker_url}/api/connect/answer",
                    json={
                        'request_id': request_id,
                        'webrtc_answer': webrtc_answer
                    },
                    timeout=15
                )
                
                if answer_response.status_code == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
                    self.active_connections[request_id] = {
                        'user_id': user_id,
                        'created_at': time.time(),
                        'last_activity': time.time(),
                        'status': 'connected',
                        'webrtc_answer': webrtc_answer
                    }
                    
                    self.stats['total_connections'] += 1
                    
                    logger.info(f"‚úÖ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å {user_id}")
                else:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ answer: {answer_response.status_code}")
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {e}")
    
    async def create_webrtc_answer(self, request_details: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ WebRTC answer (–∑–∞–≥–ª—É—à–∫–∞)"""
        # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç aiortc
        answer = {
            "type": "answer",
            "sdp": f"v=0\r\no=- {int(time.time())} 0 IN IP4 {self.get_local_ip()}\r\ns=-\r\n..."
        }
        
        logger.info("üîó WebRTC answer —Å–æ–∑–¥–∞–Ω")
        return answer
    
    async def cleanup_connection(self, request_id: str):
        """–û—á–∏—Å—Ç–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
        if request_id in self.active_connections:
            conn_info = self.active_connections.pop(request_id)
            logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ: {request_id} (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {conn_info['user_id']})")
    
    async def heartbeat_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª heartbeat"""
        while self.is_running:
            try:
                if self.is_connected_to_broker:
                    result = await self.send_heartbeat()
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –µ—Å–ª–∏ –µ—Å—Ç—å
                    if result.get('requests'):
                        for request in result['requests']:
                            asyncio.create_task(self.handle_connection_request(request))
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±—Ä–æ–∫–µ—Ä–æ–º, –ø—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                    asyncio.create_task(self.reconnect_to_broker())
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ heartbeat_loop: {e}")
            
            await asyncio.sleep(self.heartbeat_interval)
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ resilient farm client"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Resilient Farm Client –¥–ª—è {self.farm_name}")
        
        self.is_running = True
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É
        if not await self.connect_to_broker():
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±—Ä–æ–∫–µ—Ä—É, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏...")
            # –ù–µ –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É, –∞ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            asyncio.create_task(self.reconnect_to_broker())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        asyncio.create_task(self.health_monitor.start_monitoring())
        asyncio.create_task(self.ip_detector.start_monitoring())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º heartbeat loop
        await self.heartbeat_loop()
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Resilient Farm Client")
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        self.health_monitor.is_monitoring = False
        self.ip_detector.is_monitoring = False
        
        if self.ws:
            self.ws.close()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        for request_id, conn_info in list(self.active_connections.items()):
            asyncio.create_task(self.cleanup_connection(request_id))
        
        # –í—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        uptime = time.time() - self.stats['uptime_start']
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:")
        logger.info(f"   –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {uptime:.1f} —Å–µ–∫—É–Ω–¥")
        logger.info(f"   –í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: {self.stats['total_connections']}")
        logger.info(f"   –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: {self.stats['reconnect_count']}")
        logger.info(f"   –°–º–µ–Ω IP: {self.stats['ip_changes']}")

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (–∫–æ–ø–∏—è –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
def load_farm_config() -> Dict:
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–µ—Ä–º—ã"""
    config = {
        'farm_id': os.environ.get('FARM_ID'),
        'owner_id': os.environ.get('OWNER_ID', 'default_user'),
        'farm_name': os.environ.get('FARM_NAME', 'Resilient –§–µ—Ä–º–∞ –ö–£–ë-1063'),
        'api_port': int(os.environ.get('API_PORT', '8000'))
    }
    
    return config

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Resilient Farm Tunnel Client')
    parser.add_argument('--broker', required=True, help='URL Tunnel Broker —Å–µ—Ä–≤–µ—Ä–∞')
    parser.add_argument('--farm-id', help='ID —Ñ–µ—Ä–º—ã')
    parser.add_argument('--owner-id', help='ID –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Ñ–µ—Ä–º—ã')
    parser.add_argument('--farm-name', help='–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–µ—Ä–º—ã')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    config = load_farm_config()
    
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if args.farm_id:
        config['farm_id'] = args.farm_id
    if args.owner_id:
        config['owner_id'] = args.owner_id
    if args.farm_name:
        config['farm_name'] = args.farm_name
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º resilient client
    client = ResilientFarmClient(args.broker, config)
    
    try:
        await client.start()
    except KeyboardInterrupt:
        logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        client.stop()

if __name__ == '__main__':
    asyncio.run(main())