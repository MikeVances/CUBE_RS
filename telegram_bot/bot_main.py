#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ö–£–ë-1063
–í–ö–õ–Æ–ß–ï–ù–´ –í–°–ï UX –£–õ–£–ß–®–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø!
- –≠–º—É–ª—è—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è
- –ö–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é  
- –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
- –£–ª—É—á—à–µ–Ω–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è
"""

import os
import sys
import json
import logging
import asyncio
from typing import Dict, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# Telegram Bot imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from modbus.unified_system import UnifiedKUBSystem
from bot_database import TelegramBotDB
from bot_permissions import check_user_permission, check_command_rate_limit, get_user_access_level
from bot_utils import (
    format_sensor_data, format_system_stats, 
    build_main_menu, build_confirmation_menu, build_back_menu, build_stats_menu,
    send_typing_action, send_upload_action,
    error_message, success_message, info_message, warning_message, loading_message,
    truncate_text
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class KUBTelegramBot:
    """Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–£–ë-1063 —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º UX"""
    
    def __init__(self, token: str, config_file: str = "config/telegram_bot.json"):
        self.token = token
        self.config = self._load_config(config_file)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.kub_system = None
        self.bot_db = TelegramBotDB()
        
        # Telegram Application
        self.application = None
        
        logger.info("ü§ñ KUBTelegramBot —Å UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_file: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º defaults")
            return {
                "allowed_users": [],
                "admin_users": [],
                "default_access_level": "user",
                "command_timeout": 30,
                "max_message_length": 4000
            }
    
    async def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedKUBSystem"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedKUBSystem...")
            self.kub_system = UnifiedKUBSystem()
            self.kub_system.start()
            logger.info("‚úÖ UnifiedKUBSystem –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
    # =======================================================================
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        # üéØ UX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
        await send_typing_action(update, context)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.bot_db.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **–ö–£–ë-1063 Control Bot**.\n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: **{access_level}**.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
        )
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=menu, 
            parse_mode="Markdown"
        )
        
        self.bot_db.log_user_command(user.id, "start", None, True)
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_user_permission(user.id, "read", self.bot_db):
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"), 
                parse_mode="Markdown"
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥
        allowed, message = check_command_rate_limit(user.id, self.bot_db)
        if not allowed:
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await update.message.reply_text(
                error_message(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥\n{message}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return

        try:
            # üéØ UX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
            await send_typing_action(update, context)
            
            if not self.kub_system:
                access_level = self.bot_db.get_user_access_level(user.id)
                back_menu = build_back_menu(access_level)
                await update.message.reply_text(
                    error_message("–°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"),
                    reply_markup=back_menu,
                    parse_mode="Markdown"
                )
                return
            
            data = self.kub_system.get_current_data()
            if not data:
                access_level = self.bot_db.get_user_access_level(user.id)
                back_menu = build_back_menu(access_level)
                await update.message.reply_text(
                    error_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ö–£–ë-1063"),
                    reply_markup=back_menu,
                    parse_mode="Markdown"
                )
                return
            
            status_text = format_sensor_data(data)
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            # üéØ UX: –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            status_text = truncate_text(status_text, 4000)
            
            await update.message.reply_text(
                status_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
            
            self.bot_db.log_user_command(user.id, "read", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await update.message.reply_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            self.bot_db.log_user_command(user.id, "read", None, False)
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        user = update.effective_user

        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return

        try:
            # üéØ UX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
            await send_typing_action(update, context)
            
            if not self.kub_system:
                system_stats = {"error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}
            else:
                system_stats = self.kub_system.get_system_statistics()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.bot_db.get_user_stats(user.id)
            
            stats_text = format_system_stats(system_stats)
            
            if user_stats:
                stats_text += f"\n**üë§ –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: `{user_stats['total_commands']}`\n"
                stats_text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: `{user_stats['commands_today']}`\n"
                stats_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: `{user_stats['success_rate']:.1f}%`\n"
            
            # üéØ UX: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_stats_menu(access_level)
            
            # üéØ UX: –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            stats_text = truncate_text(stats_text, 4000)
            
            await update.message.reply_text(
                stats_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
            
            self.bot_db.log_user_command(user.id, "stats", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await update.message.reply_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            self.bot_db.log_user_command(user.id, "stats", None, False)
    
    async def cmd_reset_alarms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /reset - —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return

        # üéØ UX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        confirmation_menu = build_confirmation_menu("reset_alarms_confirmed", "main_menu")
        
        await update.message.reply_text(
            warning_message("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"),
            reply_markup=confirmation_menu,
            parse_mode="Markdown"
        )
    
    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        user = update.effective_user
        
        # üéØ UX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
        await send_typing_action(update, context)
        
        access_level = self.bot_db.get_user_access_level(user.id)
        
        help_text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ö–£–ë-1063 Control Bot**\n\n"
            "**üì± –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**\n"
            "‚Ä¢ `/start` ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/status` ‚Äî –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ `/stats` ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ `/help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "**üîò –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ:**\n"
            "‚Ä¢ üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è ‚Äî —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å ‚Äî —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        )
        
        if access_level in ("operator", "admin", "engineer"):
            help_text += "‚Ä¢ üö® –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π ‚Äî —Å–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤–∞—Ä–∏–π\n"
        
        if access_level in ("admin", "engineer"):
            help_text += "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n"
        
        help_text += f"\n**üîê –í–ê–® –£–†–û–í–ï–ù–¨ –î–û–°–¢–£–ü–ê:** `{access_level}`\n"
        
        permissions = self.bot_db.get_access_permissions(access_level)
        if permissions:
            help_text += f"‚Ä¢ –õ–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥: `{permissions.get('commands_per_hour', 5)}/—á–∞—Å`\n"
        
        help_text += "\nüí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏!"
        
        menu = build_main_menu(access_level)
        
        await update.message.reply_text(
            help_text,
            reply_markup=menu,
            parse_mode="Markdown"
        )
        
        self.bot_db.log_user_command(user.id, "help", None, True)
    
    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERY (INLINE –ö–ù–û–ü–ö–ò)
    # =======================================================================
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """üéØ UX: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π"""
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        
        data = query.data
        
        try:
            # üéØ UX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –¥–µ–π—Å—Ç–≤–∏–π
            await send_typing_action(query, context)
            
            if data == "show_status":
                await self._handle_show_status(query, context)
            elif data == "refresh_status":
                await self._handle_refresh_status(query, context)
            elif data == "show_stats":
                await self._handle_show_stats(query, context)
            elif data == "refresh_stats":
                await self._handle_refresh_stats(query, context)
            elif data == "reset_alarms":
                await self._handle_reset_alarms(query, context)
            elif data == "reset_alarms_confirmed":
                await self._handle_confirm_reset_alarms(query, context)
            elif data == "main_menu":
                await self._handle_main_menu(query, context)
            elif data == "show_help":
                await self._handle_show_help(query, context)
            elif data == "settings":
                await self._handle_settings(query, context)
            else:
                await query.edit_message_text(
                    error_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"), 
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            access_level = self.bot_db.get_user_access_level(query.from_user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_main_menu(self, query, context):
        """üéØ UX: –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu,
            parse_mode="Markdown"
        )

    async def _handle_show_status(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        await self._handle_refresh_status(query, context)

    async def _handle_refresh_status(self, query, context):
        """üéØ UX: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π"""
        user = query.from_user
        
        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            if not self.kub_system:
                access_level = self.bot_db.get_user_access_level(user.id)
                back_menu = build_back_menu(access_level)
                await query.edit_message_text(
                    error_message("–°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"),
                    reply_markup=back_menu,
                    parse_mode="Markdown"
                )
                return
            
            data = self.kub_system.get_current_data()
            status_text = format_sensor_data(data) if data else error_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            # üéØ UX: –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            status_text = truncate_text(status_text, 4000)
            
            await query.edit_message_text(
                status_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
            self.bot_db.log_user_command(user.id, "read", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_show_stats(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await self._handle_refresh_stats(query, context)

    async def _handle_refresh_stats(self, query, context):
        """üéØ UX: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –º–µ–Ω—é"""
        user = query.from_user
        
        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            if not self.kub_system:
                system_stats = {"error": "–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}
            else:
                system_stats = self.kub_system.get_system_statistics()
            
            user_stats = self.bot_db.get_user_stats(user.id)
            
            stats_text = format_system_stats(system_stats)
            
            if user_stats:
                stats_text += f"\n**üë§ –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: `{user_stats['total_commands']}`\n"
                stats_text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: `{user_stats['commands_today']}`\n"
                stats_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: `{user_stats['success_rate']:.1f}%`\n"
            
            # üéØ UX: –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_stats_menu(access_level)
            
            # üéØ UX: –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
            stats_text = truncate_text(stats_text, 4000)
            
            await query.edit_message_text(
                stats_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
            self.bot_db.log_user_command(user.id, "stats", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_reset_alarms(self, query, context):
        """üéØ UX: –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        user = query.from_user
        
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        # üéØ UX: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirmation_menu = build_confirmation_menu("reset_alarms_confirmed", "main_menu")
        
        await query.edit_message_text(
            warning_message("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"),
            reply_markup=confirmation_menu,
            parse_mode="Markdown"
        )

    async def _handle_confirm_reset_alarms(self, query, context):
        """üéØ UX: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
        user = query.from_user
        
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            if not self.kub_system:
                access_level = self.bot_db.get_user_access_level(user.id)
                back_menu = build_back_menu(access_level)
                await query.edit_message_text(
                    error_message("–°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"),
                    reply_markup=back_menu,
                    parse_mode="Markdown"
                )
                return
            
            # üéØ UX: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            await query.edit_message_text(
                loading_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π..."),
                parse_mode="Markdown"
            )
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É
            result = self.kub_system.reset_alarms()
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            if result:
                await query.edit_message_text(
                    success_message("üîÑ –í—Å–µ –∞–≤–∞—Ä–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!"),
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                self.bot_db.log_user_command(user.id, "reset_alarms", "0x0020", True)
            else:
                await query.edit_message_text(
                    error_message("–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                self.bot_db.log_user_command(user.id, "reset_alarms", "0x0020", False)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞: {str(e)}\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            self.bot_db.log_user_command(user.id, "reset_alarms", "0x0020", False)

    async def _handle_show_help(self, query, context):
        """üéØ UX: –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ callback"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        help_text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ö–£–ë-1063 Control Bot**\n\n"
            "**üîò –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ:**\n"
            "‚Ä¢ üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è ‚Äî —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        )
        
        if access_level in ("operator", "admin", "engineer"):
            help_text += "‚Ä¢ üö® –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π ‚Äî —Å–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤–∞—Ä–∏–π\n"
        
        if access_level in ("admin", "engineer"):
            help_text += "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n"
        
        help_text += f"\n**üîê –í–ê–® –î–û–°–¢–£–ü:** `{access_level}`\n"
        help_text += "\nüí° **–°–æ–≤–µ—Ç:** –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–µ–µ –∫–æ–º–∞–Ω–¥!"
        
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            help_text,
            reply_markup=menu,
            parse_mode="Markdown"
        )

    async def _handle_settings(self, query, context):
        """üéØ UX: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤) —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é"""
        user = query.from_user
        
        if not check_user_permission(user.id, "write", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            info_message("‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n–§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n–í –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"),
            reply_markup=menu,
            parse_mode="Markdown"
        )
    
    # =======================================================================
    # –ó–ê–ü–£–°–ö –ò –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê
    # =======================================================================

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram Bot"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            if not await self.initialize_system():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
                return False

            # –°–æ–∑–¥–∞—ë–º Telegram Application
            self.application = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.cmd_start))
            self.application.add_handler(CommandHandler("status", self.cmd_status))
            self.application.add_handler(CommandHandler("stats", self.cmd_stats))
            self.application.add_handler(CommandHandler("reset", self.cmd_reset_alarms))
            self.application.add_handler(CommandHandler("help", self.cmd_help))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))

            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot —Å UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.application.updater.start_polling(drop_pending_updates=True)

            # –ñ–¥—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.application.updater.idle()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Bot...")

            if self.application:
                if hasattr(self.application, 'updater') and self.application.updater.running:
                    await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()

            if self.kub_system:
                self.kub_system.stop()

            logger.info("üõë Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    try:
        from secure_config import SecureConfig
        config = SecureConfig()
        token = config.get_bot_token()
    except ImportError:
        # Fallback –µ—Å–ª–∏ secure_config –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        token = os.getenv('TELEGRAM_BOT_TOKEN')

    if not token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_BOT_TOKEN='your_token_here'")
        return

    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = KUBTelegramBot(token)

    try:
        await bot.start_bot()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await bot.stop_bot()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop_bot()

if __name__ == "__main__":
    print("ü§ñ TELEGRAM BOT –î–õ–Ø –ö–£–ë-1063 (Enhanced UX)")
    print("=" * 50)
    asyncio.run(main())