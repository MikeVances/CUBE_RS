#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –ö–£–ë-1063
–£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π dashboard_reader –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
"""

import asyncio
import logging
import time
import sys
import os
import psutil
from datetime import datetime, timedelta
from typing import Dict, Any, Optional

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import config
# –ò–º–ø–æ—Ä—Ç –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from modbus.dashboard_reader import get_dashboard_reader, get_statistics
    DASHBOARD_AVAILABLE = True
except ImportError:
    try:
        from modbus.reader import read_all
        DASHBOARD_AVAILABLE = False
        print("‚ö†Ô∏è dashboard_reader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ")
    except ImportError:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –º–æ–¥—É–ª–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
        sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s %(message)s",
    handlers=[
        logging.FileHandler("telegram_bot.log", encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω)
TELEGRAM_BOT_TOKEN = config.TELEGRAM_BOT_TOKEN  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω

class TelegramBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º"""
    
    def __init__(self):
        self.application = None
        self.is_running = False
        self.dashboard_reader = None
        self.alert_subscribers = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ –∞–ª–µ—Ä—Ç—ã
        self.last_alert_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º reader
        if DASHBOARD_AVAILABLE:
            self.dashboard_reader = get_dashboard_reader()
    
    def format_value(self, value: Any, unit: str = "", default: str = "NON") -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —Å –µ–¥–∏–Ω–∏—Ü–∞–º–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
        if value is None:
            return default
        if isinstance(value, (int, float)):
            if unit:
                return f"{value}{unit}"
            return str(value)
        return str(value)
    
    def get_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –º–æ–¥—É–ª–µ–π"""
        try:
            if DASHBOARD_AVAILABLE and self.dashboard_reader:
                data = self.dashboard_reader.read_all()
                if data and data.get('connection_status') == 'connected':
                    return data
            else:
                # –ü—Ä—è–º–æ–µ —á—Ç–µ–Ω–∏–µ
                return read_all()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        
        return {}
    
    def check_alerts(self, data: Dict[str, Any]) -> list:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        alerts = []
        
        if not data or data.get('connection_status') != 'connected':
            return alerts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É
        temp = data.get('temp_inside')
        if temp is not None:
            if temp > 35:
                alerts.append(f"üî• –í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
            elif temp < 15:
                alerts.append(f"üßä –ù–∏–∑–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–∂–Ω–æ—Å—Ç—å
        humidity = data.get('humidity')
        if humidity is not None:
            if humidity > 90:
                alerts.append(f"üíß –í—ã—Å–æ–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")
            elif humidity < 30:
                alerts.append(f"üèúÔ∏è –ù–∏–∑–∫–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º CO2
        co2 = data.get('co2')
        if co2 is not None:
            if co2 > 1500:
                alerts.append(f"ü´Å –í—ã—Å–æ–∫–∏–π CO‚ÇÇ: {co2} ppm")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º NH3
        nh3 = data.get('nh3')
        if nh3 is not None:
            if nh3 > 25:
                alerts.append(f"‚ò£Ô∏è –í—ã—Å–æ–∫–∏–π NH‚ÇÉ: {nh3} ppm")
        
        return alerts
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üìä –î–∞–Ω–Ω—ã–µ", callback_data='status')],
            [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
            [InlineKeyboardButton("üîî –ê–ª–µ—Ä—Ç—ã", callback_data='alerts')],
            [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "ü§ñ *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ö–£–ë-1063*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        await self.send_status_with_buttons(update.message.reply_text)
    
    async def send_status(self, reply_func):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = self.get_data()

            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            ts = data.get('updated_at')
            message_time_info = ""
            if ts:
                try:
                    if isinstance(ts, str):
                        ts = datetime.fromisoformat(ts)
                    minutes_ago = int((datetime.now() - ts).total_seconds() // 60)
                    message_time_info = f"\nüïí *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã* {minutes_ago}‚ÄØ–º–∏–Ω –Ω–∞–∑–∞–¥"
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            if not data:
                await reply_func("‚ùå *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞*", parse_mode='Markdown')
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection_status = data.get('connection_status', 'unknown')

            if connection_status != 'connected':
                status_messages = {
                    'waiting': '‚è≥ *–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...*',
                    'disconnected': 'üîå *–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É*',
                    'error': f"‚ùå *–û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}*"
                }
                message = status_messages.get(connection_status, '‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å*')
                await reply_func(message, parse_mode='Markdown')
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            timestamp = data.get('timestamp', datetime.now())
            if isinstance(timestamp, str):
                timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))

            message = f"üìä *–î–∞–Ω–Ω—ã–µ –ö–£–ë-1063*\n"
            message += f"üïí _{timestamp.strftime('%d.%m.%Y %H:%M:%S')}_\n\n"

            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            temp_inside = self.format_value(data.get('temp_inside'), '¬∞C')
            temp_target = self.format_value(data.get('temp_target'), '¬∞C')
            humidity = self.format_value(data.get('humidity'), '%')
            co2 = self.format_value(data.get('co2'), ' ppm')

            message += f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temp_inside}"
            if temp_target != "NON":
                message += f" (—Ü–µ–ª—å: {temp_target})"
            message += "\n"

            message += f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}\n"
            message += f"ü´Å *CO‚ÇÇ:* {co2}\n"

            # –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è
            vent_level = self.format_value(data.get('ventilation_level'), '%')
            vent_target = self.format_value(data.get('ventilation_target'), '%')
            vent_scheme = self.format_value(data.get('ventilation_scheme'))

            message += f"üåÄ *–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è:* {vent_level}"
            if vent_target != "NON":
                message += f" (—Ü–µ–ª—å: {vent_target})"
            message += "\n"

            if vent_scheme != "NON":
                message += f"‚öôÔ∏è *–°—Ö–µ–º–∞:* {vent_scheme}\n"

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            pressure = data.get('pressure')
            nh3 = data.get('nh3')

            if pressure is not None:
                message += f"üìä *–î–∞–≤–ª–µ–Ω–∏–µ:* {self.format_value(pressure, ' –ü–∞')}\n"
            if nh3 is not None:
                message += f"‚ò£Ô∏è *NH‚ÇÉ:* {self.format_value(nh3, ' ppm')}\n"

            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
            software_version = data.get('software_version')
            day_counter = data.get('day_counter')

            if software_version or day_counter:
                message += "\nüìã *–°–∏—Å—Ç–µ–º–∞:*\n"
                if software_version:
                    message += f"‚Ä¢ –ü–û: {software_version}\n"
                if day_counter:
                    message += f"‚Ä¢ –î–µ–Ω—å: {day_counter}\n"

            # –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            success_rate = data.get('success_rate')
            if success_rate is not None:
                quality = "–æ—Ç–ª–∏—á–Ω–æ–µ" if success_rate > 0.9 else "—Ö–æ—Ä–æ—à–µ–µ" if success_rate > 0.7 else "–ø–ª–æ—Ö–æ–µ"
                message += f"\nüìà *–ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö:* {success_rate*100:.1f}% ({quality})"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts = self.check_alerts(data)
            if alerts:
                message += "\n\nüö® *–í–ù–ò–ú–ê–ù–ò–ï:*\n"
                for alert in alerts:
                    message += f"‚Ä¢ {alert}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å
            if message_time_info:
                message += message_time_info

            await reply_func(message, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await reply_func("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*", parse_mode='Markdown')
    
    async def send_status_with_buttons(self, reply_func):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data = self.get_data()

            # –î–æ–±–∞–≤–ª—è–µ–º –±–ª–æ–∫ —Ä–∞—Å—á—ë—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            ts = data.get('updated_at')
            message_time_info = ""
            if ts:
                try:
                    if isinstance(ts, str):
                        ts = datetime.fromisoformat(ts)
                    minutes_ago = int((datetime.now() - ts).total_seconds() // 60)
                    message_time_info = f"\nüïí *–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã* {minutes_ago}‚ÄØ–º–∏–Ω –Ω–∞–∑–∞–¥"
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")

            if not data:
                keyboard = [
                    [InlineKeyboardButton("üìä –î–∞–Ω–Ω—ã–µ", callback_data='status')],
                    [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
                    [InlineKeyboardButton("üîî –ê–ª–µ—Ä—Ç—ã", callback_data='alerts')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await reply_func("‚ùå *–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞*", parse_mode='Markdown', reply_markup=reply_markup)
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection_status = data.get('connection_status', 'unknown')

            if connection_status != 'connected':
                status_messages = {
                    'waiting': '‚è≥ *–û–∂–∏–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...*',
                    'disconnected': 'üîå *–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É*',
                    'error': f"‚ùå *–û—à–∏–±–∫–∞: {data.get('error', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}*"
                }
                message = status_messages.get(connection_status, '‚ùì *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å*')
                
                keyboard = [
                    [InlineKeyboardButton("üìä –î–∞–Ω–Ω—ã–µ", callback_data='status')],
                    [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
                    [InlineKeyboardButton("üîî –ê–ª–µ—Ä—Ç—ã", callback_data='alerts')],
                    [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                await reply_func(message, parse_mode='Markdown', reply_markup=reply_markup)
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏
            timestamp = data.get('timestamp', datetime.now())
            if isinstance(timestamp, str):
                timestamp = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))

            message = f"üìä *–î–∞–Ω–Ω—ã–µ –ö–£–ë-1063*\n"
            message += f"üïí _{timestamp.strftime('%d.%m.%Y %H:%M:%S')}_\n\n"

            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            temp_inside = self.format_value(data.get('temp_inside'), '¬∞C')
            temp_target = self.format_value(data.get('temp_target'), '¬∞C')
            humidity = self.format_value(data.get('humidity'), '%')
            co2 = self.format_value(data.get('co2'), ' ppm')

            message += f"üå°Ô∏è *–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:* {temp_inside}"
            if temp_target != "NON":
                message += f" (—Ü–µ–ª—å: {temp_target})"
            message += "\n"

            message += f"üíß *–í–ª–∞–∂–Ω–æ—Å—Ç—å:* {humidity}\n"
            message += f"ü´Å *CO‚ÇÇ:* {co2}\n"

            # –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è
            vent_level = self.format_value(data.get('ventilation_level'), '%')
            vent_target = self.format_value(data.get('ventilation_target'), '%')
            vent_scheme = self.format_value(data.get('ventilation_scheme'))

            message += f"üåÄ *–í–µ–Ω—Ç–∏–ª—è—Ü–∏—è:* {vent_level}"
            if vent_target != "NON":
                message += f" (—Ü–µ–ª—å: {vent_target})"
            message += "\n"

            if vent_scheme != "NON":
                message += f"‚öôÔ∏è *–°—Ö–µ–º–∞:* {vent_scheme}\n"

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            pressure = data.get('pressure')
            nh3 = data.get('nh3')

            if pressure is not None:
                message += f"üìä *–î–∞–≤–ª–µ–Ω–∏–µ:* {self.format_value(pressure, ' –ü–∞')}\n"
            if nh3 is not None:
                message += f"‚ò£Ô∏è *NH‚ÇÉ:* {self.format_value(nh3, ' ppm')}\n"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª–µ—Ä—Ç—ã
            alerts = self.check_alerts(data)
            if alerts:
                message += "\n\nüö® *–í–ù–ò–ú–ê–ù–ò–ï:*\n"
                for alert in alerts:
                    message += f"‚Ä¢ {alert}\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            message += message_time_info

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üìä –î–∞–Ω–Ω—ã–µ", callback_data='status')],
                [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
                [InlineKeyboardButton("üîî –ê–ª–µ—Ä—Ç—ã", callback_data='alerts')],
                [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await reply_func(message, parse_mode='Markdown', reply_markup=reply_markup)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            keyboard = [
                [InlineKeyboardButton("üìä –î–∞–Ω–Ω—ã–µ", callback_data='status')],
                [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
                [InlineKeyboardButton("üîî –ê–ª–µ—Ä—Ç—ã", callback_data='alerts')],
                [InlineKeyboardButton("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data='help')]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await reply_func("‚ùå *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö*", parse_mode='Markdown', reply_markup=reply_markup)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
        try:
            if DASHBOARD_AVAILABLE:
                stats = get_statistics()
                if stats:
                    message = "üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:*\n\n"
                    message += f"‚úÖ *–£—Å–ø–µ—à–Ω—ã—Ö —á—Ç–µ–Ω–∏–π:* {stats.get('success_count', 0)}\n"
                    message += f"‚ùå *–û—à–∏–±–æ–∫:* {stats.get('error_count', 0)}\n"
                    message += f"üìä *–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫:* {stats.get('success_count', 0) + stats.get('error_count', 0)}\n"
                    
                    success_rate = stats.get('success_rate', 0) * 100
                    message += f"üìà *–£—Å–ø–µ—à–Ω–æ—Å—Ç—å:* {success_rate:.1f}%\n"
                    
                    if stats.get('is_running'):
                        message += f"üü¢ *–°—Ç–∞—Ç—É—Å:* –ê–∫—Ç–∏–≤–µ–Ω"
                    else:
                        message += f"üî¥ *–°—Ç–∞—Ç—É—Å:* –ù–µ–∞–∫—Ç–∏–≤–µ–Ω"
                    
                    if update.message:
                        await update.message.reply_text(message, parse_mode='Markdown')
                    elif update.callback_query:
                        await update.callback_query.message.reply_text(message, parse_mode='Markdown')
                else:
                    if update.message:
                        await update.message.reply_text("‚ùå *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*", parse_mode='Markdown')
                    elif update.callback_query:
                        await update.callback_query.message.reply_text("‚ùå *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞*", parse_mode='Markdown')
            else:
                if update.message:
                    await update.message.reply_text("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ dashboard —Ä–µ–∂–∏–º–µ*", parse_mode='Markdown')
                elif update.callback_query:
                    await update.callback_query.message.reply_text("üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ dashboard —Ä–µ–∂–∏–º–µ*", parse_mode='Markdown')
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            if update.message:
                await update.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*", parse_mode='Markdown')
            elif update.callback_query:
                await update.callback_query.message.reply_text("‚ùå *–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏*", parse_mode='Markdown')
    
    async def alerts_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /alerts"""
        user_id = update.effective_user.id
        
        keyboard = []
        if user_id in self.alert_subscribers:
            keyboard.append([InlineKeyboardButton("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è", callback_data='unsubscribe_alerts')])
            message = "üîî *–í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–ª–µ—Ä—Ç—ã*\n\n–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö."
        else:
            keyboard.append([InlineKeyboardButton("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", callback_data='subscribe_alerts')])
            message = "üîï *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∞–ª–µ—Ä—Ç—ã*\n\n–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö."
        
        keyboard.append([InlineKeyboardButton("üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data='check_alerts')])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.message:
            await update.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
        elif update.callback_query:
            await update.callback_query.message.reply_text(message, parse_mode='Markdown', reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = (
            "ü§ñ *–ö–£–ë-1063 Telegram Bot*\n\n"
            "*–ö–æ–º–∞–Ω–¥—ã:*\n"
            "/start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "/status - —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—ã –∏ —Å–µ—Ä–≤–∏—Å—ã:*\n"
            "‚Ä¢ üåê Dashboard: http://<ip>:8501\n"
            "‚Ä¢ üß≤ Modbus TCP: <ip>:5021 (–¥–ª—è SCADA/ModScan)\n"
            "‚Ä¢ üîå WebSocket: ws://<ip>:8765 (—Ä–µ–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)\n"
            "‚Ä¢ üì° MQTT: <broker>:<port>\n\n"
            "*–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*\n"
            "- ModScan: Function 03, Address 0, Quantity 3\n"
            "- WebSocket: ws://<ip>:8765, –∫–æ–º–∞–Ω–¥–∞ {cmd: 'get'}\n"
            "*–§—É–Ω–∫—Ü–∏–∏:*\n"
            "‚Ä¢ üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã, –≤–ª–∞–∂–Ω–æ—Å—Ç–∏, CO‚ÇÇ\n"
            "‚Ä¢ üîî –ê–ª–µ—Ä—Ç—ã –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö\n"
            "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–≤—è–∑–∏\n"
            "‚Ä¢ üåÄ –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏\n\n"
            "_–í–æ–ø—Ä–æ—Å—ã –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞: Support_"
        )
        if update.message:
            await update.message.reply_text(help_text, parse_mode='Markdown')
        elif update.callback_query:
            await update.callback_query.message.reply_text(help_text, parse_mode='Markdown')
    
    async def button_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user_id = update.effective_user.id
        
        if query.data == 'status':
            await self.send_status_with_buttons(query.message.reply_text)
        
        elif query.data == 'stats':
            await self.stats_command(update, context)
        
        elif query.data == 'alerts':
            await self.alerts_command(update, context)
        
        elif query.data == 'help':
            await self.help_command(update, context)
        
        elif query.data == 'subscribe_alerts':
            self.alert_subscribers.add(user_id)
            await query.message.reply_text("üîî *–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∞–ª–µ—Ä—Ç—ã!*", parse_mode='Markdown')
        
        elif query.data == 'unsubscribe_alerts':
            self.alert_subscribers.discard(user_id)
            await query.message.reply_text("üîï *–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–ª–µ—Ä—Ç–æ–≤*", parse_mode='Markdown')
        
        elif query.data == 'check_alerts':
            data = self.get_data()
            alerts = self.check_alerts(data)
            
            if alerts:
                message = "üö® *–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:*\n\n"
                for alert in alerts:
                    message += f"‚Ä¢ {alert}\n"
            else:
                message = "‚úÖ *–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –Ω–æ—Ä–º–µ*"
            
            await query.message.reply_text(message, parse_mode='Markdown')
    
    async def send_alert_to_subscribers(self, alert_message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º"""
        if not self.alert_subscribers:
            return
        
        for user_id in self.alert_subscribers.copy():
            try:
                await self.application.bot.send_message(
                    chat_id=user_id,
                    text=f"üö® *–ê–õ–ï–†–¢ –ö–£–ë-1063*\n\n{alert_message}",
                    parse_mode='Markdown'
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
                if "bot was blocked by the user" in str(e):
                    self.alert_subscribers.discard(user_id)
    
    async def periodic_alerts_check(self):
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
        while self.is_running:
            try:
                if self.alert_subscribers:
                    data = self.get_data()
                    alerts = self.check_alerts(data)
                    
                    for alert in alerts:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —ç—Ç–æ—Ç –∞–ª–µ—Ä—Ç –Ω–µ–¥–∞–≤–Ω–æ
                        alert_key = alert[:20]  # –ü–µ—Ä–≤—ã–µ 20 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∫–ª—é—á
                        last_time = self.last_alert_time.get(alert_key, datetime.min)
                        
                        if datetime.now() - last_time > timedelta(minutes=30):  # –ù–µ —á–∞—â–µ —Ä–∞–∑–∞ –≤ 30 –º–∏–Ω—É—Ç
                            await self.send_alert_to_subscribers(alert)
                            self.last_alert_time[alert_key] = datetime.now()
                
                await asyncio.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ periodic_alerts_check: {e}")
                await asyncio.sleep(60)
    
    async def error_handler(self, update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"Exception while handling an update: {context.error}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –±–æ—Ç–æ–≤
        if "Conflict: terminated by other getUpdates request" in str(context.error):
            logger.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –±–æ—Ç–æ–≤, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–µ–∫—É—â–∏–π...")
            self.is_running = False
            if self.application:
                try:
                    await self.application.stop()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {e}")
    
    def check_other_bot_instances(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ –¥—Ä—É–≥–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –±–æ—Ç–∞"""
        current_pid = os.getpid()
        
        for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
            try:
                if proc.pid == current_pid:
                    continue
                    
                cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
                
                # –ò—â–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Å telegram_bot
                if 'telegram_bot' in cmdline and proc.status() == psutil.STATUS_RUNNING:
                    logger.warning(f"–ù–∞–π–¥–µ–Ω –¥—Ä—É–≥–æ–π –ø—Ä–æ—Ü–µ—Å—Å –±–æ—Ç–∞: PID {proc.pid}")
                    return True
                    
            except (psutil.NoSuchProcess, psutil.AccessDenied):
                continue
        
        return False
    
    def start_bot(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.start_command))
            self.application.add_handler(CommandHandler("status", self.status_command))
            self.application.add_handler(CommandHandler("stats", self.stats_command))
            self.application.add_handler(CommandHandler("alerts", self.alerts_command))
            self.application.add_handler(CommandHandler("help", self.help_command))
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.button_handler))
            
            logger.info("ü§ñ Telegram –±–æ—Ç –∑–∞–ø—É—â–µ–Ω")
            self.is_running = True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            self.is_running = False

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    if TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ TELEGRAM_BOT_TOKEN")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot = TelegramBot()
        bot.start_bot()  # –°–Ω–∞—á–∞–ª–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º
        bot.application.run_polling(allowed_updates=Update.ALL_TYPES)  # –ó–∞—Ç–µ–º –∑–∞–ø—É—Å–∫–∞–µ–º
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    run_bot()