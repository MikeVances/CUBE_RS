#!/usr/bin/env python3
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è Telegram Bot
–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö, —É—Ç–∏–ª–∏—Ç—ã –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
"""

from datetime import datetime
from typing import Dict, Any

# --- –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç –¥–ª—è –º–µ–Ω—é ---
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

# –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
EMOJI = {
    'temperature': 'üå°Ô∏è',
    'humidity': 'üíß',
    'co2': 'ü´Å',
    'pressure': 'üåÄ',
    'alarm': 'üö®',
    'warning': '‚ö†Ô∏è',
    'ok': '‚úÖ',
    'error': '‚ùå',
    'info': '‚ÑπÔ∏è',
    'clock': 'üïê',
    'statistics': 'üìä',
    'system': '‚öôÔ∏è',
    'connection': 'üîó',
    'offline': 'üì¥'
}

def format_sensor_data(data: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    
    if not data:
        return f"{EMOJI['error']} **–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–∏—Å—Ç–µ–º—ã**"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_status = data.get('connection_status', 'unknown')
    if connection_status != 'connected':
        return f"{EMOJI['offline']} **–°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**\n\n–°—Ç–∞—Ç—É—Å: `{connection_status}`"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è
    temp_inside = data.get('temp_inside')
    humidity = data.get('humidity')
    co2 = data.get('co2')
    pressure = data.get('pressure')
    
    # –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    timestamp = data.get('timestamp')
    if timestamp:
        try:
            dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
            time_str = dt.strftime('%H:%M:%S')
            date_str = dt.strftime('%d.%m.%Y')
        except:
            time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
            date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        time_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        date_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"üìä **–ü–û–ö–ê–ó–ê–ù–ò–Ø –ö–£–ë-1063**\n"
    text += f"{EMOJI['clock']} –û–±–Ω–æ–≤–ª–µ–Ω–æ: `{time_str}` ({date_str})\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    text += "**üå°Ô∏è –ö–õ–ò–ú–ê–¢:**\n"
    
    if temp_inside is not None:
        temp_status = _get_temperature_status(temp_inside)
        text += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `{temp_inside:.1f}¬∞C` {temp_status}\n"
    else:
        text += f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: `–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö` {EMOJI['error']}\n"
    
    if humidity is not None:
        humidity_status = _get_humidity_status(humidity)
        text += f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: `{humidity:.1f}%` {humidity_status}\n"
    else:
        text += f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: `–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö` {EMOJI['error']}\n"
    
    # –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞
    text += "\n**ü´Å –ö–ê–ß–ï–°–¢–í–û –í–û–ó–î–£–•–ê:**\n"
    
    if co2 is not None:
        co2_status = _get_co2_status(co2)
        text += f"‚Ä¢ CO‚ÇÇ: `{co2} ppm` {co2_status}\n"
    else:
        text += f"‚Ä¢ CO‚ÇÇ: `–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö` {EMOJI['error']}\n"
    
    if pressure is not None:
        text += f"‚Ä¢ –î–∞–≤–ª–µ–Ω–∏–µ: `{pressure:.1f} –ü–∞`\n"
    
    return text


def build_main_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞"""
    buttons = [
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è", callback_data="show_stats")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_history")],
    ]
    if access_level in ("operator", "admin"):
        buttons.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π", callback_data="reset_alarms")])
    if access_level == "admin":
        buttons.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")])
    buttons.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")])
    return InlineKeyboardMarkup(buttons)    

def format_system_stats(stats: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    
    if not stats:
        return f"{EMOJI['error']} **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞**"
    
    system_stats = stats.get('system', {})
    reader_stats = stats.get('reader', {})
    writer_stats = stats.get('writer', {})
    
    text = f"üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ö–£–ë-1063**\n\n"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã
    uptime_seconds = system_stats.get('uptime_seconds', 0)
    uptime_str = _format_uptime(uptime_seconds)
    text += f"**‚öôÔ∏è –°–ò–°–¢–ï–ú–ê:**\n"
    text += f"‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `{uptime_str}`\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏—è
    text += f"\n**üìñ –ß–¢–ï–ù–ò–ï –î–ê–ù–ù–´–•:**\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if reader_stats.get('enabled') else '‚ùå'}\n"
    text += f"‚Ä¢ –¶–∏–∫–ª–æ–≤ —á—Ç–µ–Ω–∏—è: `{reader_stats.get('total_cycles', 0)}`\n"
    
    last_read = reader_stats.get('last_read')
    if last_read:
        try:
            dt = datetime.fromisoformat(str(last_read))
            last_read_str = dt.strftime('%H:%M:%S')
        except:
            last_read_str = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    else:
        last_read_str = "–Ω–∏–∫–æ–≥–¥–∞"
    
    text += f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —á—Ç–µ–Ω–∏–µ: `{last_read_str}`\n"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø–∏—Å–∏
    text += f"\n**‚úçÔ∏è –ó–ê–ü–ò–°–¨ –ö–û–ú–ê–ù–î:**\n"
    text += f"‚Ä¢ –ê–∫—Ç–∏–≤–µ–Ω: {'‚úÖ' if writer_stats.get('enabled') else '‚ùå'}\n"
    text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: `{writer_stats.get('commands_total', 0)}`\n"
    text += f"‚Ä¢ –£—Å–ø–µ—à–Ω—ã—Ö: `{writer_stats.get('commands_success', 0)}`\n"
    text += f"‚Ä¢ –ù–µ—É–¥–∞—á–Ω—ã—Ö: `{writer_stats.get('commands_failed', 0)}`\n"
    text += f"‚Ä¢ –í –æ—á–µ—Ä–µ–¥–∏: `{writer_stats.get('commands_pending', 0)}`\n"
    
    return text

# --- UX –î–û–ü–û–õ–ù–ï–ù–ò–Ø ---

async def send_typing_action(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç –∞–Ω–∏–º–∞—Ü–∏—é '–ø–µ—á–∞—Ç–∞–µ—Ç...' –¥–ª—è UX"""
    if hasattr(update, "message") and update.message:
        await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")
    elif hasattr(update, "callback_query") and update.callback_query:
        await context.bot.send_chat_action(chat_id=update.callback_query.message.chat_id, action="typing")

def error_message(text: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return f"{EMOJI['error']} <b>–û—à–∏–±–∫–∞</b>:\n{text}"

# --- /UX –î–û–ü–û–õ–ù–ï–ù–ò–Ø ---


def _get_temperature_status(temp: float) -> str:
    """–°—Ç–∞—Ç—É—Å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"""
    if temp < 15:
        return f"{EMOJI['info']} —Ö–æ–ª–æ–¥–Ω–æ"
    elif temp < 20:
        return f"{EMOJI['ok']} –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ" 
    elif temp < 25:
        return f"{EMOJI['ok']} –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ"
    elif temp < 30:
        return f"{EMOJI['warning']} —Ç–µ–ø–ª–æ"
    else:
        return f"{EMOJI['alarm']} –∂–∞—Ä–∫–æ"

def _get_humidity_status(humidity: float) -> str:
    """–°—Ç–∞—Ç—É—Å –≤–ª–∞–∂–Ω–æ—Å—Ç–∏ –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"""
    if humidity < 30:
        return f"{EMOJI['warning']} —Å—É—Ö–æ"
    elif humidity < 60:
        return f"{EMOJI['ok']} –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
    elif humidity < 80:
        return f"{EMOJI['warning']} –≤–ª–∞–∂–Ω–æ"
    else:
        return f"{EMOJI['alarm']} –æ—á–µ–Ω—å –≤–ª–∞–∂–Ω–æ"

def _get_co2_status(co2: int) -> str:
    """–°—Ç–∞—Ç—É—Å CO2 –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é"""
    if co2 < 600:
        return f"{EMOJI['ok']} –æ—Ç–ª–∏—á–Ω–æ"
    elif co2 < 1000:
        return f"{EMOJI['ok']} —Ö–æ—Ä–æ—à–æ"
    elif co2 < 1500:
        return f"{EMOJI['warning']} —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        return f"{EMOJI['alarm']} –ø–ª–æ—Ö–æ"

def _format_uptime(seconds: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    if seconds < 60:
        return f"{seconds} —Å–µ–∫"
    elif seconds < 3600:
        minutes = seconds // 60
        return f"{minutes} –º–∏–Ω"
    elif seconds < 86400:
        hours = seconds // 3600
        minutes = (seconds % 3600) // 60
        return f"{hours}—á {minutes}–º"
    else:
        days = seconds // 86400
        hours = (seconds % 86400) // 3600
        return f"{days}–¥ {hours}—á"