#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Bot
"""

import logging
from typing import Optional, List
from bot_database import TelegramBotDB

logger = logging.getLogger(__name__)

def check_user_permission(telegram_id: int, action: str, bot_db: TelegramBotDB) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
    
    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        action: –¢–∏–ø –¥–µ–π—Å—Ç–≤–∏—è ('read', 'write', 'reset_alarms')
        bot_db: –≠–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        
    Returns:
        bool: True –µ—Å–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = bot_db.get_user(telegram_id)
        if not user:
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if not user.get('is_active', True):
            logger.warning(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        access_level = user.get('access_level', 'user')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        permissions = bot_db.get_access_permissions(access_level)
        if not permissions:
            logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —É—Ä–æ–≤–Ω—è {access_level}")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        if action == 'read':
            return permissions.get('can_read', False)
        elif action == 'write':
            return permissions.get('can_write', False)
        elif action == 'reset_alarms':
            return permissions.get('can_reset_alarms', False)
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ {telegram_id}: {e}")
        return False

def check_command_rate_limit(telegram_id: int, bot_db: TelegramBotDB) -> tuple[bool, str]:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Returns:
        tuple: (—Ä–∞–∑—Ä–µ—à–µ–Ω–æ, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –µ–≥–æ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        user = bot_db.get_user(telegram_id)
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        access_level = user.get('access_level', 'user')
        permissions = bot_db.get_access_permissions(access_level)
        
        if not permissions:
            return False, "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
        
        # –ü–æ–ª—É—á–∞–µ–º –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥ –≤ —á–∞—Å
        max_commands_per_hour = permissions.get('max_commands_per_hour', 5)
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        commands_last_hour = bot_db.get_user_command_count_last_hour(telegram_id)
        
        if commands_last_hour >= max_commands_per_hour:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥ ({commands_last_hour}/{max_commands_per_hour} –≤ —á–∞—Å)"
        
        return True, f"–î–æ—Å—Ç—É–ø–Ω–æ –∫–æ–º–∞–Ω–¥: {max_commands_per_hour - commands_last_hour}/{max_commands_per_hour}"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∫–æ–º–∞–Ω–¥ {telegram_id}: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞"

def get_user_access_level(telegram_id: int, bot_db: TelegramBotDB) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return bot_db.get_user_access_level(telegram_id)

def get_allowed_registers(telegram_id: int, bot_db: TelegramBotDB) -> List[str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = bot_db.get_user(telegram_id)
        if not user:
            return []
        
        access_level = user.get('access_level', 'user')
        permissions = bot_db.get_access_permissions(access_level)
        
        if permissions and permissions.get('allowed_registers'):
            return permissions['allowed_registers']
        
        return []
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ {telegram_id}: {e}")
        return []

def can_access_register(telegram_id: int, register: str, bot_db: TelegramBotDB) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É"""
    try:
        allowed_registers = get_allowed_registers(telegram_id, bot_db)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if register in allowed_registers:
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä "0x0100-0x010F")
        for allowed in allowed_registers:
            if '-' in allowed:
                try:
                    start, end = allowed.split('-')
                    start_addr = int(start, 16)
                    end_addr = int(end, 16)
                    register_addr = int(register, 16)
                    
                    if start_addr <= register_addr <= end_addr:
                        return True
                except ValueError:
                    continue
        
        return False
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É {register}: {e}")
        return False

def get_user_permissions_info(telegram_id: int, bot_db: TelegramBotDB) -> dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user = bot_db.get_user(telegram_id)
        if not user:
            return {}
        
        access_level = user.get('access_level', 'user')
        permissions = bot_db.get_access_permissions(access_level)
        
        if not permissions:
            return {}
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥
        commands_last_hour = bot_db.get_user_command_count_last_hour(telegram_id)
        max_commands = permissions.get('max_commands_per_hour', 5)
        
        return {
            'access_level': access_level,
            'description': permissions.get('description', ''),
            'can_read': permissions.get('can_read', False),
            'can_write': permissions.get('can_write', False),
            'can_reset_alarms': permissions.get('can_reset_alarms', False),
            'allowed_registers': permissions.get('allowed_registers', []),
            'commands_used': commands_last_hour,
            'commands_limit': max_commands,
            'commands_remaining': max(0, max_commands - commands_last_hour)
        }
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö {telegram_id}: {e}")
        return {}

def is_admin_user(telegram_id: int, admin_list: List[int] = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if not admin_list:
        admin_list = []
    
    return telegram_id in admin_list

def promote_user(telegram_id: int, new_access_level: str, promoted_by: int, 
                bot_db: TelegramBotDB, admin_list: List[int] = None) -> tuple[bool, str]:
    """
    –ü–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        telegram_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è
        new_access_level: –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        promoted_by: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–≤—ã—à–∞–µ—Ç
        bot_db: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
        admin_list: –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
        
    Returns:
        tuple: (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ)
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø—Ä–æ–º–æ—É—Ç–µ—Ä–∞
        if not is_admin_user(promoted_by, admin_list):
            return False, "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        valid_levels = ['user', 'operator', 'admin', 'engineer']
        if new_access_level not in valid_levels:
            return False, f"–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {new_access_level}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = bot_db.get_user(telegram_id)
        if not user:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        success = bot_db.set_user_access_level(telegram_id, new_access_level)
        
        if success:
            old_level = user.get('access_level', 'user')
            logger.info(f"üîù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–≤—ã—à–µ–Ω —Å {old_level} –¥–æ {new_access_level} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {promoted_by}")
            return True, f"–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –∏–∑–º–µ–Ω—ë–Ω: {old_level} ‚Üí {new_access_level}"
        else:
            return False, "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–≤—ã—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
        return False, f"–û—à–∏–±–∫–∞: {str(e)}"

# =============================================================================
# –î–ï–ö–û–†–ê–¢–û–†–´ –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –ü–†–ê–í
# =============================================================================

def require_permission(action: str):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    def decorator(func):
        async def wrapper(self, update, context):
            user_id = update.effective_user.id
            
            if not check_user_permission(user_id, action, self.bot_db):
                await update.message.reply_text(f"‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏—è: {action}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è write –æ–ø–µ—Ä–∞—Ü–∏–π
            if action in ['write', 'reset_alarms']:
                allowed, message = check_command_rate_limit(user_id, self.bot_db)
                if not allowed:
                    await update.message.reply_text(f"‚è∞ {message}")
                    return
            
            return await func(self, update, context)
        return wrapper
    return decorator

def admin_only(admin_list: List[int]):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    def decorator(func):
        async def wrapper(self, update, context):
            user_id = update.effective_user.id
            
            if not is_admin_user(user_id, admin_list):
                await update.message.reply_text("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º")
                return
            
            return await func(self, update, context)
        return wrapper
    return decorator

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø
# =============================================================================

def test_permissions():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
    print("=" * 40)
    
    try:
        db = TelegramBotDB()
        test_user_id = 123456789
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.register_user(test_user_id, "test_user", "Test", "User", "operator")
        
        print("1. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —á—Ç–µ–Ω–∏—è...")
        can_read = check_user_permission(test_user_id, "read", db)
        print(f"   –ü—Ä–∞–≤–∞ —á—Ç–µ–Ω–∏—è: {'‚úÖ' if can_read else '‚ùå'}")
        
        print("2. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏...")
        can_write = check_user_permission(test_user_id, "write", db)
        print(f"   –ü—Ä–∞–≤–∞ –∑–∞–ø–∏—Å–∏: {'‚úÖ' if can_write else '‚ùå'}")
        
        print("3. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π...")
        can_reset = check_user_permission(test_user_id, "reset_alarms", db)
        print(f"   –ü—Ä–∞–≤–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π: {'‚úÖ' if can_reset else '‚ùå'}")
        
        print("4. –¢–µ—Å—Ç –ª–∏–º–∏—Ç–∞ –∫–æ–º–∞–Ω–¥...")
        allowed, message = check_command_rate_limit(test_user_id, db)
        print(f"   –õ–∏–º–∏—Ç –∫–æ–º–∞–Ω–¥: {'‚úÖ' if allowed else '‚ùå'} - {message}")
        
        print("5. –¢–µ—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö...")
        info = get_user_permissions_info(test_user_id, db)
        print(f"   –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {info.get('access_level')}")
        print(f"   –û–ø–∏—Å–∞–Ω–∏–µ: {info.get('description')}")
        print(f"   –û—Å—Ç–∞—Ç–æ–∫ –∫–æ–º–∞–Ω–¥: {info.get('commands_remaining')}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∞–≤: {e}")

if __name__ == "__main__":
    test_permissions()