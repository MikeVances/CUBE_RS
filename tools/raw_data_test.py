#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
"""

import socket
import struct
import time

def read_raw_register(register_address, host='tcp.cloudpub.ru', port=27521):
    """
    –ß–∏—Ç–∞–µ—Ç —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –±–µ–∑ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}...")
        sock.connect((host, port))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Modbus TCP –∑–∞–ø—Ä–æ—Å
        transaction_id = (register_address & 0xFFFF)
        request = struct.pack('>HHHBBHH',
            transaction_id, 0x0000, 0x0006, 0x01, 0x03, register_address, 1
        )
        
        print(f"üì§ –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_address:04X}...")
        print(f"üì§ –ó–∞–ø—Ä–æ—Å: {request.hex()}")
        sock.send(request)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = sock.recv(1024)
        print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if len(response) >= 9:
            function_code = response[7]
            
            if function_code == 0x03:
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                byte_count = response[8]
                print(f"üìä Byte Count: {byte_count}")
                
                if byte_count >= 2:
                    data = response[9:9+byte_count]
                    print(f"üìä Data: {data.hex()}")
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    raw_value = struct.unpack('>H', data[0:2])[0]
                    print(f"üìä Raw Value: {raw_value}")
                    print(f"üìä Raw Value (hex): 0x{raw_value:04X}")
                    print(f"üìä Raw Value (binary): {raw_value:016b}")
                    
                    sock.close()
                    return True, raw_value, data
                else:
                    print(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {byte_count} –±–∞–π—Ç")
                    sock.close()
                    return False, None, None
                    
            elif function_code == 0x83:
                # –û—à–∏–±–∫–∞ Modbus
                error_code = response[8] if len(response) > 8 else 0
                error_messages = {
                    1: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
                    2: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞", 
                    3: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤",
                    4: "–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                }
                error_msg = error_messages.get(error_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({error_code})")
                print(f"‚ùå –û—à–∏–±–∫–∞ Modbus: {error_msg}")
                sock.close()
                return False, None, None
                
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏: 0x{function_code:02X}")
                sock.close()
                return False, None, None
        else:
            print(f"‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: {len(response)} –±–∞–π—Ç")
            sock.close()
            return False, None, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False, None, None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("üîç –¢–ï–°–¢ –°–´–†–´–• –î–ê–ù–ù–´–• –ò–ó –†–ï–ì–ò–°–¢–†–û–í")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
    test_registers = [
        0x00D5,  # –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        0x00D4,  # –¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        0x0084,  # –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å
        0x0085,  # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2
        0x0086,  # –ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3
        0x0083,  # –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
        0x00D0,  # –¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
        0x00D1,  # –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
        0x00D2,  # –ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏
        0x0301,  # –í–µ—Ä—Å–∏—è –ü–û
    ]
    
    results = {}
    
    for reg_addr in test_registers:
        print(f"\n{'='*60}")
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{reg_addr:04X}")
        print("=" * 60)
        
        success, raw_value, raw_data = read_raw_register(reg_addr)
        
        if success:
            results[f"0x{reg_addr:04X}"] = {
                'raw_value': raw_value,
                'raw_data': raw_data,
                'hex_value': f"0x{raw_value:04X}",
                'binary': f"{raw_value:016b}"
            }
            print(f"‚úÖ –£–°–ü–ï–•: –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = {raw_value}")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä")
        
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É —Å—ã—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print(f"\n{'='*60}")
    print("üìã –°–í–û–î–ö–ê –°–´–†–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    if results:
        for reg_addr, data in results.items():
            print(f"‚Ä¢ {reg_addr}:")
            print(f"  - –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {data['raw_value']}")
            print(f"  - Hex: {data['hex_value']}")
            print(f"  - Binary: {data['binary']}")
            print(f"  - Raw bytes: {data['raw_data'].hex()}")
    else:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
    
    print("=" * 60)

if __name__ == "__main__":
    main() 