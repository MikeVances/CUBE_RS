import socket
import struct
import time

def test_connection():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Modbus TCP –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...")
    print("=" * 60)
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ tcp.cloudpub.ru:20049...")
        sock.connect(('tcp.cloudpub.ru', 20049))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –¢–µ—Å—Ç 1: –§—É–Ω–∫—Ü–∏—è 0x03 (—á—Ç–µ–Ω–∏–µ holding registers)
        print("\nüì§ –¢–µ—Å—Ç 1: –§—É–Ω–∫—Ü–∏—è 0x03 (—á—Ç–µ–Ω–∏–µ holding registers)")
        print("-" * 40)
        
        test_addresses = [0x0000, 0x0001, 0x0002, 0x0003, 0x0004, 0x0005]
        
        for addr in test_addresses:
            transaction_id = 0x0001
            request = struct.pack('>HHHBBHH',
                transaction_id, 0x0000, 0x0006, 0x01, 0x03, addr, 1
            )
            print(f"üì§ –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ {hex(addr)}...")
            sock.send(request)
            response = sock.recv(1024)
            print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
            
            if len(response) >= 9:
                function_code = response[7]
                if function_code == 0x03:
                    byte_count = response[8]
                    if byte_count >= 2:
                        reg_value = struct.unpack('>H', response[9:11])[0]
                        print(f"   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ: 0x{reg_value:04X} ({reg_value})")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                elif function_code == 0x83:
                    error_code = response[8] if len(response) > 8 else 0
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ {error_code}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: 0x{function_code:02X}")
            else:
                print(f"   ‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            
            time.sleep(0.5)
        
        # –¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏—è 0x04 (—á—Ç–µ–Ω–∏–µ input registers)
        print("\nüì§ –¢–µ—Å—Ç 2: –§—É–Ω–∫—Ü–∏—è 0x04 (—á—Ç–µ–Ω–∏–µ input registers)")
        print("-" * 40)
        
        for addr in test_addresses:
            transaction_id = 0x0002
            request = struct.pack('>HHHBBHH',
                transaction_id, 0x0000, 0x0006, 0x01, 0x04, addr, 1
            )
            print(f"üì§ –ß—Ç–µ–Ω–∏–µ input —Ä–µ–≥–∏—Å—Ç—Ä–∞ {hex(addr)}...")
            sock.send(request)
            response = sock.recv(1024)
            print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
            
            if len(response) >= 9:
                function_code = response[7]
                if function_code == 0x04:
                    byte_count = response[8]
                    if byte_count >= 2:
                        reg_value = struct.unpack('>H', response[9:11])[0]
                        print(f"   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ: 0x{reg_value:04X} ({reg_value})")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                elif function_code == 0x84:
                    error_code = response[8] if len(response) > 8 else 0
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ {error_code}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: 0x{function_code:02X}")
            else:
                print(f"   ‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            
            time.sleep(0.5)
        
        # –¢–µ—Å—Ç 3: –ü–æ–ø—Ä–æ–±—É–µ–º –∞–¥—Ä–µ—Å–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–£–ë-1063
        print("\nüì§ –¢–µ—Å—Ç 3: –ê–¥—Ä–µ—Å–∞ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–£–ë-1063")
        print("-" * 40)
        
        kub_addresses = [0x0301, 0x0083, 0x0084, 0x0085, 0x00D5]
        
        for addr in kub_addresses:
            transaction_id = 0x0003
            request = struct.pack('>HHHBBHH',
                transaction_id, 0x0000, 0x0006, 0x01, 0x04, addr, 1
            )
            print(f"üì§ –ß—Ç–µ–Ω–∏–µ –ö–£–ë —Ä–µ–≥–∏—Å—Ç—Ä–∞ {hex(addr)}...")
            sock.send(request)
            response = sock.recv(1024)
            print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
            
            if len(response) >= 9:
                function_code = response[7]
                if function_code == 0x04:
                    byte_count = response[8]
                    if byte_count >= 2:
                        reg_value = struct.unpack('>H', response[9:11])[0]
                        print(f"   ‚úÖ –ó–Ω–∞—á–µ–Ω–∏–µ: 0x{reg_value:04X} ({reg_value})")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö")
                elif function_code == 0x84:
                    error_code = response[8] if len(response) > 8 else 0
                    print(f"   ‚ùå –û—à–∏–±–∫–∞: –∫–æ–¥ {error_code}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥: 0x{function_code:02X}")
            else:
                print(f"   ‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            
            time.sleep(0.5)
        
        sock.close()
        print("\n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_connection() 