#!/usr/bin/env python3
"""
Tailscale Mobile App - веб-приложение для доступа к фермам через Tailscale mesh-сеть
Заменяет WebRTC соединения на прямые HTTP запросы к фермам
"""

import os
import json
import time
import asyncio
import logging
import aiohttp
from typing import Dict, List, Any, Optional
from flask import Flask, render_template, request, jsonify, session, redirect, url_for
from flask_cors import CORS

from tailscale_manager import TailscaleManager

logger = logging.getLogger(__name__)

class TailscaleFarmConnector:
    """Коннектор для прямого подключения к фермам через Tailscale"""
    
    def __init__(self):
        self.active_connections = {}  # farm_ip -> connection_info
        self.connection_timeout = aiohttp.ClientTimeout(total=10)
    
    async def test_farm_connection(self, farm_ip: str, port: int = 8080) -> bool:
        """Тестирование соединения с фермой"""
        try:
            url = f"http://{farm_ip}:{port}/health"
            async with aiohttp.ClientSession(timeout=self.connection_timeout) as session:
                async with session.get(url) as response:
                    if response.status == 200:
                        data = await response.json()
                        logger.debug(f"Ферма {farm_ip} доступна: {data.get('status')}")
                        return True
                    else:
                        logger.warning(f"Ферма {farm_ip} вернула статус {response.status}")
                        return False
                        
        except asyncio.TimeoutError:
            logger.warning(f"Timeout подключения к ферме {farm_ip}")
            return False
        except Exception as e:
            logger.debug(f"Ошибка подключения к ферме {farm_ip}: {e}")
            return False
    
    async def send_farm_request(self, farm_ip: str, endpoint: str, 
                               method: str = 'GET', data: Dict = None,
                               port: int = 8080) -> Dict[str, Any]:
        """Отправка запроса к ферме через Tailscale"""
        try:
            url = f"http://{farm_ip}:{port}{endpoint}"
            
            async with aiohttp.ClientSession(timeout=self.connection_timeout) as session:
                if method.upper() == 'GET':
                    async with session.get(url) as response:
                        result = await response.json()
                        result['_connection_status'] = 'success'
                        result['_response_time'] = time.time()
                        return result
                        
                elif method.upper() == 'POST':
                    async with session.post(url, json=data) as response:
                        result = await response.json()
                        result['_connection_status'] = 'success'
                        result['_response_time'] = time.time()
                        return result
                        
        except asyncio.TimeoutError:
            return {
                '_connection_status': 'timeout',
                'error': f'Timeout подключения к ферме {farm_ip}'
            }
        except Exception as e:
            logger.error(f"Ошибка запроса к ферме {farm_ip}: {e}")
            return {
                '_connection_status': 'error',
                'error': str(e)
            }
    
    async def get_farm_current_data(self, farm_ip: str, port: int = 8080) -> Dict[str, Any]:
        """Получение текущих данных фермы"""
        return await self.send_farm_request(farm_ip, '/api/data/current', port=port)
    
    async def get_farm_history_data(self, farm_ip: str, hours: int = 24, port: int = 8080) -> Dict[str, Any]:
        """Получение исторических данных фермы"""
        endpoint = f'/api/data/history?hours={hours}'
        return await self.send_farm_request(farm_ip, endpoint, port=port)
    
    async def get_farm_statistics(self, farm_ip: str, port: int = 8080) -> Dict[str, Any]:
        """Получение статистики фермы"""
        return await self.send_farm_request(farm_ip, '/api/data/statistics', port=port)
    
    async def send_farm_command(self, farm_ip: str, command: str, params: Dict = None, port: int = 8080) -> Dict[str, Any]:
        """Отправка команды ферме"""
        data = {'command': command}
        if params:
            data.update(params)
        return await self.send_farm_request(farm_ip, '/api/commands', 'POST', data, port=port)

class TailscaleMobileApp:
    """Мобильное приложение для работы с фермами через Tailscale"""
    
    def __init__(self, discovery_service_url: str, tailscale_config: Dict[str, Any]):
        self.discovery_url = discovery_service_url.rstrip('/')
        self.tailscale_config = tailscale_config
        
        # Flask приложение
        self.app = Flask(__name__)
        self.app.secret_key = os.getenv('SECRET_KEY', 'tailscale-mobile-app-secret-key')
        CORS(self.app)
        
        # Коннектор для ферм
        self.farm_connector = TailscaleFarmConnector()
        self.tailscale_manager = None
        
        # Кэш данных
        self.farms_cache = {}
        self.cache_expiry = 300  # 5 минут
        self.last_cache_update = 0
        
        self.setup_routes()
    
    def setup_routes(self):
        """Настройка маршрутов Flask"""
        
        @self.app.route('/')
        def index():
            """Главная страница"""
            if 'user_id' not in session:
                return redirect(url_for('login'))
            return render_template('tailscale_mobile_index.html')
        
        @self.app.route('/login')
        def login():
            """Страница входа"""
            return render_template('tailscale_mobile_login.html')
        
        @self.app.route('/api/login', methods=['POST'])
        def api_login():
            """API авторизации (упрощенная версия)"""
            try:
                data = request.get_json()
                username = data.get('username')\n                password = data.get('password')\n                \n                # Простая проверка (в продакшене нужна полная аутентификация)\n                if username and password:\n                    session['user_id'] = f'user_{username}'\n                    session['username'] = username\n                    logger.info(f\"Пользователь {username} авторизован\")\n                    \n                    return jsonify({\n                        'status': 'success',\n                        'message': 'Авторизация успешна',\n                        'user_id': session['user_id']\n                    })\n                else:\n                    return jsonify({\n                        'status': 'error',\n                        'message': 'Неверные учетные данные'\n                    }), 401\n                    \n            except Exception as e:\n                logger.error(f\"Ошибка авторизации: {e}\")\n                return jsonify({\n                    'status': 'error',\n                    'message': 'Ошибка сервера'\n                }), 500\n        \n        @self.app.route('/api/logout', methods=['POST'])\n        def api_logout():\n            \"\"\"API выхода\"\"\"\n            session.clear()\n            return jsonify({'status': 'success', 'message': 'Выход выполнен'})\n        \n        @self.app.route('/api/farms')\n        def api_get_farms():\n            \"\"\"Получение списка ферм пользователя\"\"\"\n            if 'user_id' not in session:\n                return jsonify({'status': 'error', 'message': 'Не авторизован'}), 401\n            \n            try:\n                farms = asyncio.run(self.get_user_farms(session['user_id']))\n                return jsonify({\n                    'status': 'success',\n                    'farms': farms\n                })\n            except Exception as e:\n                logger.error(f\"Ошибка получения ферм: {e}\")\n                return jsonify({\n                    'status': 'error',\n                    'message': str(e)\n                }), 500\n        \n        @self.app.route('/api/farm/<farm_ip>/data/current')\n        def api_get_farm_current_data(farm_ip):\n            \"\"\"Получение текущих данных фермы\"\"\"\n            if 'user_id' not in session:\n                return jsonify({'status': 'error', 'message': 'Не авторизован'}), 401\n            \n            try:\n                data = asyncio.run(self.farm_connector.get_farm_current_data(farm_ip))\n                return jsonify(data)\n            except Exception as e:\n                logger.error(f\"Ошибка получения данных фермы {farm_ip}: {e}\")\n                return jsonify({\n                    'status': 'error',\n                    'message': str(e)\n                }), 500\n        \n        @self.app.route('/api/farm/<farm_ip>/data/history')\n        def api_get_farm_history(farm_ip):\n            \"\"\"Получение исторических данных фермы\"\"\"\n            if 'user_id' not in session:\n                return jsonify({'status': 'error', 'message': 'Не авторизован'}), 401\n            \n            try:\n                hours = int(request.args.get('hours', 24))\n                data = asyncio.run(self.farm_connector.get_farm_history_data(farm_ip, hours))\n                return jsonify(data)\n            except Exception as e:\n                logger.error(f\"Ошибка получения истории фермы {farm_ip}: {e}\")\n                return jsonify({\n                    'status': 'error',\n                    'message': str(e)\n                }), 500\n        \n        @self.app.route('/api/farm/<farm_ip>/statistics')\n        def api_get_farm_statistics(farm_ip):\n            \"\"\"Получение статистики фермы\"\"\"\n            if 'user_id' not in session:\n                return jsonify({'status': 'error', 'message': 'Не авторизован'}), 401\n            \n            try:\n                data = asyncio.run(self.farm_connector.get_farm_statistics(farm_ip))\n                return jsonify(data)\n            except Exception as e:\n                logger.error(f\"Ошибка получения статистики фермы {farm_ip}: {e}\")\n                return jsonify({\n                    'status': 'error',\n                    'message': str(e)\n                }), 500\n        \n        @self.app.route('/api/farm/<farm_ip>/command', methods=['POST'])\n        def api_send_farm_command(farm_ip):\n            \"\"\"Отправка команды ферме\"\"\"\n            if 'user_id' not in session:\n                return jsonify({'status': 'error', 'message': 'Не авторизован'}), 401\n            \n            try:\n                data = request.get_json()\n                command = data.get('command')\n                params = data.get('params', {})\n                \n                result = asyncio.run(self.farm_connector.send_farm_command(farm_ip, command, params))\n                return jsonify(result)\n            except Exception as e:\n                logger.error(f\"Ошибка отправки команды ферме {farm_ip}: {e}\")\n                return jsonify({\n                    'status': 'error',\n                    'message': str(e)\n                }), 500\n        \n        @self.app.route('/api/farm/<farm_ip>/test_connection')\n        def api_test_farm_connection(farm_ip):\n            \"\"\"Тестирование соединения с фермой\"\"\"\n            if 'user_id' not in session:\n                return jsonify({'status': 'error', 'message': 'Не авторизован'}), 401\n            \n            try:\n                is_connected = asyncio.run(self.farm_connector.test_farm_connection(farm_ip))\n                return jsonify({\n                    'status': 'success',\n                    'connected': is_connected,\n                    'farm_ip': farm_ip,\n                    'tested_at': time.time()\n                })\n            except Exception as e:\n                logger.error(f\"Ошибка тестирования соединения с фермой {farm_ip}: {e}\")\n                return jsonify({\n                    'status': 'error',\n                    'message': str(e)\n                }), 500\n    \n    async def get_user_farms(self, user_id: str) -> List[Dict[str, Any]]:\n        \"\"\"Получение ферм пользователя из Discovery Service\"\"\"\n        try:\n            # Проверяем кэш\n            current_time = time.time()\n            if (current_time - self.last_cache_update) < self.cache_expiry and user_id in self.farms_cache:\n                logger.debug(f\"Возвращаем фермы из кэша для пользователя {user_id}\")\n                return self.farms_cache[user_id]\n            \n            # Запрос к Discovery Service\n            async with aiohttp.ClientSession() as session:\n                url = f\"{self.discovery_url}/api/farms/{user_id}\"\n                async with session.get(url) as response:\n                    if response.status == 200:\n                        data = await response.json()\n                        farms = data.get('farms', [])\n                        \n                        # Тестируем соединения с фермами\n                        for farm in farms:\n                            farm_ip = farm.get('tailscale_ip')\n                            if farm_ip:\n                                is_connected = await self.farm_connector.test_farm_connection(farm_ip)\n                                farm['connection_status'] = 'connected' if is_connected else 'disconnected'\n                            else:\n                                farm['connection_status'] = 'no_ip'\n                        \n                        # Обновляем кэш\n                        self.farms_cache[user_id] = farms\n                        self.last_cache_update = current_time\n                        \n                        logger.info(f\"Получено {len(farms)} ферм для пользователя {user_id}\")\n                        return farms\n                    else:\n                        error_text = await response.text()\n                        logger.error(f\"Ошибка запроса к Discovery Service: {error_text}\")\n                        return []\n        \n        except Exception as e:\n            logger.error(f\"Ошибка получения ферм пользователя {user_id}: {e}\")\n            return []\n    \n    def run(self, host: str = '0.0.0.0', port: int = 5000, debug: bool = False):\n        \"\"\"Запуск мобильного приложения\"\"\"\n        logger.info(f\"Запуск Tailscale Mobile App на {host}:{port}\")\n        self.app.run(host=host, port=port, debug=debug)\n\n# HTML шаблоны\nTAILSCALE_MOBILE_INDEX_TEMPLATE = '''\n<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Фермы КУБ-1063 - Tailscale</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            margin: 0;\n            padding: 20px;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            color: #333;\n        }\n        .container {\n            max-width: 1200px;\n            margin: 0 auto;\n        }\n        .header {\n            background: rgba(255,255,255,0.95);\n            padding: 20px;\n            border-radius: 15px;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n            margin-bottom: 30px;\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n        }\n        .farm-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));\n            gap: 20px;\n        }\n        .farm-card {\n            background: rgba(255,255,255,0.95);\n            border-radius: 15px;\n            padding: 20px;\n            box-shadow: 0 4px 15px rgba(0,0,0,0.1);\n            transition: transform 0.3s ease;\n        }\n        .farm-card:hover {\n            transform: translateY(-5px);\n        }\n        .farm-status {\n            display: inline-block;\n            padding: 5px 10px;\n            border-radius: 20px;\n            font-size: 12px;\n            font-weight: bold;\n        }\n        .status-connected { background: #4CAF50; color: white; }\n        .status-disconnected { background: #f44336; color: white; }\n        .status-unknown { background: #ff9800; color: white; }\n        .data-grid {\n            display: grid;\n            grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n            gap: 10px;\n            margin: 15px 0;\n        }\n        .data-item {\n            background: #f5f5f5;\n            padding: 10px;\n            border-radius: 8px;\n            text-align: center;\n        }\n        .data-value {\n            font-size: 20px;\n            font-weight: bold;\n            color: #2196F3;\n        }\n        .data-label {\n            font-size: 12px;\n            color: #666;\n            margin-top: 5px;\n        }\n        .btn {\n            background: #2196F3;\n            color: white;\n            border: none;\n            padding: 10px 20px;\n            border-radius: 8px;\n            cursor: pointer;\n            margin: 5px;\n            transition: background 0.3s;\n        }\n        .btn:hover {\n            background: #1976D2;\n        }\n        .btn-small {\n            padding: 5px 10px;\n            font-size: 12px;\n        }\n        .loading {\n            text-align: center;\n            padding: 40px;\n            color: #666;\n        }\n        .error-message {\n            background: #ffebee;\n            color: #c62828;\n            padding: 10px;\n            border-radius: 8px;\n            margin: 10px 0;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <div class=\"header\">\n            <h1>🏭 Мои фермы КУБ-1063</h1>\n            <div>\n                <span id=\"username\">Загрузка...</span>\n                <button class=\"btn btn-small\" onclick=\"logout()\">Выход</button>\n            </div>\n        </div>\n        \n        <div id=\"farms-container\">\n            <div class=\"loading\">Загрузка ферм...</div>\n        </div>\n    </div>\n\n    <script>\n        let farms = [];\n        let updateInterval;\n\n        // Загрузка ферм при старте\n        document.addEventListener('DOMContentLoaded', function() {\n            loadFarms();\n            // Обновляем данные каждые 30 секунд\n            updateInterval = setInterval(loadFarms, 30000);\n        });\n\n        async function loadFarms() {\n            try {\n                const response = await fetch('/api/farms');\n                const data = await response.json();\n                \n                if (data.status === 'success') {\n                    farms = data.farms;\n                    renderFarms();\n                    \n                    // Загружаем данные для каждой фермы\n                    farms.forEach(farm => {\n                        if (farm.connection_status === 'connected') {\n                            loadFarmData(farm.tailscale_ip);\n                        }\n                    });\n                } else {\n                    showError('Ошибка загрузки ферм: ' + data.message);\n                }\n            } catch (error) {\n                showError('Ошибка подключения к серверу: ' + error.message);\n            }\n        }\n\n        function renderFarms() {\n            const container = document.getElementById('farms-container');\n            \n            if (farms.length === 0) {\n                container.innerHTML = '<div class=\"loading\">Фермы не найдены</div>';\n                return;\n            }\n            \n            container.innerHTML = '<div class=\"farm-grid\">' + \n                farms.map(farm => `\n                    <div class=\"farm-card\" id=\"farm-${farm.tailscale_ip}\">\n                        <div style=\"display: flex; justify-content: space-between; align-items: center; margin-bottom: 15px;\">\n                            <h3>${farm.farm_name}</h3>\n                            <span class=\"farm-status status-${farm.connection_status}\">\n                                ${getStatusText(farm.connection_status)}\n                            </span>\n                        </div>\n                        \n                        <div class=\"farm-info\">\n                            <p><strong>IP:</strong> ${farm.tailscale_ip}</p>\n                            <p><strong>Хост:</strong> ${farm.hostname}</p>\n                            <p><strong>Возможности:</strong> ${(farm.capabilities || []).join(', ')}</p>\n                        </div>\n                        \n                        <div class=\"data-container\" id=\"data-${farm.tailscale_ip}\">\n                            ${farm.connection_status === 'connected' ? \n                                '<div class=\"loading\">Загрузка данных...</div>' : \n                                '<div class=\"error-message\">Ферма недоступна</div>'\n                            }\n                        </div>\n                        \n                        <div class=\"farm-actions\">\n                            <button class=\"btn btn-small\" onclick=\"testConnection('${farm.tailscale_ip}')\">Тест соединения</button>\n                            <button class=\"btn btn-small\" onclick=\"loadFarmData('${farm.tailscale_ip}')\">Обновить данные</button>\n                            <button class=\"btn btn-small\" onclick=\"showFarmHistory('${farm.tailscale_ip}')\">История</button>\n                        </div>\n                    </div>\n                `).join('') + \n            '</div>';\n        }\n\n        async function loadFarmData(farmIp) {\n            try {\n                const response = await fetch(`/api/farm/${farmIp}/data/current`);\n                const result = await response.json();\n                \n                const container = document.getElementById(`data-${farmIp}`);\n                \n                if (result._connection_status === 'success' && result.data) {\n                    const data = result.data;\n                    container.innerHTML = `\n                        <div class=\"data-grid\">\n                            <div class=\"data-item\">\n                                <div class=\"data-value\">${data.temperature_inside?.toFixed(1) || 'N/A'}°C</div>\n                                <div class=\"data-label\">Температура</div>\n                            </div>\n                            <div class=\"data-item\">\n                                <div class=\"data-value\">${data.humidity?.toFixed(1) || 'N/A'}%</div>\n                                <div class=\"data-label\">Влажность</div>\n                            </div>\n                            <div class=\"data-item\">\n                                <div class=\"data-value\">${data.co2_level || 'N/A'}</div>\n                                <div class=\"data-label\">CO₂ ppm</div>\n                            </div>\n                            <div class=\"data-item\">\n                                <div class=\"data-value\">${data.ph_level?.toFixed(1) || 'N/A'}</div>\n                                <div class=\"data-label\">pH</div>\n                            </div>\n                        </div>\n                        <div style=\"text-align: center; margin-top: 10px; font-size: 12px; color: #666;\">\n                            Обновлено: ${new Date(data.timestamp * 1000).toLocaleTimeString()}\n                        </div>\n                    `;\n                } else {\n                    container.innerHTML = '<div class=\"error-message\">Ошибка загрузки данных: ' + \n                        (result.error || 'Неизвестная ошибка') + '</div>';\n                }\n            } catch (error) {\n                console.error('Ошибка загрузки данных фермы:', error);\n                const container = document.getElementById(`data-${farmIp}`);\n                container.innerHTML = '<div class=\"error-message\">Ошибка подключения</div>';\n            }\n        }\n\n        async function testConnection(farmIp) {\n            try {\n                const response = await fetch(`/api/farm/${farmIp}/test_connection`);\n                const result = await response.json();\n                \n                if (result.status === 'success') {\n                    alert(`Соединение с фермой ${farmIp}: ${result.connected ? 'УСПЕШНО' : 'НЕ УДАЛОСЬ'}`);\n                } else {\n                    alert('Ошибка тестирования: ' + result.message);\n                }\n            } catch (error) {\n                alert('Ошибка тестирования: ' + error.message);\n            }\n        }\n\n        function showFarmHistory(farmIp) {\n            // Простое решение - открываем в новом окне\n            const url = `/api/farm/${farmIp}/data/history?hours=24`;\n            window.open(url, '_blank');\n        }\n\n        function getStatusText(status) {\n            switch(status) {\n                case 'connected': return 'Подключена';\n                case 'disconnected': return 'Отключена';\n                case 'no_ip': return 'Нет IP';\n                default: return 'Неизвестно';\n            }\n        }\n\n        function showError(message) {\n            const container = document.getElementById('farms-container');\n            container.innerHTML = `<div class=\"error-message\">${message}</div>`;\n        }\n\n        async function logout() {\n            try {\n                await fetch('/api/logout', { method: 'POST' });\n                window.location.href = '/login';\n            } catch (error) {\n                console.error('Ошибка выхода:', error);\n                window.location.href = '/login';\n            }\n        }\n    </script>\n</body>\n</html>\n'''\n\nTAILSCALE_MOBILE_LOGIN_TEMPLATE = '''\n<!DOCTYPE html>\n<html lang=\"ru\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Вход - Фермы КУБ-1063</title>\n    <style>\n        body {\n            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;\n            margin: 0;\n            padding: 0;\n            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);\n            min-height: 100vh;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n        }\n        .login-container {\n            background: white;\n            padding: 40px;\n            border-radius: 15px;\n            box-shadow: 0 10px 30px rgba(0,0,0,0.2);\n            width: 100%;\n            max-width: 400px;\n        }\n        .login-header {\n            text-align: center;\n            margin-bottom: 30px;\n        }\n        .form-group {\n            margin-bottom: 20px;\n        }\n        label {\n            display: block;\n            margin-bottom: 5px;\n            font-weight: 500;\n            color: #333;\n        }\n        input[type=\"text\"], input[type=\"password\"] {\n            width: 100%;\n            padding: 12px;\n            border: 1px solid #ddd;\n            border-radius: 8px;\n            font-size: 16px;\n            box-sizing: border-box;\n        }\n        input[type=\"text\"]:focus, input[type=\"password\"]:focus {\n            outline: none;\n            border-color: #2196F3;\n            box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.2);\n        }\n        .btn {\n            width: 100%;\n            background: #2196F3;\n            color: white;\n            border: none;\n            padding: 12px;\n            border-radius: 8px;\n            font-size: 16px;\n            cursor: pointer;\n            transition: background 0.3s;\n        }\n        .btn:hover {\n            background: #1976D2;\n        }\n        .btn:disabled {\n            background: #ccc;\n            cursor: not-allowed;\n        }\n        .error-message {\n            background: #ffebee;\n            color: #c62828;\n            padding: 10px;\n            border-radius: 8px;\n            margin-bottom: 20px;\n        }\n        .info-text {\n            text-align: center;\n            margin-top: 20px;\n            color: #666;\n            font-size: 14px;\n        }\n    </style>\n</head>\n<body>\n    <div class=\"login-container\">\n        <div class=\"login-header\">\n            <h2>🏭 Фермы КУБ-1063</h2>\n            <p>Вход в систему мониторинга</p>\n        </div>\n        \n        <div id=\"error-message\" style=\"display: none;\"></div>\n        \n        <form id=\"login-form\">\n            <div class=\"form-group\">\n                <label for=\"username\">Имя пользователя:</label>\n                <input type=\"text\" id=\"username\" name=\"username\" required>\n            </div>\n            \n            <div class=\"form-group\">\n                <label for=\"password\">Пароль:</label>\n                <input type=\"password\" id=\"password\" name=\"password\" required>\n            </div>\n            \n            <button type=\"submit\" class=\"btn\" id=\"login-btn\">Войти</button>\n        </form>\n        \n        <div class=\"info-text\">\n            <p>Система работает через Tailscale mesh-сеть</p>\n            <p><small>Убедитесь, что Tailscale агент установлен и активен</small></p>\n        </div>\n    </div>\n\n    <script>\n        document.getElementById('login-form').addEventListener('submit', async function(e) {\n            e.preventDefault();\n            \n            const username = document.getElementById('username').value;\n            const password = document.getElementById('password').value;\n            const loginBtn = document.getElementById('login-btn');\n            const errorDiv = document.getElementById('error-message');\n            \n            // Отключаем кнопку\n            loginBtn.disabled = true;\n            loginBtn.textContent = 'Вход...';\n            errorDiv.style.display = 'none';\n            \n            try {\n                const response = await fetch('/api/login', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify({ username, password })\n                });\n                \n                const result = await response.json();\n                \n                if (result.status === 'success') {\n                    window.location.href = '/';\n                } else {\n                    errorDiv.innerHTML = `<div class=\"error-message\">${result.message}</div>`;\n                    errorDiv.style.display = 'block';\n                }\n            } catch (error) {\n                errorDiv.innerHTML = `<div class=\"error-message\">Ошибка подключения: ${error.message}</div>`;\n                errorDiv.style.display = 'block';\n            } finally {\n                loginBtn.disabled = false;\n                loginBtn.textContent = 'Войти';\n            }\n        });\n        \n        // Фокус на поле имени пользователя\n        document.getElementById('username').focus();\n    </script>\n</body>\n</html>\n'''\n\n# Создание файлов шаблонов\ndef create_templates():\n    \"\"\"Создание HTML шаблонов\"\"\"\n    templates_dir = os.path.join(os.path.dirname(__file__), 'templates')\n    os.makedirs(templates_dir, exist_ok=True)\n    \n    with open(os.path.join(templates_dir, 'tailscale_mobile_index.html'), 'w', encoding='utf-8') as f:\n        f.write(TAILSCALE_MOBILE_INDEX_TEMPLATE)\n    \n    with open(os.path.join(templates_dir, 'tailscale_mobile_login.html'), 'w', encoding='utf-8') as f:\n        f.write(TAILSCALE_MOBILE_LOGIN_TEMPLATE)\n    \n    logger.info(f\"Созданы HTML шаблоны в {templates_dir}\")\n\n# Главная функция\nasync def main():\n    \"\"\"Демонстрация мобильного приложения\"\"\"\n    \n    # Конфигурация\n    discovery_url = os.getenv('DISCOVERY_SERVICE_URL', 'http://localhost:8082')\n    tailscale_config = {\n        'tailnet': os.getenv('TAILNET', 'your-tailnet.ts.net'),\n        'api_key': os.getenv('TAILSCALE_API_KEY', 'tskey-api-xxx')\n    }\n    \n    # Создаем шаблоны\n    create_templates()\n    \n    # Создаем приложение\n    app = TailscaleMobileApp(discovery_url, tailscale_config)\n    \n    # Запускаем сервер\n    logger.info(\"Запуск Tailscale Mobile App...\")\n    app.run(host='0.0.0.0', port=5000, debug=False)\n\nif __name__ == \"__main__\":\n    # Настройка логирования\n    logging.basicConfig(\n        level=logging.INFO,\n        format='%(asctime)s [%(name)s] %(levelname)s - %(message)s'\n    )\n    \n    # Запуск приложения\n    asyncio.run(main())"