#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è Multi-Tenant —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π UnifiedKUBSystem
–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
"""

import json
import logging
from typing import Dict, Any, List, Optional, Tuple
from datetime import datetime
from multi_tenant_manager import MultiTenantManager

logger = logging.getLogger(__name__)

class MultiTenantUnifiedKUBSystem:
    """
    –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è UnifiedKUBSystem —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Multi-Tenant
    
    –î–æ–±–∞–≤–ª—è–µ—Ç:
    - –û–ø—Ä–æ—Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ä–∞–∑–Ω—ã–º Modbus Slave ID
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    - –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
    - –ê—É–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π —Å –ø—Ä–∏–≤—è–∑–∫–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    """
    
    def __init__(self, config_file: str = "config.json"):
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        from modbus.unified_system import UnifiedKUBSystem
        
        self.original_system = UnifiedKUBSystem(config_file)
        self.mt_manager = MultiTenantManager()
        self.config = self._load_config(config_file)
        
        # –ö—ç—à –¥–∞–Ω–Ω—ã—Ö –ø–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
        self.device_data_cache = {}
        self.last_poll_time = {}
        
        logger.info("üè≠ Multi-Tenant UnifiedKUBSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_file: str) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            return {}
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        self.original_system.start()
        logger.info("üöÄ Multi-Tenant —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.original_system.stop()
        logger.info("üõë Multi-Tenant —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    # =======================================================================
    # –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–ù–û–ñ–ï–°–¢–í–ï–ù–ù–´–ú–ò –£–°–¢–†–û–ô–°–¢–í–ê–ú–ò
    # =======================================================================
    
    def get_device_data(self, telegram_id: int, device_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not self.mt_manager.check_device_access(telegram_id, device_id, "read"):
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É {device_id}")
            return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        devices = self.mt_manager.get_user_devices(telegram_id)
        device = next((d for d in devices if d.device_id == device_id), None)
        
        if not device:
            logger.warning(f"‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
            return None
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Modbus Slave ID
            raw_data = self._read_device_data(device.modbus_slave_id)
            
            if raw_data:
                # –û–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
                enhanced_data = raw_data.copy()
                enhanced_data.update({
                    'device_id': device.device_id,
                    'device_name': device.device_name,
                    'organization_name': device.organization_name,
                    'location': device.location,
                    'modbus_slave_id': device.modbus_slave_id,
                    'access_level': device.access_level
                })
                
                # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
                self.mt_manager.log_device_access(telegram_id, device_id, "read_data", True)
                
                return enhanced_data
            else:
                logger.warning(f"‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id} (Slave ID: {device.modbus_slave_id})")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}: {e}")
            self.mt_manager.log_device_access(telegram_id, device_id, "read_data", False, str(e))
            return None
    
    def _read_device_data(self, modbus_slave_id: int) -> Optional[Dict[str, Any]]:
        """–ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ Modbus Slave ID"""
        
        # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö slave_id
        # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥, –Ω–æ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç:
        # return self.original_system.read_from_slave_id(modbus_slave_id)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        data = self.original_system.get_current_data()
        if data:
            # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
            data['modbus_slave_id'] = modbus_slave_id
            data['last_poll'] = datetime.now().isoformat()
        
        return data
    
    def get_all_user_devices_data(self, telegram_id: int) -> Dict[str, Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        devices = self.mt_manager.get_user_devices(telegram_id)
        all_data = {}
        
        for device in devices:
            device_data = self.get_device_data(telegram_id, device.device_id)
            if device_data:
                all_data[device.device_id] = device_data
        
        return all_data
    
    def execute_command_on_device(self, telegram_id: int, device_id: str, 
                                register: int, value: Any) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        devices = self.mt_manager.get_user_devices(telegram_id)
        device = next((d for d in devices if d.device_id == device_id), None)
        
        if not device:
            return False, f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ {device_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        valid, message = self.mt_manager.validate_write_command(
            telegram_id, device.modbus_slave_id, register, value
        )
        
        if not valid:
            return False, message
        
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ —ç—Ç–æ –±—É–¥–µ—Ç:
            # success = self.original_system.write_to_slave_id(device.modbus_slave_id, register, value)
            
            # –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è
            success, result = self.original_system.add_write_command(
                register=register,
                value=value,
                source_ip="multitenant_system",
                user_info=json.dumps({
                    "telegram_id": telegram_id,
                    "device_id": device_id,
                    "organization": device.organization_name
                })
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
            details = json.dumps({"register": register, "value": value, "result": result})
            self.mt_manager.log_device_access(telegram_id, device_id, "write_register", success, details)
            
            if success:
                return True, f"–ö–æ–º–∞–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device.device_name}"
            else:
                return False, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {result}"
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ {device_id}: {e}")
            self.mt_manager.log_device_access(telegram_id, device_id, "write_register", False, str(e))
            return False, f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"
    
    def reset_alarms_on_device(self, telegram_id: int, device_id: str) -> Tuple[bool, str]:
        """–°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"""
        return self.execute_command_on_device(telegram_id, device_id, 0x0020, 1)
    
    # =======================================================================
    # –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò –ú–û–ù–ò–¢–û–†–ò–ù–ì
    # =======================================================================
    
    def get_organization_statistics(self, telegram_id: int, organization_code: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"""
        
        organizations = self.mt_manager.get_user_organizations(telegram_id)
        
        if organization_code:
            org = next((o for o in organizations if o['code'] == organization_code), None)
            if not org:
                return {"error": f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è {organization_code} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        devices = self.mt_manager.get_user_devices(telegram_id)
        
        if organization_code:
            devices = [d for d in devices if d.organization_name == org['name']]
        
        stats = {
            "organization_count": len(organizations),
            "device_count": len(devices),
            "devices_online": 0,
            "devices_with_alarms": 0,
            "total_read_operations": 0,
            "total_write_operations": 0,
            "last_update": datetime.now().isoformat()
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for device in devices:
            device_data = self.get_device_data(telegram_id, device.device_id)
            if device_data:
                stats["devices_online"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤–∞—Ä–∏–∏
                if device_data.get('active_alarms', 0) > 0:
                    stats["devices_with_alarms"] += 1
        
        return stats
    
    def get_device_history(self, telegram_id: int, device_id: str, 
                          hours: int = 24) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ–ø–µ—Ä–∞—Ü–∏–π —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º"""
        
        if not self.mt_manager.check_device_access(telegram_id, device_id, "read"):
            return []
        
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT dal.*, u.first_name, u.last_name, u.username
                    FROM device_access_log dal
                    JOIN users u ON dal.user_id = u.id
                    JOIN kub_devices kd ON dal.device_id = kd.id
                    WHERE kd.device_id = ? 
                    AND dal.timestamp > datetime('now', '-{} hours')
                    ORDER BY dal.timestamp DESC
                    LIMIT 100
                """.format(hours), (device_id,))
                
                history = []
                for row in cursor.fetchall():
                    history.append({
                        "timestamp": row["timestamp"],
                        "action": row["action"],
                        "user_name": f"{row['first_name']} {row['last_name']}".strip() or row["username"],
                        "success": bool(row["success"]),
                        "details": row["details"]
                    })
                
                return history
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}: {e}")
            return []
    
    # =======================================================================
    # –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –° –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–û–ô
    # =======================================================================
    
    def get_current_data(self) -> Optional[Dict[str, Any]]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞—Ä—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏)"""
        return self.original_system.get_current_data()
    
    def get_system_statistics(self) -> Dict[str, Any]:
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∏—Å—Ç–µ–º—ã"""
        original_stats = self.original_system.get_system_statistics()
        
        # –î–æ–±–∞–≤–ª—è–µ–º multi-tenant —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        mt_stats = {
            "multitenant_enabled": True,
            "total_organizations": self._count_organizations(),
            "total_devices": self._count_devices(),
            "total_users": self._count_users()
        }
        
        original_stats.update(mt_stats)
        return original_stats
    
    def _count_organizations(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM organizations WHERE is_active = 1")
                return cursor.fetchone()[0]
        except:
            return 0
    
    def _count_devices(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM kub_devices WHERE is_active = 1")
                return cursor.fetchone()[0]
        except:
            return 0
    
    def _count_users(self) -> int:
        """–ü–æ–¥—Å—á–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            import sqlite3
            with sqlite3.connect(self.mt_manager.db_file) as conn:
                cursor = conn.execute("SELECT COUNT(*) FROM users WHERE is_active = 1")
                return cursor.fetchone()[0]
        except:
            return 0

# =============================================================================
# –ê–î–ê–ü–¢–ï–† –î–õ–Ø TELEGRAM BOT
# =============================================================================

class TelegramBotMultiTenantAdapter:
    """
    –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Multi-Tenant —Å–∏—Å—Ç–µ–º—ã —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º Telegram Bot
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –±–æ—Ç–µ
    """
    
    def __init__(self):
        self.mt_system = MultiTenantUnifiedKUBSystem()
        self.mt_manager = self.mt_system.mt_manager
    
    def get_user_context_data(self, telegram_id: int, device_id: str = None) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        if device_id:
            # –î–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            return self.mt_system.get_device_data(telegram_id, device_id)
        else:
            # –î–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            devices = self.mt_manager.get_user_devices(telegram_id)
            
            if len(devices) == 1:
                # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–¥–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ
                return self.mt_system.get_device_data(telegram_id, devices[0].device_id)
            else:
                # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–≤–æ–¥–∫—É
                return {
                    "multitenant": True,
                    "device_count": len(devices),
                    "organizations": [d.organization_name for d in devices],
                    "devices": [{"id": d.device_id, "name": d.device_name} for d in devices]
                }
    
    def format_device_selection_text(self, telegram_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        devices = self.mt_manager.get_user_devices(telegram_id)
        
        if not devices:
            return "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"
        
        if len(devices) == 1:
            device = devices[0]
            return f"üì¶ **{device.device_name}**\nüè¢ {device.organization_name}"
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        orgs = {}
        for device in devices:
            if device.organization_name not in orgs:
                orgs[device.organization_name] = []
            orgs[device.organization_name].append(device)
        
        text = f"üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ({len(devices)}):**\n\n"
        
        for org_name, org_devices in orgs.items():
            text += f"üè¢ **{org_name}**\n"
            for device in org_devices:
                access_icon = {"read": "üëÅÔ∏è", "write": "‚úèÔ∏è", "admin": "‚öôÔ∏è"}.get(device.access_level, "‚ùì")
                text += f"  {access_icon} {device.device_name}"
                if device.location:
                    text += f" ({device.location})"
                text += "\n"
            text += "\n"
        
        return text.strip()

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò
# =============================================================================

def test_multitenant_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ multi-tenant —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multi-Tenant –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É
        mt_system = MultiTenantUnifiedKUBSystem()
        
        # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        print("1. –¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
        print("   ‚úÖ Multi-Tenant —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
        # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        print("2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞...")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_id = 123456789
        mt_system.mt_manager.register_user(telegram_id, "test_user", "Test", "User")
        mt_system.mt_manager.add_user_to_organization(telegram_id, "IVANOV_FARM", "operator")
        
        devices = mt_system.mt_manager.get_user_devices(telegram_id)
        if devices:
            device = devices[0]
            data = mt_system.get_device_data(telegram_id, device.device_id)
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device.device_id}")
        else:
            print("   ‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        # –¢–µ—Å—Ç 3: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print("3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = mt_system.get_system_statistics()
        print(f"   ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats.get('total_organizations', 0)} –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π, {stats.get('total_devices', 0)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        # –¢–µ—Å—Ç 4: –ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è Telegram Bot
        print("4. –¢–µ—Å—Ç –∞–¥–∞–ø—Ç–µ—Ä–∞ –¥–ª—è Telegram Bot...")
        adapter = TelegramBotMultiTenantAdapter()
        text = adapter.format_device_selection_text(telegram_id)
        print(f"   ‚úÖ –ê–¥–∞–ø—Ç–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {len(text)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –ø—Ä–æ–π–¥–µ–Ω—ã!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

if __name__ == "__main__":
    test_multitenant_integration()