#!/usr/bin/env python3
"""
Multi-Tenant Manager –¥–ª—è CUBE_RS
–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import sqlite3
import json
import logging
from typing import List, Dict, Any, Optional, Tuple
from datetime import datetime
from pathlib import Path

logger = logging.getLogger(__name__)

class Device:
    """–ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ö–£–ë-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–∏—Å—Ç–µ–º–µ"""
    
    def __init__(self, device_id: str, device_name: str, modbus_slave_id: int, 
                 organization_name: str, location: str = None, access_level: str = "read"):
        self.device_id = device_id
        self.device_name = device_name
        self.modbus_slave_id = modbus_slave_id
        self.organization_name = organization_name
        self.location = location
        self.access_level = access_level
    
    def __str__(self):
        location_str = f" ({self.location})" if self.location else ""
        return f"{self.device_name}{location_str} - {self.organization_name}"

class MultiTenantManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–Ω–æ–≥–æ–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –ö–£–ë-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    
    –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
    - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    - –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º–∏ –∏ —Ä–æ–ª—è–º–∏
    - –ê—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
    """
    
    def __init__(self, db_file: str = "cube_multitenant.db"):
        self.db_file = db_file
        self._ensure_database_exists()
        logger.info(f"üè¢ MultiTenantManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –±–∞–∑–æ–π {db_file}")
    
    def _ensure_database_exists(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"""
        if not Path(self.db_file).exists():
            logger.info("üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ multi-tenant –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            self._create_database()
    
    def _create_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü multi-tenant —Å–∏—Å—Ç–µ–º—ã"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç SQL –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞
        # –î–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ç–∏ –ø–æ–∫–∞–∑—ã–≤–∞—é –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        
        sql_commands = [
            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            """CREATE TABLE IF NOT EXISTS organizations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT NOT NULL,
                code TEXT UNIQUE NOT NULL,
                description TEXT,
                contact_person TEXT,
                phone TEXT,
                email TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )""",
            
            # –ö–£–ë-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            """CREATE TABLE IF NOT EXISTS kub_devices (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                organization_id INTEGER NOT NULL,
                device_id TEXT UNIQUE NOT NULL,
                device_name TEXT NOT NULL,
                modbus_slave_id INTEGER NOT NULL,
                location TEXT,
                serial_number TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1,
                FOREIGN KEY (organization_id) REFERENCES organizations (id)
            )""",
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            """CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                email TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1
            )""",
            
            # –†–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
            """CREATE TABLE IF NOT EXISTS user_organization_roles (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                organization_id INTEGER NOT NULL,
                role TEXT NOT NULL,
                granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (organization_id) REFERENCES organizations (id),
                UNIQUE(user_id, organization_id, role)
            )""",
            
            # –î–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º
            """CREATE TABLE IF NOT EXISTS user_device_access (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                device_id INTEGER NOT NULL,
                access_level TEXT NOT NULL,
                granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_active INTEGER DEFAULT 1,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (device_id) REFERENCES kub_devices (id)
            )""",
            
            # –ê—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–∞
            """CREATE TABLE IF NOT EXISTS device_access_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER NOT NULL,
                device_id INTEGER NOT NULL,
                action TEXT NOT NULL,
                details TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                success INTEGER NOT NULL,
                FOREIGN KEY (user_id) REFERENCES users (id),
                FOREIGN KEY (device_id) REFERENCES kub_devices (id)
            )""",
            
            # –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
            """CREATE VIEW IF NOT EXISTS user_device_permissions AS
            SELECT DISTINCT
                u.telegram_id,
                kd.device_id,
                kd.device_name,
                kd.modbus_slave_id,
                kd.location,
                o.name as organization_name,
                COALESCE(uda.access_level, 'read') as access_level
            FROM users u
            JOIN user_organization_roles uor ON u.id = uor.user_id
            JOIN organizations o ON uor.organization_id = o.id
            JOIN kub_devices kd ON o.id = kd.organization_id
            LEFT JOIN user_device_access uda ON u.id = uda.user_id AND kd.id = uda.device_id AND uda.is_active = 1
            WHERE u.is_active = 1 AND uor.is_active = 1 AND o.is_active = 1 AND kd.is_active = 1"""
        ]
        
        try:
            with sqlite3.connect(self.db_file) as conn:
                for sql in sql_commands:
                    conn.execute(sql)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
                self._insert_demo_data(conn)
                
                logger.info("‚úÖ Multi-tenant –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def _insert_demo_data(self, conn):
        """–í—Å—Ç–∞–≤–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            conn.executemany("""
                INSERT OR IGNORE INTO organizations (name, code, description, contact_person, phone) VALUES (?, ?, ?, ?, ?)
            """, [
                ('–§–µ—Ä–º–∞ –ò–≤–∞–Ω–æ–≤–∞', 'IVANOV_FARM', '–ü—Ç–∏—Ü–µ–≤–æ–¥—á–µ—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ', '–ò–≤–∞–Ω–æ–≤ –ò.–ò.', '+7-900-123-45-67'),
                ('–ê–≥—Ä–æ—Ö–æ–ª–¥–∏–Ω–≥ –°–∏–±–∏—Ä—å', 'AGRO_SIBERIA', '–ö—Ä—É–ø–Ω–æ–µ –∞–≥—Ä–æ–ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏–µ', '–ü–µ—Ç—Ä–æ–≤ –ü.–ü.', '+7-900-234-56-78'),
                ('–¢–µ–ø–ª–∏—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –Æ–≥', 'GREENHOUSE_SOUTH', '–¢–µ–ø–ª–∏—á–Ω–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ', '–°–∏–¥–æ—Ä–æ–≤–∞ –°.–°.', '+7-900-345-67-89')
            ])
            
            # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            conn.executemany("""
                INSERT OR IGNORE INTO kub_devices (organization_id, device_id, device_name, modbus_slave_id, location, serial_number) VALUES (?, ?, ?, ?, ?, ?)
            """, [
                (1, 'IVANOV_KUB_01', '–ü—Ç–∏—á–Ω–∏–∫ ‚Ññ1', 1, '–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ—Ä–ø—É—Å', 'KUB1063-2024-001'),
                (1, 'IVANOV_KUB_02', '–ü—Ç–∏—á–Ω–∏–∫ ‚Ññ2', 2, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ—Ä–ø—É—Å', 'KUB1063-2024-002'),
                (2, 'AGRO_KUB_A1', '–ò–Ω–∫—É–±–∞—Ç–æ—Ä –ê1', 3, '–¶–µ—Ö –ê', 'KUB1063-2024-003'),
                (2, 'AGRO_KUB_A2', '–ò–Ω–∫—É–±–∞—Ç–æ—Ä –ê2', 4, '–¶–µ—Ö –ê', 'KUB1063-2024-004'),
                (3, 'GREEN_KUB_01', '–¢–µ–ø–ª–∏—Ü–∞ ‚Ññ1', 5, '–ë–ª–æ–∫ 1', 'KUB1063-2024-005')
            ])
            
            logger.info("‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
    
    # =======================================================================
    # –û–°–ù–û–í–ù–´–ï –ú–ï–¢–û–î–´ –î–û–°–¢–£–ü–ê
    # =======================================================================
    
    def get_user_devices(self, telegram_id: int) -> List[Device]:
        """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT device_id, device_name, modbus_slave_id, location, organization_name, access_level
                    FROM user_device_permissions 
                    WHERE telegram_id = ?
                    ORDER BY organization_name, device_name
                """, (telegram_id,))
                
                devices = []
                for row in cursor.fetchall():
                    devices.append(Device(
                        device_id=row['device_id'],
                        device_name=row['device_name'],
                        modbus_slave_id=row['modbus_slave_id'],
                        organization_name=row['organization_name'],
                        location=row['location'],
                        access_level=row['access_level']
                    ))
                
                return devices
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return []
    
    def check_device_access(self, telegram_id: int, device_id: str, required_access: str = "read") -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    SELECT access_level 
                    FROM user_device_permissions 
                    WHERE telegram_id = ? AND device_id = ?
                """, (telegram_id, device_id))
                
                result = cursor.fetchone()
                if not result:
                    return False
                
                user_access = result[0]
                
                # –ò–µ—Ä–∞—Ä—Ö–∏—è –¥–æ—Å—Ç—É–ø–∞: admin > write > read
                access_hierarchy = {'read': 1, 'write': 2, 'admin': 3}
                
                user_level = access_hierarchy.get(user_access, 0)
                required_level = access_hierarchy.get(required_access, 0)
                
                return user_level >= required_level
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞ {telegram_id} –∫ {device_id}: {e}")
            return False
    
    def get_device_by_slave_id(self, modbus_slave_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –ø–æ Modbus Slave ID"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT kd.*, o.name as organization_name 
                    FROM kub_devices kd
                    JOIN organizations o ON kd.organization_id = o.id
                    WHERE kd.modbus_slave_id = ? AND kd.is_active = 1
                """, (modbus_slave_id,))
                
                result = cursor.fetchone()
                return dict(result) if result else None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ Slave ID {modbus_slave_id}: {e}")
            return None
    
    def log_device_access(self, telegram_id: int, device_id: str, action: str, 
                         success: bool, details: str = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –ü–æ–ª—É—á–∞–µ–º user_id –∏ device_internal_id
                cursor = conn.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
                user_result = cursor.fetchone()
                if not user_result:
                    return
                
                cursor = conn.execute("SELECT id FROM kub_devices WHERE device_id = ?", (device_id,))
                device_result = cursor.fetchone()
                if not device_result:
                    return
                
                conn.execute("""
                    INSERT INTO device_access_log (user_id, device_id, action, details, success)
                    VALUES (?, ?, ?, ?, ?)
                """, (user_result[0], device_result[0], action, details, success))
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞: {e}")
    
    # =======================================================================
    # –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø –û–†–ì–ê–ù–ò–ó–ê–¶–ò–Ø–ú–ò –ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    # =======================================================================
    
    def register_user(self, telegram_id: int, username: str = None, 
                     first_name: str = None, last_name: str = None) -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ multi-tenant —Å–∏—Å—Ç–µ–º–µ"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.execute("""
                    INSERT OR REPLACE INTO users (telegram_id, username, first_name, last_name)
                    VALUES (?, ?, ?, ?)
                """, (telegram_id, username, first_name, last_name))
                
                logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ multi-tenant —Å–∏—Å—Ç–µ–º–µ")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return False
    
    def add_user_to_organization(self, telegram_id: int, organization_code: str, 
                                role: str = "operator") -> bool:
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                cursor = conn.execute("SELECT id FROM users WHERE telegram_id = ?", (telegram_id,))
                user_result = cursor.fetchone()
                if not user_result:
                    return False
                
                cursor = conn.execute("SELECT id FROM organizations WHERE code = ?", (organization_code,))
                org_result = cursor.fetchone()
                if not org_result:
                    return False
                
                conn.execute("""
                    INSERT OR REPLACE INTO user_organization_roles (user_id, organization_id, role)
                    VALUES (?, ?, ?)
                """, (user_result[0], org_result[0], role))
                
                logger.info(f"üè¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {organization_code} —Å —Ä–æ–ª—å—é {role}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {e}")
            return False
    
    def get_user_organizations(self, telegram_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT o.name, o.code, o.description, uor.role
                    FROM organizations o
                    JOIN user_organization_roles uor ON o.id = uor.organization_id
                    JOIN users u ON uor.user_id = u.id
                    WHERE u.telegram_id = ? AND uor.is_active = 1 AND o.is_active = 1
                    ORDER BY o.name
                """, (telegram_id,))
                
                return [dict(row) for row in cursor.fetchall()]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return []
    
    # =======================================================================
    # –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° –°–£–©–ï–°–¢–í–£–Æ–©–ï–ô –°–ò–°–¢–ï–ú–û–ô
    # =======================================================================
    
    def filter_data_for_user(self, telegram_id: int, modbus_slave_id: int, 
                            data: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–æ Modbus Slave ID
        device = self.get_device_by_slave_id(modbus_slave_id)
        if not device:
            logger.warning(f"‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å Slave ID {modbus_slave_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return None
        
        device_id = device['device_id']
        
        if not self.check_device_access(telegram_id, device_id, "read"):
            logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É {device_id}")
            return None
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø
        self.log_device_access(telegram_id, device_id, "read_data", True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∫ –¥–∞–Ω–Ω—ã–º
        enhanced_data = data.copy()
        enhanced_data.update({
            'device_id': device_id,
            'device_name': device['device_name'],
            'organization_name': device['organization_name'],
            'location': device['location']
        })
        
        return enhanced_data
    
    def validate_write_command(self, telegram_id: int, modbus_slave_id: int, 
                             register: int, value: Any) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏ –ø–æ –ø—Ä–∞–≤–∞–º –¥–æ—Å—Ç—É–ø–∞"""
        
        device = self.get_device_by_slave_id(modbus_slave_id)
        if not device:
            return False, f"–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å Slave ID {modbus_slave_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        
        device_id = device['device_id']
        
        if not self.check_device_access(telegram_id, device_id, "write"):
            return False, f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device['device_name']}"
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –∑–∞–ø–∏—Å–∏
        details = json.dumps({"register": register, "value": value})
        self.log_device_access(telegram_id, device_id, "write_register", True, details)
        
        return True, "–î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω"

# =============================================================================
# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° TELEGRAM BOT
# =============================================================================

class MultiTenantTelegramMixin:
    """Mixin –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ multi-tenant —Ñ—É–Ω–∫—Ü–∏–π –≤ Telegram Bot"""
    
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.mt_manager = MultiTenantManager()
    
    def get_user_device_list_text(self, telegram_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è Telegram"""
        devices = self.mt_manager.get_user_devices(telegram_id)
        
        if not devices:
            return "‚ùå **–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º**\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
        
        text = f"üè≠ **–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(devices)}):**\n\n"
        
        current_org = None
        for device in devices:
            if device.organization_name != current_org:
                current_org = device.organization_name
                text += f"üè¢ **{current_org}**\n"
            
            access_icon = {"read": "üëÅÔ∏è", "write": "‚úèÔ∏è", "admin": "‚öôÔ∏è"}.get(device.access_level, "‚ùì")
            text += f"  {access_icon} `{device.device_id}` - {device.device_name}\n"
            if device.location:
                text += f"    üìç {device.location}\n"
            text += "\n"
        
        return text
    
    def format_device_data_with_context(self, telegram_id: int, modbus_slave_id: int, 
                                       data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        
        filtered_data = self.mt_manager.filter_data_for_user(telegram_id, modbus_slave_id, data)
        if not filtered_data:
            return "‚ùå **–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞**"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        from bot_utils import format_sensor_data
        
        formatted = format_sensor_data(filtered_data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        device_info = (
            f"üè≠ **{filtered_data['organization_name']}**\n"
            f"üì¶ **{filtered_data['device_name']}**"
        )
        
        if filtered_data.get('location'):
            device_info += f"\nüìç {filtered_data['location']}"
        
        return f"{device_info}\n\n{formatted}"

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø
# =============================================================================

def test_multi_tenant_system():
    """–¢–µ—Å—Ç multi-tenant —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Multi-Tenant —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        test_db = "test_multitenant.db"
        if Path(test_db).exists():
            Path(test_db).unlink()
        
        mt = MultiTenantManager(test_db)
        
        # –¢–µ—Å—Ç 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("1. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        success = mt.register_user(123456789, "test_farmer", "–¢–µ—Å—Ç", "–§–µ—Ä–º–µ—Ä")
        print(f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é
        print("2. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é...")
        success = mt.add_user_to_organization(123456789, "IVANOV_FARM", "owner")
        print(f"   –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        print("3. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤...")
        devices = mt.get_user_devices(123456789)
        print(f"   –£—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {len(devices)}")
        for device in devices:
            print(f"     - {device}")
        
        # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
        print("4. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞...")
        has_access = mt.check_device_access(123456789, "IVANOV_KUB_01", "read")
        print(f"   –î–æ—Å—Ç—É–ø –∫ IVANOV_KUB_01: {'‚úÖ' if has_access else '‚ùå'}")
        
        # –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—É–∂–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        print("5. –¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á—É–∂–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É...")
        no_access = mt.check_device_access(123456789, "AGRO_KUB_A1", "read")
        print(f"   –î–æ—Å—Ç—É–ø –∫ —á—É–∂–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: {'‚ùå' if not no_access else '‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø!'}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã multi-tenant —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        Path(test_db).unlink()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    test_multi_tenant_system()