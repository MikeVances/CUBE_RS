#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ö–£–ë-1063
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç UnifiedKUBSystem –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥
"""

import os
import sys
import json
import logging
import asyncio
from typing import Dict, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# Telegram Bot imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from modbus.unified_system import UnifiedKUBSystem
from bot_database import TelegramBotDB
from bot_permissions import check_user_permission, get_user_access_level
from bot_utils import (
    format_sensor_data, format_system_stats, build_main_menu, send_typing_action, error_message
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class KUBTelegramBot:
    """Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–£–ë-1063"""
    
    def __init__(self, token: str, config_file: str = "config/telegram_bot.json"):
        self.token = token
        self.config = self._load_config(config_file)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.kub_system = None
        self.bot_db = TelegramBotDB()
        
        # Telegram Application
        self.application = None
        
        logger.info("ü§ñ KUBTelegramBot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_file: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º defaults")
            return {
                "allowed_users": [],
                "admin_users": [],
                "default_access_level": "user",
                "command_timeout": 30,
                "max_message_length": 4000
            }
    
    async def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedKUBSystem"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedKUBSystem...")
            self.kub_system = UnifiedKUBSystem()
            self.kub_system.start()
            logger.info("‚úÖ UnifiedKUBSystem –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
    # =======================================================================
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.bot_db.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–£–ë-1063 Control Bot.\n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <b>{access_level}</b>.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
        )
        await update.message.reply_text(welcome_text, reply_markup=menu, parse_mode="HTML")
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_user_permission(user.id, "read", self.bot_db):
            await update.message.reply_text(error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"), parse_mode="HTML")
            return

        try:
            await send_typing_action(update, context)
            data = self.kub_system.get_current_data()
            if not data:
                await update.message.reply_text(error_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ö–£–ë-1063"), parse_mode="HTML")
                return
            status_text = format_sensor_data(data)
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            await update.message.reply_text(
                status_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
            self.bot_db.log_user_command(user.id, "read", None, True)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            await update.message.reply_text(error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"), parse_mode="HTML")
    
    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        user = update.effective_user

        if not check_user_permission(user.id, "read", self.bot_db):
            await update.message.reply_text(error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"), parse_mode="HTML")
            return

        try:
            await send_typing_action(update, context)
            stats = self.kub_system.get_system_statistics()
            stats_text = format_system_stats(stats)
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            await update.message.reply_text(
                stats_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(error_message(f"–û—à–∏–±–∫–∞: {str(e)}"), parse_mode="HTML")
    
    async def cmd_reset_alarms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            await update.message.reply_text(error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"), parse_mode="HTML")
            return

        try:
            await send_typing_action(update, context)
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reset_alarms_confirmed")],
                [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
            ])
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏?",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π: {e}")
            await update.message.reply_text(error_message(f"–û—à–∏–±–∫–∞: {str(e)}"), parse_mode="HTML")

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        user = update.effective_user
        access_level = get_user_access_level(user.id, self.bot_db)
        help_text = (
            "‚ÑπÔ∏è <b>–°–ü–†–ê–í–ö–ê –ü–û –ö–û–ú–ê–ù–î–ê–ú –ö–£–ë-1063 BOT</b>\n\n"
            "‚Ä¢ <b>/start</b> ‚Äî –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ <b>/status</b> ‚Äî –ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤ üå°Ô∏è\n"
            "‚Ä¢ <b>/stats</b> ‚Äî –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã üìä\n"
            "‚Ä¢ <b>/help</b> ‚Äî –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            f"–í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <b>{access_level}</b>\n"
            f"{self._get_access_info(access_level)}\n\n"
            "<i>–î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.</i>"
        )
        menu = build_main_menu(access_level)
        await update.message.reply_text(help_text, parse_mode='HTML', reply_markup=menu)

    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK'–û–í (–ö–ù–û–ü–û–ö)
    # =======================================================================

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        user = query.from_user
        data = query.data

        if data == "refresh_status":
            await self._handle_refresh_status(query, context)
        elif data == "show_stats":
            await self._handle_refresh_stats(query, context)
        elif data == "refresh_stats":
            await self._handle_refresh_stats(query, context)
        elif data == "reset_alarms":
            await self._handle_reset_alarms(query, context)
        elif data == "reset_alarms_confirmed":
            await self._handle_confirm_reset_alarms(query, context)
        elif data == "main_menu":
            await self._handle_main_menu(query, context)
        else:
            await query.edit_message_text(error_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"), parse_mode="HTML")

    async def _handle_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        await query.edit_message_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=menu,
            parse_mode="HTML"
        )

    async def _handle_refresh_status(self, query, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        user = query.from_user
        try:
            await send_typing_action(query, context)
            data = self.kub_system.get_current_data()
            status_text = format_sensor_data(data) if data else error_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            await query.edit_message_text(
                status_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
        except Exception as e:
            await query.edit_message_text(error_message(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {str(e)}"), parse_mode="HTML")

    async def _handle_refresh_stats(self, query, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = query.from_user
        try:
            await send_typing_action(query, context)
            stats = self.kub_system.get_system_statistics()
            stats_text = format_system_stats(stats)
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            await query.edit_message_text(
                stats_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
        except Exception as e:
            await query.edit_message_text(error_message(f"–û—à–∏–±–∫–∞: {str(e)}"), parse_mode="HTML")

    async def _handle_reset_alarms(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π"""
        user = query.from_user
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            await query.edit_message_text(error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"), parse_mode="HTML")
            return
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reset_alarms_confirmed")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ])
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏?",
            reply_markup=keyboard,
            parse_mode="HTML"
        )

    async def _handle_confirm_reset_alarms(self, query, context):
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        user = query.from_user
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            await query.edit_message_text(error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"), parse_mode="HTML")
            return
        try:
            await send_typing_action(query, context)
            success, result = self.kub_system.add_write_command(
                register=0x0020,
                value=1,
                source_ip="telegram_bot",
                user_info=json.dumps({
                    "telegram_id": user.id,
                    "username": user.username,
                    "source": "telegram_bot_button"
                })
            )
            if success:
                await query.edit_message_text(
                    "üîÑ –í—Å–µ –∞–≤–∞—Ä–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.",
                    parse_mode="HTML"
                )
                self.bot_db.log_user_command(user.id, "write", "0x0020", True)
            else:
                await query.edit_message_text(error_message(f"–û—à–∏–±–∫–∞: {result}"), parse_mode="HTML")
        except Exception as e:
            await query.edit_message_text(error_message(f"–û—à–∏–±–∫–∞: {str(e)}"), parse_mode="HTML")

    def _get_access_info(self, access_level: str) -> str:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∞–≤–∞—Ö –¥–æ—Å—Ç—É–ø–∞"""
        access_info = {
            'user': "üëÄ <b>–î–æ—Å—Ç—É–ø:</b> —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π",
            'operator': "üîß <b>–î–æ—Å—Ç—É–ø:</b> —á—Ç–µ–Ω–∏–µ + —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π",
            'admin': "‚öôÔ∏è <b>–î–æ—Å—Ç—É–ø:</b> —á—Ç–µ–Ω–∏–µ + —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ + –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
            'engineer': "üõ†Ô∏è <b>–î–æ—Å—Ç—É–ø:</b> –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º"
        }
        return access_info.get(access_level, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞")

    # =======================================================================
    # –ó–ê–ü–£–°–ö –ë–û–¢–ê
    # =======================================================================

    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Telegram Bot"""
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            if not await self.initialize_system():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
                return False

            # –°–æ–∑–¥–∞—ë–º Telegram Application
            self.application = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.cmd_start))
            self.application.add_handler(CommandHandler("status", self.cmd_status))
            self.application.add_handler(CommandHandler("stats", self.cmd_stats))
            self.application.add_handler(CommandHandler("reset", self.cmd_reset_alarms))
            self.application.add_handler(CommandHandler("help", self.cmd_help))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))

            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.application.updater.start_polling(drop_pending_updates=True)

            # –ñ–¥—ë–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            await self.application.updater.idle()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Telegram Bot...")

            if self.application:
                if self.application.updater.running:
                    await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()

            if self.kub_system:
                self.kub_system.stop()

            logger.info("üõë Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
    from telegram_bot.secure_config import SecureConfig
    config = SecureConfig()
    token = config.get_bot_token()

    if not token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ–∫–µ–Ω: export TELEGRAM_BOT_TOKEN='your_token_here'")
        return

    # –°–æ–∑–¥–∞—ë–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = KUBTelegramBot(token)

    try:
        await bot.start_bot()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await bot.stop_bot()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop_bot()

if __name__ == "__main__":
    print("ü§ñ TELEGRAM BOT –î–õ–Ø –ö–£–ë-1063")
    print("=" * 50)
    asyncio.run(main())