#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã CUBE_RS —Å–∏—Å—Ç–µ–º—ã
"""
import sys
import os
import unittest
import time
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

class TestSystemIntegration(unittest.TestCase):
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    def setUp(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–∞–º–∏"""
        self.gateway_url = "http://localhost:8000"
        self.web_app_url = "http://localhost:5000"
        self.websocket_url = "ws://localhost:8765"
    
    def test_services_availability(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        services = [
            ("Gateway", self.gateway_url),
            ("Web App", self.web_app_url)
        ]
        
        for service_name, url in services:
            try:
                response = requests.get(url, timeout=5)
                print(f"‚úì {service_name}: –¥–æ—Å—Ç—É–ø–µ–Ω (—Å—Ç–∞—Ç—É—Å {response.status_code})")
            except requests.RequestException as e:
                print(f"‚ö† {service_name}: –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω ({e})")

class TestDataFlow(unittest.TestCase):
    """–¢–µ—Å—Ç—ã –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö"""
    
    def test_database_connectivity(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö"""
        try:
            import sqlite3
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ë–î
            db_path = project_root / "kub_data.db"
            if db_path.exists():
                conn = sqlite3.connect(str(db_path))
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
                tables = cursor.fetchall()
                conn.close()
                print(f"‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö kub_data.db: {len(tables)} —Ç–∞–±–ª–∏—Ü")
            else:
                print("‚ö† –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö kub_data.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            self.fail(f"Database connectivity test failed: {e}")

if __name__ == '__main__':
    print("üß™ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ CUBE_RS")
    print("=" * 50)
    unittest.main(verbosity=2)