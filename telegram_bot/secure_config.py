#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
"""

import json
import os
import getpass
import logging
from pathlib import Path
from typing import Optional

logger = logging.getLogger(__name__)

class SecureConfig:
    """–ö–ª–∞—Å—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –∏ —Å–µ–∫—Ä–µ—Ç–∞–º–∏"""
    
    def __init__(self):
        # config/ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞, –∞ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ telegram_bot/
        project_root = Path(__file__).parent.parent
        self.config_dir = project_root / "config" 
        self.secrets_file = self.config_dir / "bot_secrets.json"
        self._token_cache = None
    
    def get_bot_token(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏"""
        
        # –°–ø–æ—Å–æ–± 1: –ò–∑ –∫—ç—à–∞ (–µ—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
        if self._token_cache:
            return self._token_cache
        
        # –°–ø–æ—Å–æ–± 2: –ò–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        token = self._load_token_from_file()
        if token:
            self._token_cache = token
            return token
        
        # –°–ø–æ—Å–æ–± 3: –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥
        token = self._prompt_for_token()
        if token:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω
            if self._ask_save_token():
                self._save_token_to_file(token)
            self._token_cache = token
            return token
        
        # –°–ø–æ—Å–æ–± 4: –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∞—Ä–∏–∞–Ω—Ç)
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if token:
            logger.warning("‚ö†Ô∏è –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            self._token_cache = token
            return token
        
        return None
    
    def _load_token_from_file(self) -> Optional[str]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            if not self.secrets_file.exists():
                return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É
            file_stat = self.secrets_file.stat()
            file_mode = oct(file_stat.st_mode)[-3:]
            
            if file_mode != '600':
                logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {self.secrets_file} –∏–º–µ–µ—Ç –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {file_mode}")
            
            with open(self.secrets_file, 'r', encoding='utf-8') as f:
                secrets = json.load(f)
            
            token = secrets.get('telegram', {}).get('bot_token')
            if token and token != "YOUR_BOT_TOKEN_HERE":
                logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∑–∞—â–∏—â—ë–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                return token
            
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤: {e}")
            return None
    
    def _prompt_for_token(self) -> Optional[str]:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤–≤–æ–¥ —Ç–æ–∫–µ–Ω–∞"""
        print("\nüîë –ë–ï–ó–û–ü–ê–°–ù–´–ô –í–í–û–î –¢–û–ö–ï–ù–ê –ë–û–¢–ê")
        print("=" * 40)
        print("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.")
        print("–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram:")
        print("1. –ù–∞–ø–∏—à–∏—Ç–µ @BotFather")
        print("2. /newbot - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ –±–æ—Ç–∞")
        print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω")
        print("\n(–í–≤–æ–¥ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)")
        
        try:
            token = getpass.getpass("ü§ñ Bot Token: ").strip()
            
            if not token:
                return None
            
            # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
            if not self._validate_token_format(token):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞")
                return None
            
            return token
            
        except KeyboardInterrupt:
            print("\n‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω")
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞: {e}")
            return None
    
    def _validate_token_format(self, token: str) -> bool:
        """–ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ç–æ–∫–µ–Ω–∞"""
        # –¢–æ–∫–µ–Ω Telegram –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: 123456789:ABC-DEF...
        parts = token.split(':')
        if len(parts) != 2:
            return False
        
        bot_id, secret = parts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –±–æ—Ç–∞ - —á–∏—Å–ª–æ
        if not bot_id.isdigit():
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å–µ–∫—Ä–µ—Ç–Ω–æ–π —á–∞—Å—Ç–∏
        if len(secret) < 30:
            return False
        
        return True
    
    def _ask_save_token(self) -> bool:
        """–°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞"""
        try:
            response = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ –∑–∞—â–∏—â—ë–Ω–Ω–æ–º —Ñ–∞–π–ª–µ? (y/N): ").strip().lower()
            return response in ['y', 'yes', '–¥–∞', '–¥']
        except:
            return False
    
    def _save_token_to_file(self, token: str) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –≤ –∑–∞—â–∏—â—ë–Ω–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            self.config_dir.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            config = {
                "telegram": {
                    "bot_token": token
                },
                "security": {
                    "session_timeout": 3600
                }
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –ø—Ä–∞–≤–∞–º–∏
            with open(self.secrets_file, 'w', encoding='utf-8') as f:
                json.dump(config, f, indent=2, ensure_ascii=False)
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
            os.chmod(self.secrets_file, 0o600)
            
            print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ {self.secrets_file}")
            print("üîí –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ (600)")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            return False
