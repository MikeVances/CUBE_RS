#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Multi-Tenant —Å–∏—Å—Ç–µ–º—ã CUBE_RS
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import json
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

from multi_tenant_manager import MultiTenantManager

class MultiTenantSetup:
    """–ö–ª–∞—Å—Å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Multi-Tenant —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self, db_file: str = "cube_multitenant.db"):
        self.db_file = db_file
        print(f"üîß Multi-Tenant Setup –¥–ª—è –±–∞–∑—ã: {db_file}")
    
    def setup_demo_farm_scenario(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–µ—Ä–º"""
        print("\nüåæ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è —Ñ–µ—Ä–º...")
        
        # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É –¥–ª—è —á–∏—Å—Ç–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
        if Path(self.db_file).exists():
            Path(self.db_file).unlink()
            print("üóëÔ∏è –°—Ç–∞—Ä–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç –±–∞–∑—É)
        mt = MultiTenantManager(self.db_file)
        
        # –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
        additional_orgs = [
            {
                "name": "–ü—Ç–∏—Ü–µ—Ñ–∞–±—Ä–∏–∫–∞ –°–µ–≤–µ—Ä",
                "code": "POULTRY_NORTH", 
                "description": "–ö—Ä—É–ø–Ω–∞—è –ø—Ç–∏—Ü–µ—Ñ–∞–±—Ä–∏–∫–∞ –Ω–∞ —Å–µ–≤–µ—Ä–µ —Ä–µ–≥–∏–æ–Ω–∞",
                "contact": "–°–µ–≤–µ—Ä–æ–≤ –°.–°.",
                "phone": "+7-900-111-22-33",
                "email": "admin@poultry-north.ru"
            },
            {
                "name": "–°–≤–∏–Ω–æ–∫–æ–º–ø–ª–µ–∫—Å –í–æ—Å—Ç–æ–∫", 
                "code": "PIG_FARM_EAST",
                "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–≤–∏–Ω–æ–∫–æ–º–ø–ª–µ–∫—Å",
                "contact": "–í–æ—Å—Ç–æ—á–Ω—ã–π –í.–í.",
                "phone": "+7-900-222-33-44", 
                "email": "info@pig-east.ru"
            },
            {
                "name": "–ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞ –ó–∞–ø–∞–¥",
                "code": "DAIRY_WEST",
                "description": "–°–µ–º–µ–π–Ω–∞—è –º–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞",
                "contact": "–ó–∞–ø–∞–¥–Ω–∞—è –ó.–ó.",
                "phone": "+7-900-333-44-55",
                "email": "contact@dairy-west.ru"
            }
        ]
        
        import sqlite3
        with sqlite3.connect(self.db_file) as conn:
            for org in additional_orgs:
                conn.execute("""
                    INSERT INTO organizations (name, code, description, contact_person, phone, email)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (org["name"], org["code"], org["description"], org["contact"], org["phone"], org["email"]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        devices = [
            # –ü—Ç–∏—Ü–µ—Ñ–∞–±—Ä–∏–∫–∞ –°–µ–≤–µ—Ä
            (4, "NORTH_KUB_01", "–ò–Ω–∫—É–±–∞—Ç–æ—Ä–∏–π ‚Ññ1", 7, "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å", "KUB1063-2024-007"),
            (4, "NORTH_KUB_02", "–ò–Ω–∫—É–±–∞—Ç–æ—Ä–∏–π ‚Ññ2", 8, "–ì–ª–∞–≤–Ω—ã–π –∫–æ—Ä–ø—É—Å", "KUB1063-2024-008"), 
            (4, "NORTH_KUB_03", "–ë—Ä—É–¥–µ—Ä ‚Ññ1", 9, "–ö–æ—Ä–ø—É—Å –ê", "KUB1063-2024-009"),
            (4, "NORTH_KUB_04", "–ë—Ä—É–¥–µ—Ä ‚Ññ2", 10, "–ö–æ—Ä–ø—É—Å –ê", "KUB1063-2024-010"),
            (4, "NORTH_KUB_05", "–û—Ç–∫–æ—Ä–º–æ—á–Ω–∏–∫ ‚Ññ1", 11, "–ö–æ—Ä–ø—É—Å –ë", "KUB1063-2024-011"),
            
            # –°–≤–∏–Ω–æ–∫–æ–º–ø–ª–µ–∫—Å –í–æ—Å—Ç–æ–∫
            (5, "PIG_KUB_01", "–û–ø–æ—Ä–æ—Å ‚Ññ1", 12, "–°–≤–∏–Ω–∞—Ä–Ω–∏–∫ 1", "KUB1063-2024-012"),
            (5, "PIG_KUB_02", "–û–ø–æ—Ä–æ—Å ‚Ññ2", 13, "–°–≤–∏–Ω–∞—Ä–Ω–∏–∫ 1", "KUB1063-2024-013"),
            (5, "PIG_KUB_03", "–û—Ç–∫–æ—Ä–º ‚Ññ1", 14, "–°–≤–∏–Ω–∞—Ä–Ω–∏–∫ 2", "KUB1063-2024-014"),
            
            # –ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞ –ó–∞–ø–∞–¥  
            (6, "DAIRY_KUB_01", "–ö–æ—Ä–æ–≤–Ω–∏–∫ ‚Ññ1", 15, "–û—Å–Ω–æ–≤–Ω–æ–µ –∑–¥–∞–Ω–∏–µ", "KUB1063-2024-015"),
            (6, "DAIRY_KUB_02", "–¢–µ–ª—è—Ç–Ω–∏–∫", 16, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –∑–¥–∞–Ω–∏–µ", "KUB1063-2024-016")
        ]
        
        with sqlite3.connect(self.db_file) as conn:
            conn.executemany("""
                INSERT INTO kub_devices (organization_id, device_id, device_name, modbus_slave_id, location, serial_number)
                VALUES (?, ?, ?, ?, ?, ?)
            """, devices)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(additional_orgs)} –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-—Ñ–µ—Ä–º–µ—Ä–æ–≤
        test_users = [
            {
                "telegram_id": 111111111,
                "username": "farmer_north", 
                "first_name": "–°–µ—Ä–≥–µ–π",
                "last_name": "–°–µ–≤–µ—Ä–æ–≤",
                "email": "sergey@poultry-north.ru",
                "org_code": "POULTRY_NORTH",
                "role": "admin"
            },
            {
                "telegram_id": 222222222,
                "username": "pig_farmer_east",
                "first_name": "–í–ª–∞–¥–∏–º–∏—Ä", 
                "last_name": "–í–æ—Å—Ç–æ—á–Ω—ã–π",
                "email": "vladimir@pig-east.ru",
                "org_code": "PIG_FARM_EAST", 
                "role": "owner"
            },
            {
                "telegram_id": 333333333,
                "username": "dairy_west",
                "first_name": "–ó–æ—è",
                "last_name": "–ó–∞–ø–∞–¥–Ω–∞—è", 
                "email": "zoya@dairy-west.ru",
                "org_code": "DAIRY_WEST",
                "role": "owner"
            },
            {
                "telegram_id": 444444444,
                "username": "operator_north",
                "first_name": "–ò–≤–∞–Ω",
                "last_name": "–ü–æ–º–æ—â–Ω–∏–∫–æ–≤",
                "email": "ivan@poultry-north.ru", 
                "org_code": "POULTRY_NORTH",
                "role": "operator"
            }
        ]
        
        for user in test_users:
            mt.register_user(
                user["telegram_id"], user["username"],
                user["first_name"], user["last_name"]
            )
            mt.add_user_to_organization(
                user["telegram_id"], user["org_code"], user["role"]
            )
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_users)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print("\nüìã –î–ï–ú–û-–°–¶–ï–ù–ê–†–ò–ô –ì–û–¢–û–í!")
        self._print_demo_info()
    
    def setup_enterprise_scenario(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è: —Ö–æ–ª–¥–∏–Ω–≥ —Å —Ñ–∏–ª–∏–∞–ª–∞–º–∏"""
        print("\nüè¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è...")
        
        if Path(self.db_file).exists():
            Path(self.db_file).unlink()
        
        mt = MultiTenantManager(self.db_file)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ö–æ–ª–¥–∏–Ω–≥–∞
        holdings = [
            {
                "name": "–ê–≥—Ä–æ–•–æ–ª–¥–∏–Ω–≥ –¶–µ–Ω—Ç—Ä - –ì–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å",
                "code": "AGRO_CENTER_HQ",
                "description": "–£–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è —Ö–æ–ª–¥–∏–Ω–≥–∞",
                "contact": "–î–∏—Ä–µ–∫—Ç–æ—Ä–æ–≤ –î.–î.",
                "phone": "+7-495-123-45-67",
                "email": "director@agro-center.ru"
            },
            {
                "name": "–ê–≥—Ä–æ–•–æ–ª–¥–∏–Ω–≥ –¶–µ–Ω—Ç—Ä - –§–∏–ª–∏–∞–ª –ú–æ—Å–∫–≤–∞",
                "code": "AGRO_CENTER_MSK", 
                "description": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ñ–∏–ª–∏–∞–ª",
                "contact": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ú.–ú.",
                "phone": "+7-495-234-56-78",
                "email": "moscow@agro-center.ru"
            },
            {
                "name": "–ê–≥—Ä–æ–•–æ–ª–¥–∏–Ω–≥ –¶–µ–Ω—Ç—Ä - –§–∏–ª–∏–∞–ª –°–ü–±",
                "code": "AGRO_CENTER_SPB",
                "description": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π —Ñ–∏–ª–∏–∞–ª", 
                "contact": "–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π –ü.–ü.",
                "phone": "+7-812-345-67-89",
                "email": "spb@agro-center.ru"
            },
            {
                "name": "–ê–≥—Ä–æ–•–æ–ª–¥–∏–Ω–≥ –¶–µ–Ω—Ç—Ä - –§–∏–ª–∏–∞–ª –ö–∞–∑–∞–Ω—å",
                "code": "AGRO_CENTER_KZN",
                "description": "–ö–∞–∑–∞–Ω—Å–∫–∏–π —Ñ–∏–ª–∏–∞–ª",
                "contact": "–ö–∞–∑–∞–Ω—Å–∫–∏–π –ö.–ö.", 
                "phone": "+7-843-456-78-90",
                "email": "kazan@agro-center.ru"
            }
        ]
        
        import sqlite3
        with sqlite3.connect(self.db_file) as conn:
            for org in holdings:
                conn.execute("""
                    INSERT INTO organizations (name, code, description, contact_person, phone, email)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (org["name"], org["code"], org["description"], org["contact"], org["phone"], org["email"]))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º
        devices = []
        device_counter = 1
        
        # –ì–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å - —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        for i in range(1, 4):
            devices.append((1, f"HQ_MONITOR_{i:02d}", f"–°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ‚Ññ{i}", device_counter, "–¶–µ–Ω—Ç—Ä —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è", f"KUB1063-2024-{device_counter:03d}"))
            device_counter += 1
        
        # –ú–æ—Å–∫–≤–∞ - 15 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for i in range(1, 16):
            location = f"–ö–æ—Ä–ø—É—Å {(i-1)//5 + 1}"
            devices.append((2, f"MSK_KUB_{i:02d}", f"–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ö–£–ë ‚Ññ{i}", device_counter, location, f"KUB1063-2024-{device_counter:03d}"))
            device_counter += 1
        
        # –°–ü–± - 12 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for i in range(1, 13):
            location = f"–ó–¥–∞–Ω–∏–µ {(i-1)//4 + 1}"
            devices.append((3, f"SPB_KUB_{i:02d}", f"–ü–∏—Ç–µ—Ä—Å–∫–∏–π –ö–£–ë ‚Ññ{i}", device_counter, location, f"KUB1063-2024-{device_counter:03d}"))
            device_counter += 1
        
        # –ö–∞–∑–∞–Ω—å - 8 —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        for i in range(1, 9):
            location = f"–¶–µ—Ö {(i-1)//3 + 1}"
            devices.append((4, f"KZN_KUB_{i:02d}", f"–ö–∞–∑–∞–Ω—Å–∫–∏–π –ö–£–ë ‚Ññ{i}", device_counter, location, f"KUB1063-2024-{device_counter:03d}"))
            device_counter += 1
        
        with sqlite3.connect(self.db_file) as conn:
            conn.executemany("""
                INSERT INTO kub_devices (organization_id, device_id, device_name, modbus_slave_id, location, serial_number)
                VALUES (?, ?, ?, ?, ?, ?)
            """, devices)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        corporate_users = [
            # –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ
            (555000001, "ceo_center", "–í–ª–∞–¥–∏–º–∏—Ä", "–ì–ª–∞–≤–Ω—ã–π", "AGRO_CENTER_HQ", "owner"),
            (555000002, "cto_center", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π", "–î–∏—Ä–µ–∫—Ç–æ—Ä", "AGRO_CENTER_HQ", "admin"),
            
            # –ú–æ—Å–∫–≤–∞
            (555100001, "director_msk", "–ú–∏—Ö–∞–∏–ª", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "AGRO_CENTER_MSK", "admin"),
            (555100002, "engineer_msk", "–ò–Ω–∂–µ–Ω–µ—Ä", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "AGRO_CENTER_MSK", "operator"), 
            (555100003, "operator_msk_1", "–û–ø–µ—Ä–∞—Ç–æ—Ä1", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "AGRO_CENTER_MSK", "operator"),
            (555100004, "operator_msk_2", "–û–ø–µ—Ä–∞—Ç–æ—Ä2", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "AGRO_CENTER_MSK", "operator"),
            
            # –°–ü–±
            (555200001, "director_spb", "–ü–µ—Ç—Ä", "–ü–µ—Ç–µ—Ä–±—É—Ä–≥—Å–∫–∏–π", "AGRO_CENTER_SPB", "admin"),
            (555200002, "engineer_spb", "–ò–Ω–∂–µ–Ω–µ—Ä", "–ü–∏—Ç–µ—Ä—Å–∫–∏–π", "AGRO_CENTER_SPB", "operator"),
            (555200003, "operator_spb", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–ü–∏—Ç–µ—Ä—Å–∫–∏–π", "AGRO_CENTER_SPB", "operator"),
            
            # –ö–∞–∑–∞–Ω—å
            (555300001, "director_kzn", "–ö–∞–∑–±–µ–∫", "–ö–∞–∑–∞–Ω—Å–∫–∏–π", "AGRO_CENTER_KZN", "admin"),
            (555300002, "operator_kzn", "–û–ø–µ—Ä–∞—Ç–æ—Ä", "–ö–∞–∑–∞–Ω—Å–∫–∏–π", "AGRO_CENTER_KZN", "operator")
        ]
        
        for telegram_id, username, first_name, last_name, org_code, role in corporate_users:
            mt.register_user(telegram_id, username, first_name, last_name)
            mt.add_user_to_organization(telegram_id, org_code, role)
        
        # –î–æ–±–∞–≤–ª—è–µ–º cross-—Ñ–∏–ª–∏–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞
        # CEO –≤–∏–¥–∏—Ç –≤—Å–µ
        mt.add_user_to_organization(555000001, "AGRO_CENTER_MSK", "admin")
        mt.add_user_to_organization(555000001, "AGRO_CENTER_SPB", "admin") 
        mt.add_user_to_organization(555000001, "AGRO_CENTER_KZN", "admin")
        
        # CTO —Ç–æ–∂–µ –≤–∏–¥–∏—Ç –≤—Å–µ
        mt.add_user_to_organization(555000002, "AGRO_CENTER_MSK", "operator")
        mt.add_user_to_organization(555000002, "AGRO_CENTER_SPB", "operator")
        mt.add_user_to_organization(555000002, "AGRO_CENTER_KZN", "operator")
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ö–æ–ª–¥–∏–Ω–≥ —Å {len(holdings)} —Ñ–∏–ª–∏–∞–ª–∞–º–∏")
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(devices)} —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(corporate_users)} –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
        print("\nüìã –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô –°–¶–ï–ù–ê–†–ò–ô –ì–û–¢–û–í!")
        self._print_enterprise_info()
    
    def _print_demo_info(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–µ–º–æ-—Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        print("\n" + "="*60)
        print("üåæ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –§–ï–†–ú–´")
        print("="*60)
        print("üè¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:")
        print("  ‚Ä¢ –§–µ—Ä–º–∞ –ò–≤–∞–Ω–æ–≤–∞ (IVANOV_FARM) - 2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("  ‚Ä¢ –ê–≥—Ä–æ—Ö–æ–ª–¥–∏–Ω–≥ –°–∏–±–∏—Ä—å (AGRO_SIBERIA) - 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞") 
        print("  ‚Ä¢ –¢–µ–ø–ª–∏—á–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å –Æ–≥ (GREENHOUSE_SOUTH) - 1 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ")
        print("  ‚Ä¢ –ü—Ç–∏—Ü–µ—Ñ–∞–±—Ä–∏–∫–∞ –°–µ–≤–µ—Ä (POULTRY_NORTH) - 5 —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print("  ‚Ä¢ –°–≤–∏–Ω–æ–∫–æ–º–ø–ª–µ–∫—Å –í–æ—Å—Ç–æ–∫ (PIG_FARM_EAST) - 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("  ‚Ä¢ –ú–æ–ª–æ—á–Ω–∞—è —Ñ–µ—Ä–º–∞ –ó–∞–ø–∞–¥ (DAIRY_WEST) - 2 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print()
        print("üë• –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print("  ‚Ä¢ 111111111 - –°–µ—Ä–≥–µ–π –°–µ–≤–µ—Ä–æ–≤ (admin –≤ POULTRY_NORTH)")
        print("  ‚Ä¢ 222222222 - –í–ª–∞–¥–∏–º–∏—Ä –í–æ—Å—Ç–æ—á–Ω—ã–π (owner –≤ PIG_FARM_EAST)")  
        print("  ‚Ä¢ 333333333 - –ó–æ—è –ó–∞–ø–∞–¥–Ω–∞—è (owner –≤ DAIRY_WEST)")
        print("  ‚Ä¢ 444444444 - –ò–≤–∞–Ω –ü–æ–º–æ—â–Ω–∏–∫–æ–≤ (operator –≤ POULTRY_NORTH)")
        print()
        print("üîß –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("  python multitenant_admin.py user list")
        print("  python multitenant_admin.py device list")
        print("="*60)
    
    def _print_enterprise_info(self):
        """–í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏"""
        print("\n" + "="*60)
        print("üè¢ –ö–û–†–ü–û–†–ê–¢–ò–í–ù–´–ô –•–û–õ–î–ò–ù–ì")
        print("="*60)
        print("üè¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ö–æ–ª–¥–∏–Ω–≥–∞:")
        print("  ‚Ä¢ –ì–æ–ª–æ–≤–Ω–æ–π –æ—Ñ–∏—Å (AGRO_CENTER_HQ) - 3 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
        print("  ‚Ä¢ –§–∏–ª–∏–∞–ª –ú–æ—Å–∫–≤–∞ (AGRO_CENTER_MSK) - 15 —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print("  ‚Ä¢ –§–∏–ª–∏–∞–ª –°–ü–± (AGRO_CENTER_SPB) - 12 —É—Å—Ç—Ä–æ–π—Å—Ç–≤") 
        print("  ‚Ä¢ –§–∏–ª–∏–∞–ª –ö–∞–∑–∞–Ω—å (AGRO_CENTER_KZN) - 8 —É—Å—Ç—Ä–æ–π—Å—Ç–≤")
        print()
        print("üë• –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
        print("  ‚Ä¢ 555000001 - CEO (–¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ–∏–ª–∏–∞–ª–∞–º)")
        print("  ‚Ä¢ 555000002 - CTO (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ)")
        print("  ‚Ä¢ 555100001 - –î–∏—Ä–µ–∫—Ç–æ—Ä –ú–æ—Å–∫–≤—ã") 
        print("  ‚Ä¢ 555200001 - –î–∏—Ä–µ–∫—Ç–æ—Ä –°–ü–±")
        print("  ‚Ä¢ 555300001 - –î–∏—Ä–µ–∫—Ç–æ—Ä –ö–∞–∑–∞–Ω–∏")
        print("  ‚Ä¢ + –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã –ø–æ —Ñ–∏–ª–∏–∞–ª–∞–º")
        print()
        print("üîß –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: 38")
        print("üîß –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 11")
        print("="*60)
    
    def create_production_config(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        print("\nüè≠ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        config = {
            "multitenant": {
                "enabled": True,
                "database": "cube_multitenant.db",
                "audit_enabled": True,
                "session_timeout": 3600,
                "max_devices_per_org": 50,
                "max_users_per_org": 20
            },
            "security": {
                "require_device_access_approval": True,
                "log_all_operations": True,
                "rate_limiting": {
                    "enabled": True,
                    "requests_per_hour": 100
                }
            },
            "notifications": {
                "new_user_registration": True,
                "device_access_requests": True,
                "critical_alarms": True
            }
        }
        
        config_file = "config/multitenant_production.json"
        os.makedirs("config", exist_ok=True)
        
        with open(config_file, 'w', encoding='utf-8') as f:
            json.dump(config, f, indent=2, ensure_ascii=False)
        
        print(f"‚úÖ –ü—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞: {config_file}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    parser = argparse.ArgumentParser(description="Multi-Tenant Setup –¥–ª—è CUBE_RS")
    
    parser.add_argument('--db', default='cube_multitenant.db', help='–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--scenario', choices=['demo', 'enterprise', 'custom'], 
                       default='demo', help='–°—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏')
    parser.add_argument('--config', action='store_true', help='–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥–∞–∫—à–Ω –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é')
    
    args = parser.parse_args()
    
    setup = MultiTenantSetup(args.db)
    
    try:
        if args.config:
            setup.create_production_config()
        
        if args.scenario == 'demo':
            setup.setup_demo_farm_scenario()
        elif args.scenario == 'enterprise':
            setup.setup_enterprise_scenario()
        elif args.scenario == 'custom':
            print("üìù –î–ª—è custom —Å—Ü–µ–Ω–∞—Ä–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ multitenant_admin.py")
            print("   –ü—Ä–∏–º–µ—Ä: python multitenant_admin.py org create '–ú–æ—è –§–µ—Ä–º–∞' MY_FARM")
        
        print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüìñ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: python multitenant_admin.py report")
        print("  2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Telegram Bot: python multitenant_telegram_bot.py")
        print("  3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except KeyboardInterrupt:
        print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")

if __name__ == "__main__":
    main()