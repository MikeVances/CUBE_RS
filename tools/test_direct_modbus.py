#!/usr/bin/env python3
"""
–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç —á—Ç–µ–Ω–∏—è Modbus —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ —Å –ª–æ–∫–∞–ª—å–Ω—ã—Ö –ø–æ—Ä—Ç–æ–≤
"""

import socket
import struct
import time

def read_modbus_register(host, port, address):
    """–ß–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω Modbus —Ä–µ–≥–∏—Å—Ç—Ä"""
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        sock.connect((host, port))
        
        # Modbus TCP –∑–∞–ø—Ä–æ—Å (Read Holding Registers)
        request = struct.pack('>HHHBBHH',
            address,    # Transaction ID
            0x0000,     # Protocol ID
            0x0006,     # Length
            0x01,       # Unit ID
            0x03,       # Function Code (Read Holding Registers)
            address,    # Start Address
            1           # Quantity
        )
        
        sock.send(request)
        response = sock.recv(1024)
        sock.close()
        
        if len(response) >= 11:
            function_code = response[7]
            if function_code == 0x03:
                value = struct.unpack('>H', response[9:11])[0]
                return value
            elif function_code == 0x83:
                error_code = response[8] if len(response) > 8 else 0
                print(f"   ‚ùå –û—à–∏–±–∫–∞ Modbus: –∫–æ–¥ {error_code}")
                return None
        
        print(f"   ‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.hex()}")
        return None
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        return None

def test_key_registers():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –Ω–∞ –æ–±–æ–∏—Ö –ø–æ—Ä—Ç–∞—Ö"""
    print("üîç –ü–†–Ø–ú–û–ô –¢–ï–°–¢ MODBUS –†–ï–ì–ò–°–¢–†–û–í")
    print("=" * 60)
    
    # –ö–ª—é—á–µ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    registers = [
        (0x00D5, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", "temp"),
        (0x0084, "–í–ª–∞–∂–Ω–æ—Å—Ç—å", "humidity"), 
        (0x0085, "CO2", "co2"),
        (0x0301, "–í–µ—Ä—Å–∏—è –ü–û", "version")
    ]
    
    ports = [
        (5021, "Gateway 1"),
        (5022, "Gateway 2")
    ]
    
    for port, name in ports:
        print(f"\nüîå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {name} (–ø–æ—Ä—Ç {port}):")
        print("-" * 40)
        
        working = True
        for addr, desc, reg_type in registers:
            print(f"üìñ –ß–∏—Ç–∞–µ–º {desc} (0x{addr:04X})...")
            value = read_modbus_register("localhost", port, addr)
            
            if value is not None:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                if reg_type == "temp":
                    formatted = f"{value / 10:.1f}¬∞C"
                elif reg_type == "humidity":
                    formatted = f"{value / 10:.1f}%"
                elif reg_type == "co2":
                    formatted = f"{value} ppm"
                elif reg_type == "version":
                    formatted = f"{value // 100}.{value % 100:02d}"
                else:
                    formatted = str(value)
                
                print(f"   ‚úÖ {desc}: {formatted} (raw: {value})")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –Ω—É–ª–µ–≤–æ–µ
                if value == 0:
                    print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù—É–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
                    
            else:
                print(f"   ‚ùå {desc}: –ù–ï–¢ –û–¢–í–ï–¢–ê")
                working = False
        
        if working:
            print(f"‚úÖ {name} —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print(f"‚ùå {name} –∏–º–µ–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã")

def test_cloud_simulation():
    """–°–∏–º—É–ª–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫–∞–∫ –æ—Ç –æ–±–ª–∞—á–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"\nüåê –°–ò–ú–£–õ–Ø–¶–ò–Ø –û–ë–õ–ê–ß–ù–û–ì–û –ó–ê–ü–†–û–°–ê:")
    print("-" * 40)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ—Ç –∂–µ –∑–∞–ø—Ä–æ—Å —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±–ª–∞—á–Ω—ã–π —Å–µ—Ä–≤–∏—Å
    # –ß–∏—Ç–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥ (–∫–∞–∫ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–∫—Ä–∏–ø—Ç–µ)
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ localhost:5022...")
        sock.connect(('localhost', 5022))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ß–∏—Ç–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã 0x83-0x86 (–∫–∞–∫ –≤ –æ–±–ª–∞—á–Ω–æ–º —Ç–µ—Å—Ç–µ)
        transaction_id = 0x0083
        request = struct.pack('>HHHBBHH',
            transaction_id, 0x0000, 0x0006, 0x01, 0x04, 0x0083, 4
        )
        print("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ 0x83-0x86...")
        sock.send(request)
        
        response = sock.recv(1024)
        print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
        
        if len(response) >= 9:
            function_code = response[7]
            if function_code == 0x04:
                byte_count = response[8]
                if byte_count > 0:
                    data = response[9:9+byte_count]
                    print(f"üìä –î–∞–Ω–Ω—ã–µ ({byte_count} –±–∞–π—Ç): {data.hex()}")
                    
                    # –ü–∞—Ä—Å–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
                    for i in range(0, len(data), 2):
                        if i + 1 < len(data):
                            reg_addr = 0x0083 + (i // 2)
                            value = struct.unpack('>H', data[i:i+2])[0]
                            
                            if reg_addr == 0x0083:
                                print(f"   0x{reg_addr:04X} (–î–∞–≤–ª–µ–Ω–∏–µ): {value/10:.1f} –ü–∞")
                            elif reg_addr == 0x0084:
                                print(f"   0x{reg_addr:04X} (–í–ª–∞–∂–Ω–æ—Å—Ç—å): {value/10:.1f}%")
                            elif reg_addr == 0x0085:
                                print(f"   0x{reg_addr:04X} (CO2): {value} ppm")
                            elif reg_addr == 0x0086:
                                print(f"   0x{reg_addr:04X} (NH3): {value/10:.1f} ppm")
                else:
                    print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ")
            else:
                print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏: 0x{function_code:02X}")
        else:
            print("‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç")
            
        sock.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏: {e}")

if __name__ == "__main__":
    test_key_registers()
    test_cloud_simulation()
