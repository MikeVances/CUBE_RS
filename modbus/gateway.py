"""
Modbus TCP‚Äë—à–ª—é–∑ –¥–ª—è –ö–£–ë‚Äë1063 (–®–õ–Æ–ó 1) —Å –ø–æ–ª–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ TimeWindowManager (RS485) –∏ —Ä–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –∏—Ö –≤ Modbus TCP.
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –í–°–ï–• —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–£–ë-1063
"""

import sys
import os
import time
import threading
import logging
import json
import argparse
from pathlib import Path

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –ø–æ–≤–µ—Ä—Ö –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–≥–æ PyPI-–º–æ–¥—É–ª—è
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pymodbus.server import StartTcpServer
from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from pymodbus.datastore import ModbusSequentialDataBlock

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from modbus.modbus_storage import init_db, update_data
    from modbus.time_window_manager import (
        request_rs485_read_all,
        get_time_window_manager
    )
except ImportError:
    try:
        from .modbus_storage import init_db, update_data
        from .time_window_manager import (
            request_rs485_read_all,
            get_time_window_manager
        )
    except ImportError:
        # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        import modbus_storage
        import time_window_manager
        init_db = modbus_storage.init_db
        update_data = modbus_storage.update_data
        request_rs485_read_all = time_window_manager.request_rs485_read_all
        get_time_window_manager = time_window_manager.get_time_window_manager

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
store_lock = threading.Lock()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CONFIG = None

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ config.json"""
    config_file = Path(__file__).parent.parent / "config.json"
    
    if config_file.exists():
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ config.json: {e}")
    
    # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    return {
        "services": {
            "gateway1": {"port": 5021}
        },
        "rs485": {
            "port": "/dev/tty.usbserial-210",
            "baudrate": 9600,
            "parity": "N",
            "databits": 8,
            "stopbits": 1,
            "timeout": 2.0,
            "slave_id": 1,
            "window_duration": 5,
            "cooldown_duration": 10
        },
        "modbus_registers": {
            "software_version": "0x0301",
            "digital_outputs_1": "0x0081",
            "digital_outputs_2": "0x0082", 
            "digital_outputs_3": "0x00A2",
            "pressure": "0x0083",
            "humidity": "0x0084",
            "co2": "0x0085",
            "nh3": "0x0086",
            "grv_base": "0x0087",
            "grv_tunnel": "0x0088",
            "damper": "0x0089",
            "active_alarms": "0x00C3",
            "registered_alarms": "0x00C7",
            "active_warnings": "0x00CB",
            "registered_warnings": "0x00CF",
            "ventilation_target": "0x00D0",
            "ventilation_level": "0x00D1",
            "ventilation_scheme": "0x00D2",
            "day_counter": "0x00D3",
            "temp_target": "0x00D4",
            "temp_inside": "0x00D5",
            "temp_vent_activation": "0x00D6"
        },
        "logging": {
            "level": "INFO",
            "files": {
                "gateway1": "gateway1.log"
            }
        }
    }

def setup_logging(config):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    log_level = config.get("logging", {}).get("level", "INFO")
    log_file = config.get("logging", {}).get("files", {}).get("gateway1", "gateway1.log")
    
    logging.basicConfig(
        level=getattr(logging, log_level),
        format="%(asctime)s %(levelname)s [GATEWAY1] %(message)s",
        handlers=[
            logging.FileHandler(log_file, encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )

def get_port_config(config):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏"""
    # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: CLI args > config.json > default
    
    # 1. –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ (–≤—ã—Å—à–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    parser = argparse.ArgumentParser(description="Gateway 1 –¥–ª—è –ö–£–ë-1063 - –æ—Å–Ω–æ–≤–Ω–æ–π —à–ª—é–∑")
    parser.add_argument("--port", type=int, help="Modbus TCP port (default: config.json or 5021)")
    parser.add_argument("--config", default="config.json", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    args, _ = parser.parse_known_args()
    
    if args.port:
        logging.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤: {args.port}")
        return args.port
    
    # 2. –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    try:
        config_port = config.get("services", {}).get("gateway1", {}).get("port")
        if config_port:
            logging.info(f"üìÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç –∏–∑ config.json: {config_port}")
            return config_port
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ—Ä—Ç–∞: {e}")
    
    # 3. –î–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    default_port = 5021
    logging.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—Ç: {default_port}")
    return default_port

def get_rs485_config(config):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ RS485 –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    rs485_config = config.get("rs485", {})
    
    return {
        "serial_port": rs485_config.get("port", "/dev/tty.usbserial-210"),
        "baudrate": rs485_config.get("baudrate", 9600),
        "parity": rs485_config.get("parity", "N"),
        "databits": rs485_config.get("databits", 8),
        "stopbits": rs485_config.get("stopbits", 1),
        "timeout": rs485_config.get("timeout", 2.0),
        "slave_id": rs485_config.get("slave_id", 1),
        "window_duration": rs485_config.get("window_duration", 5),
        "cooldown_duration": rs485_config.get("cooldown_duration", 10)
    }

def get_register_mapping(config):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞–ø–ø–∏–Ω–≥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    register_config = config.get("modbus_registers", {})
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —á–∏—Å–ª–∞
    register_map = {}
    for field_name, addr_str in register_config.items():
        try:
            if isinstance(addr_str, str) and addr_str.startswith("0x"):
                register_map[field_name] = int(addr_str, 16)
            else:
                register_map[field_name] = int(addr_str)
        except (ValueError, TypeError):
            logging.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞ –¥–ª—è {field_name}: {addr_str}")
    
    return register_map

def create_modbus_datastore():
    """–°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ Holding Registers –Ω–∞ –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∞–¥—Ä–µ—Å–æ–≤ (0..65535)."""
    registers = [0] * 65536
    return ModbusSequentialDataBlock(0, registers)

def convert_value_to_register(value, field_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –í–°–ï–• —Ç–∏–ø–æ–≤"""
    if value is None:
        return 0
    
    try:
        if field_name == "software_version":
            # –í–µ—Ä—Å–∏—è –ü–û –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "4.14" -> 414
            if isinstance(value, str):
                parts = value.split('.')
                if len(parts) == 2:
                    return int(parts[0]) * 100 + int(parts[1])
            return 0
        
        elif field_name in ["temp_inside", "temp_target", "temp_vent_activation"]:
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö
            temp = float(value) * 10
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (two's complement –¥–ª—è 16-bit)
            if temp < 0:
                return int(65536 + temp)
            return int(temp)
        
        elif field_name in ["humidity", "pressure", "nh3"]:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö
            val = float(value) * 10
            if val < 0:
                return int(65536 + val)
            return int(val)
        
        elif field_name in ["ventilation_level", "ventilation_target"]:
            # –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            return int(float(value) * 10)
        
        elif field_name == "ventilation_scheme":
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            if isinstance(value, str):
                return 1 if "—Ç—É–Ω–Ω–µ–ª—å–Ω–∞—è" in value.lower() else 0
            return int(value)
        
        elif field_name in ["digital_outputs_1", "digital_outputs_2", "digital_outputs_3"]:
            # –ë–∏—Ç–æ–≤—ã–µ –ø–æ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ü–∏—Ñ—Ä–æ–≤—ã—Ö –≤—ã—Ö–æ–¥–æ–≤
            return int(value) if value is not None else 0
        
        elif field_name in ["grv_base", "grv_tunnel", "damper"]:
            # –í—ã—Ö–æ–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (0-100%)
            return int(float(value) * 10) if value is not None else 0
        
        elif field_name in ["active_alarms", "registered_alarms", "active_warnings", "registered_warnings"]:
            # –ë–∏—Ç–æ–≤—ã–µ –ø–æ–ª—è –∞–≤–∞—Ä–∏–π –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
            return int(value) if value is not None else 0
        
        elif field_name in ["co2", "day_counter"]:
            # –¶–µ–ª—ã–µ —á–∏—Å–ª–∞ –±–µ–∑ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
            return int(float(value))
        
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            return int(float(value))
            
    except (ValueError, TypeError):
        logging.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {field_name}={value}")
        return 0

def update_register_from_data(store, register_addr, value):
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ Holding Register."""
    try:
        with store_lock:
            store.setValues(3, register_addr, [int(value)])  # FC=3 Holding
        logging.debug(f"üì° –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä 0x{register_addr:04X} = {int(value)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_addr:04X}: {e}")

def update_modbus_registers_from_data(store, data, register_mapping):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Modbus —Ä–µ–≥–∏—Å—Ç—Ä—ã –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    updated_count = 0
    
    for field_name, register_addr in register_mapping.items():
        if field_name in data and data[field_name] is not None:
            register_value = convert_value_to_register(data[field_name], field_name)
            update_register_from_data(store, register_addr, register_value)
            updated_count += 1
        else:
            # –î–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–æ–ª–µ–π –∑–∞–ø–∏—Å—ã–≤–∞–µ–º 0
            update_register_from_data(store, register_addr, 0)
    
    if updated_count > 0:
        logging.info(f"üì° –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count}/{len(register_mapping)} Modbus —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        temp = data.get('temp_inside')
        humidity = data.get('humidity') 
        co2 = data.get('co2')
        alarms = data.get('active_alarms', 0)
        warnings = data.get('active_warnings', 0)
        logging.info(f"üìä –ö–ª—é—á–µ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: temp={temp}¬∞C, humidity={humidity}%, CO2={co2}ppm")
        if alarms or warnings:
            logging.warning(f"‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è: –∞–≤–∞—Ä–∏–∏=0x{alarms:04X}, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è=0x{warnings:04X}")
    
    return updated_count

def run_modbus_server(context, port):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Modbus TCP‚Äë—Å–µ—Ä–≤–µ—Ä –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É."""
    try:
        logging.info(f"üß≤ –ó–∞–ø—É—Å–∫ Modbus TCP‚Äë—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}‚Ä¶")
        StartTcpServer(context=context, address=("0.0.0.0", port))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ TCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")

def main():
    global CONFIG
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    CONFIG = load_config()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    setup_logging(CONFIG)
    
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –®–õ–Æ–ó–ê 1: Modbus TCP —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä –¥–ª—è –ö–£–ë‚Äë1063")
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    modbus_tcp_port = get_port_config(CONFIG)
    rs485_config = get_rs485_config(CONFIG)
    register_mapping = get_register_mapping(CONFIG)
    
    logging.info(f"üîå Modbus TCP –ø–æ—Ä—Ç: {modbus_tcp_port}")
    logging.info(f"üì° RS485 –ø–æ—Ä—Ç: {rs485_config['serial_port']}")
    logging.info(f"‚öôÔ∏è RS485 –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {rs485_config['baudrate']}, {rs485_config['parity']}-{rs485_config['databits']}-{rs485_config['stopbits']}")
    logging.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(register_mapping)} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã
    logging.info("üìä –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã:")
    for field_name, addr in sorted(register_mapping.items(), key=lambda x: x[1]):
        logging.info(f"  ‚Ä¢ 0x{addr:04X}: {field_name}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    try:
        manager = get_time_window_manager(
            serial_port=rs485_config['serial_port'],
            window_duration=rs485_config['window_duration'],
            cooldown_duration=rs485_config['cooldown_duration'],
            baudrate=rs485_config['baudrate'],
            slave_id=rs485_config['slave_id']
        )
        logging.info(f"‚úÖ TimeWindowManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –∏–∑ config.json")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TimeWindowManager: {e}")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (SQLite) –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö/–¥–∞—à–±–æ—Ä–¥–∞
    try:
        init_db()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

    # –°–æ–∑–¥–∞–Ω–∏–µ Modbus‚Äë–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–¥–∏–Ω slave, —Ç–æ–ª—å–∫–æ Holding Registers)
    try:
        store = ModbusSlaveContext(hr=create_modbus_datastore())
        context = ModbusServerContext(slaves=store, single=True)
        logging.info("‚úÖ Modbus –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω (65536 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        raise

    # –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º RS485 –∏ –æ–±–Ω–æ–≤–ª—è–µ–º datastore + –ë–î
    def update_loop():
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        while True:
            try:
                data_result = [None]

                def data_callback(data):
                    logging.debug(f"üîî Callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
                    data_result[0] = data

                logging.debug("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ TimeWindowManager‚Ä¶")
                request_rs485_read_all(data_callback)

                # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ 20 —Å–µ–∫—É–Ω–¥
                start_time = time.time()
                while data_result[0] is None and time.time() - start_time < 20:
                    time.sleep(0.1)

                data = data_result[0]
                if data and data.get("connection_status") == "connected":
                    logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Å –ö–£–ë-1063")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Modbus —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
                    try:
                        updated_count = update_modbus_registers_from_data(store, data, register_mapping)
                        logging.info(f"üì° –†–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞–Ω–æ {updated_count} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –≤ Modbus TCP")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ Modbus: {e}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ SQLite –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
                    try:
                        update_data(**data)
                        logging.debug("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                else:
                    logging.warning("‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∏ —Å –ö–£–ë‚Äë1063 –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                time.sleep(10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {e}")
                time.sleep(3)

    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ TCP‚Äë—Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=update_loop, daemon=True).start()
    run_modbus_server(context, modbus_tcp_port)

if __name__ == "__main__":
    main()