#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Bot
"""

import sqlite3
import json
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from pathlib import Path

logger = logging.getLogger(__name__)

class TelegramBotDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Bot"""
    
    def __init__(self, db_file: str = "kub_commands.db"):
        self.db_file = db_file
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not Path(db_file).exists():
            logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é")
            self._create_database()
        
        logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_file}")
    
    def _create_database(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS telegram_users (
                        telegram_id INTEGER PRIMARY KEY,
                        username TEXT,
                        first_name TEXT,
                        last_name TEXT,
                        access_level TEXT DEFAULT 'user',
                        is_active INTEGER DEFAULT 1,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        last_command_at TIMESTAMP,
                        total_commands INTEGER DEFAULT 0
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS user_command_history (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        telegram_id INTEGER,
                        command_type TEXT,
                        register_address TEXT,
                        success INTEGER,
                        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        FOREIGN KEY (telegram_id) REFERENCES telegram_users (telegram_id)
                    )
                """)
                
                # –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞
                conn.execute("""
                    CREATE TABLE IF NOT EXISTS access_config (
                        access_level TEXT PRIMARY KEY,
                        can_read INTEGER DEFAULT 1,
                        can_write INTEGER DEFAULT 0,
                        can_reset_alarms INTEGER DEFAULT 0,
                        allowed_registers TEXT,
                        commands_per_hour INTEGER DEFAULT 5
                    )
                """)
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
                access_levels = [
                    ('user', 1, 0, 0, '[]', 5),
                    ('operator', 1, 0, 1, '[]', 20),
                    ('admin', 1, 1, 1, '[]', 50),
                    ('engineer', 1, 1, 1, '[]', 100)
                ]
                
                conn.executemany("""
                    INSERT OR IGNORE INTO access_config 
                    (access_level, can_read, can_write, can_reset_alarms, allowed_registers, commands_per_hour)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, access_levels)
                
                logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def register_user(self, telegram_id: int, username: str = None, 
                     first_name: str = None, last_name: str = None,
                     access_level: str = "user") -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor = conn.execute(
                    "SELECT telegram_id FROM telegram_users WHERE telegram_id = ?",
                    (telegram_id,)
                )
                exists = cursor.fetchone()
                
                if exists:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    conn.execute("""
                        UPDATE telegram_users 
                        SET username = ?, first_name = ?, last_name = ?, 
                            last_active = CURRENT_TIMESTAMP
                        WHERE telegram_id = ?
                    """, (username, first_name, last_name, telegram_id))
                    
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username}) –æ–±–Ω–æ–≤–ª—ë–Ω")
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    conn.execute("""
                        INSERT INTO telegram_users 
                        (telegram_id, username, first_name, last_name, access_level)
                        VALUES (?, ?, ?, ?, ?)
                    """, (telegram_id, username, first_name, last_name, access_level))
                    
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —É—Ä–æ–≤–Ω–µ–º {access_level}")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return False
    
    def get_user(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT * FROM telegram_users WHERE telegram_id = ?
                """, (telegram_id,))
                
                row = cursor.fetchone()
                if row:
                    return dict(row)
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None
    
    def get_user_access_level(self, telegram_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.get_user(telegram_id)
            return user.get('access_level', 'user') if user else 'user'
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ {telegram_id}: {e}")
            return 'user'
    
    def set_user_access_level(self, telegram_id: int, access_level: str) -> bool:
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    UPDATE telegram_users 
                    SET access_level = ?, last_active = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """, (access_level, telegram_id))
                
                success = cursor.rowcount > 0
                if success:
                    logger.info(f"üîß –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –ø–æ–ª—É—á–∏–ª —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {access_level}")
                
                return success
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ {telegram_id}: {e}")
            return False
    
    def get_access_permissions(self, access_level: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT * FROM access_config WHERE access_level = ?
                """, (access_level,))
                
                row = cursor.fetchone()
                if row:
                    permissions = dict(row)
                    # –ü–∞—Ä—Å–∏–º JSON —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏
                    if permissions.get('allowed_registers'):
                        try:
                            permissions['allowed_registers'] = json.loads(permissions['allowed_registers'])
                        except:
                            permissions['allowed_registers'] = []
                    return permissions
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è {access_level}: {e}")
            return None
    
    def log_user_command(self, telegram_id: int, command_type: str, 
                        register_address: str = None, success: bool = True) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.execute("""
                    INSERT INTO user_command_history 
                    (telegram_id, command_type, register_address, success)
                    VALUES (?, ?, ?, ?)
                """, (telegram_id, command_type, register_address, success))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conn.execute("""
                    UPDATE telegram_users 
                    SET total_commands = total_commands + 1,
                        last_command_at = CURRENT_TIMESTAMP,
                        last_active = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """, (telegram_id,))
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {telegram_id}: {e}")
            return False
    
    def get_user_command_count_last_hour(self, telegram_id: int) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM user_command_history 
                    WHERE telegram_id = ? AND timestamp > datetime('now', '-1 hour')
                """, (telegram_id,))
                
                return cursor.fetchone()[0]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á–µ—Ç–∞ –∫–æ–º–∞–Ω–¥ {telegram_id}: {e}")
            return 0
    
    def get_user_stats(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                cursor = conn.execute("""
                    SELECT total_commands, last_command_at, created_at 
                    FROM telegram_users WHERE telegram_id = ?
                """, (telegram_id,))
                
                user_data = cursor.fetchone()
                if not user_data:
                    return None
                
                total_commands, last_command_at, created_at = user_data
                
                # –ö–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM user_command_history 
                    WHERE telegram_id = ? AND timestamp > datetime('now', '-1 hour')
                """, (telegram_id,))
                commands_last_hour = cursor.fetchone()[0]
                
                # –ö–æ–º–∞–Ω–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM user_command_history 
                    WHERE telegram_id = ? AND date(timestamp) = date('now')
                """, (telegram_id,))
                commands_today = cursor.fetchone()[0]
                
                # –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM user_command_history 
                    WHERE telegram_id = ? AND success = 1
                """, (telegram_id,))
                successful_commands = cursor.fetchone()[0]
                
                return {
                    'total_commands': total_commands or 0,
                    'commands_last_hour': commands_last_hour,
                    'commands_today': commands_today,
                    'successful_commands': successful_commands,
                    'success_rate': (successful_commands / max(total_commands, 1)) * 100 if total_commands else 0,
                    'last_command_at': last_command_at,
                    'member_since': created_at
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {telegram_id}: {e}")
            return None
    
    def get_all_users(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT telegram_id, username, first_name, last_name, 
                           access_level, is_active, created_at, last_active
                    FROM telegram_users 
                    ORDER BY last_active DESC
                """)
                
                return [dict(row) for row in cursor.fetchall()]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def deactivate_user(self, telegram_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    UPDATE telegram_users 
                    SET is_active = 0, last_active = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """, (telegram_id,))
                
                success = cursor.rowcount > 0
                if success:
                    logger.info(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                return success
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return False
    
    def cleanup_old_history(self, days: int = 30) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # ‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ SQL —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
                cursor = conn.execute("""
                    DELETE FROM user_command_history 
                    WHERE timestamp < datetime('now', ? || ' days')
                """, (f'-{days}',))
                
                deleted_count = cursor.rowcount
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥")
                
                return deleted_count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return 0

def find_user_by_username(self, username: str):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    try:
        with sqlite3.connect(self.db_file) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("""
                SELECT * FROM telegram_users WHERE username = ?
            """, (username,))
            row = cursor.fetchone()
            return dict(row) if row else None
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}: {e}")
        return None

def get_all_users(self):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        with sqlite3.connect(self.db_file) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("""
                SELECT telegram_id, username, first_name, access_level, is_active, created_at
                FROM telegram_users ORDER BY created_at DESC
            """)
            rows = cursor.fetchall()
            return [dict(row) for row in rows]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []



def find_user_by_username(self, username: str):
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    try:
        import sqlite3
        with sqlite3.connect(self.db_file) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM telegram_users WHERE username = ?", (username,))
            row = cursor.fetchone()
            return dict(row) if row else None
    except Exception as e:
        import logging
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

def get_all_users(self):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        import sqlite3
        with sqlite3.connect(self.db_file) as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.execute("SELECT * FROM telegram_users ORDER BY created_at DESC")
            rows = cursor.fetchall()
            return [dict(row) for row in rows]
    except Exception as e:
        import logging
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

    def update_user_access_level(self, telegram_id: int, access_level: str) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
            valid_levels = ['user', 'operator', 'engineer', 'admin']
            if access_level not in valid_levels:
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {access_level}")
                return False
            
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    UPDATE telegram_users 
                    SET access_level = ?, last_active = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """, (access_level, telegram_id))
                
                success = cursor.rowcount > 0
                if success:
                    logger.info(f"üîê –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{access_level}'")
                
                return success
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ {telegram_id}: {e}")
            return False

    def set_user_temporary_level(self, telegram_id: int, temp_level: str, duration_hours: int = 24) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
            current_level = self.get_user_access_level(telegram_id)
            if not current_level:
                logger.error(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π
            with sqlite3.connect(self.db_file) as conn:
                # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
                conn.execute("""
                    UPDATE telegram_users 
                    SET original_access_level = COALESCE(original_access_level, access_level),
                        access_level = ?,
                        temp_level_expires = datetime('now', '+{} hours'),
                        last_active = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """.format(duration_hours), (temp_level, telegram_id))
                
                logger.info(f"üïê –í—Ä–µ–º–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å '{temp_level}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –Ω–∞ {duration_hours}—á")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è {telegram_id}: {e}")
            return False

    def restore_user_original_level(self, telegram_id: int) -> bool:
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    UPDATE telegram_users 
                    SET access_level = COALESCE(original_access_level, access_level),
                        original_access_level = NULL,
                        temp_level_expires = NULL,
                        last_active = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """, (telegram_id,))
                
                success = cursor.rowcount > 0
                if success:
                    logger.info(f"üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}")
                
                return success
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ {telegram_id}: {e}")
            return False

    def check_and_restore_expired_levels(self) -> int:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —É—Ä–æ–≤–Ω—è–º–∏
                cursor = conn.execute("""
                    SELECT telegram_id, username, access_level, original_access_level
                    FROM telegram_users 
                    WHERE temp_level_expires IS NOT NULL 
                    AND temp_level_expires < datetime('now')
                """)
                
                expired_users = cursor.fetchall()
                
                if expired_users:
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
                    conn.execute("""
                        UPDATE telegram_users 
                        SET access_level = COALESCE(original_access_level, access_level),
                            original_access_level = NULL,
                            temp_level_expires = NULL,
                            last_active = CURRENT_TIMESTAMP
                        WHERE temp_level_expires IS NOT NULL 
                        AND temp_level_expires < datetime('now')
                    """)
                    
                    for user in expired_users:
                        logger.info(f"‚è∞ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user[0]} ({user[1]}): {user[2]} -> {user[3] or user[2]}")
                
                return len(expired_users)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö —É—Ä–æ–≤–Ω–µ–π: {e}")
            return 0

    def get_user_level_info(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT access_level, original_access_level, temp_level_expires
                    FROM telegram_users 
                    WHERE telegram_id = ?
                """, (telegram_id,))
                
                row = cursor.fetchone()
                if row:
                    return {
                        'current_level': row['access_level'],
                        'original_level': row['original_access_level'],
                        'temp_expires': row['temp_level_expires'],
                        'is_temporary': row['original_access_level'] is not None
                    }
                
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ {telegram_id}: {e}")
            return None

    def create_invitation(self, invited_by: int, access_level: str, hours_valid: int = 24) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º"""
        try:
            import uuid
            import datetime
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            invitation_code = str(uuid.uuid4())[:8].upper()
            expires_at = datetime.datetime.now() + datetime.timedelta(hours=hours_valid)
            
            with sqlite3.connect(self.db_file) as conn:
                conn.execute("""
                    INSERT INTO user_invitations 
                    (invitation_code, invited_by, access_level, expires_at)
                    VALUES (?, ?, ?, ?)
                """, (invitation_code, invited_by, access_level, expires_at))
                
                logger.info(f"üîó –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation_code} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {invited_by}")
                return invitation_code
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            return None

    def get_invitation(self, invitation_code: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT i.*, u.username as invited_by_username, u.first_name as invited_by_name
                    FROM user_invitations i
                    LEFT JOIN telegram_users u ON i.invited_by = u.telegram_id
                    WHERE i.invitation_code = ?
                """, (invitation_code,))
                
                row = cursor.fetchone()
                return dict(row) if row else None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {invitation_code}: {e}")
            return None

    def use_invitation(self, invitation_code: str, user_id: int) -> bool:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
        try:
            import datetime
            
            with sqlite3.connect(self.db_file) as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ –∏ –Ω–µ –∏—Å—Ç–µ–∫–ª–æ
                cursor = conn.execute("""
                    SELECT * FROM user_invitations 
                    WHERE invitation_code = ? 
                    AND is_active = 1 
                    AND used_by IS NULL 
                    AND expires_at > datetime('now')
                """, (invitation_code,))
                
                invitation = cursor.fetchone()
                if not invitation:
                    return False
                
                # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
                conn.execute("""
                    UPDATE user_invitations 
                    SET used_by = ?, used_at = CURRENT_TIMESTAMP, is_active = 0
                    WHERE invitation_code = ?
                """, (user_id, invitation_code))
                
                logger.info(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation_code} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è {invitation_code}: {e}")
            return False

    def get_user_invitations(self, user_id: int) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT i.*, u.username as used_by_username, u.first_name as used_by_name
                    FROM user_invitations i
                    LEFT JOIN telegram_users u ON i.used_by = u.telegram_id
                    WHERE i.invited_by = ?
                    ORDER BY i.created_at DESC
                """, (user_id,))
                
                return [dict(row) for row in cursor.fetchall()]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []

    def cleanup_expired_invitations(self) -> int:
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    UPDATE user_invitations 
                    SET is_active = 0 
                    WHERE expires_at < datetime('now') AND is_active = 1
                """)
                
                count = cursor.rowcount
                if count > 0:
                    logger.info(f"üóëÔ∏è –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {count} –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π")
                
                return count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–µ–∫—à–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: {e}")
            return 0


# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø
# =============================================================================

def test_bot_database():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramBotDB")
    print("=" * 40)
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        test_db_file = "test_bot.db"
        if Path(test_db_file).exists():
            Path(test_db_file).unlink()
        
        db = TelegramBotDB(test_db_file)
        
        # –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 123456789
        print(f"1. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}...")
        
        success = db.register_user(
            telegram_id=test_user_id,
            username="test_user",
            first_name="Test",
            last_name="User"
        )
        print(f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user = db.get_user(test_user_id)
        if user:
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{user['username']}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {user['access_level']}")
        else:
            print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        print("3. –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥...")
        db.log_user_command(test_user_id, "read", None, True)
        db.log_user_command(test_user_id, "write", "0x0020", True)
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = db.get_user_stats(test_user_id)
        if stats:
            print(f"   ‚úÖ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats.get('total_commands', 0)}")
            print(f"   –ó–∞ —á–∞—Å: {stats.get('commands_last_hour', 0)}")
            print(f"   –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('commands_today', 0)}")
        
        # –¢–µ—Å—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        print("5. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...")
        permissions = db.get_access_permissions("user")
        if permissions:
            print(f"   ‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã: can_read={permissions.get('can_read')}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–∞–∑—É
        Path(test_db_file).unlink()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_bot_database()