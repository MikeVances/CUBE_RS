"""
Modbus TCP‚Äë—à–ª—é–∑ –¥–ª—è –ö–£–ë‚Äë1063 (–®–õ–Æ–ó 1)
–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ TimeWindowManager (RS485) –∏ —Ä–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –∏—Ö –≤ Modbus TCP.
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ SQLite –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞.

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""

import sys
import os
# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –ø–æ–≤–µ—Ä—Ö –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–≥–æ PyPI-–º–æ–¥—É–ª—è
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import time
import threading
import logging

from pymodbus.server import StartTcpServer
from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from pymodbus.datastore import ModbusSequentialDataBlock

# –ò–º–ø–æ—Ä—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
try:
    from core.config_manager import get_config
    config = get_config()
except ImportError:
    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ConfigManager. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PyYAML.")
    sys.exit(1)

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from modbus.modbus_storage import init_db, update_data
    from modbus.time_window_manager import (
        request_rs485_read_all,
        request_rs485_read_register,
        get_time_window_manager
    )
    from modbus.writer import KUB1063Writer
except ImportError:
    try:
        from .modbus_storage import init_db, update_data
        from .time_window_manager import (
            request_rs485_read_all,
            request_rs485_read_register,
            get_time_window_manager
        )
        from .writer import KUB1063Writer
    except ImportError:
        # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        import modbus_storage
        import time_window_manager
        init_db = modbus_storage.init_db
        update_data = modbus_storage.update_data
        request_rs485_read_all = time_window_manager.request_rs485_read_all
        request_rs485_read_register = time_window_manager.request_rs485_read_register
        get_time_window_manager = time_window_manager.get_time_window_manager
        from writer import KUB1063Writer

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
log_file = config.config_dir / "logs" / "gateway1.log"
log_file.parent.mkdir(exist_ok=True)

logging.basicConfig(
    level=getattr(logging, config.system.log_level),
    format="%(asctime)s %(levelname)s [GATEWAY1] %(message)s",
    handlers=[
        logging.FileHandler(log_file, encoding="utf-8"),
        logging.StreamHandler(),
    ],
)

logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
store_lock = threading.Lock()

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
REGISTERS_TO_READ = []
for reg_name, reg_addr in config.get_all_modbus_registers().items():
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π –∞–¥—Ä–µ—Å –≤ int
    if isinstance(reg_addr, str):
        if reg_addr.startswith('0x'):
            addr_int = int(reg_addr, 16)
        else:
            addr_int = int(reg_addr)
        REGISTERS_TO_READ.append(addr_int)

logger.info(f"üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(REGISTERS_TO_READ)} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")

# –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
MODBUS_TCP_PORT = config.modbus_tcp.port
SERIAL_PORT = config.rs485.port


def create_modbus_datastore():
    """–°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ Holding Registers –Ω–∞ –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∞–¥—Ä–µ—Å–æ–≤ (0..65535)."""
    registers = [0] * 65536
    return ModbusSequentialDataBlock(0, registers)


def update_register_from_rs485(store, register_addr, value):
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ Holding Register."""
    try:
        with store_lock:
            store.setValues(3, register_addr, [int(value)])  # FC=3 Holding
        logging.info(f"üì° –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä 0x{register_addr:04X} = {int(value)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_addr:04X}: {e}")


def read_and_retranslate_all_registers(store):
    """–ß–∏—Ç–∞–µ—Ç –Ω–∞–±–æ—Ä —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –º–µ–Ω–µ–¥–∂–µ—Ä –æ–∫–æ–Ω –∏ –ø–∏—à–µ—Ç –∏—Ö –≤ Modbus‚Äëdatastore."""
    updated_count = 0
    
    for register_addr in REGISTERS_TO_READ:
        try:
            result = [None]

            def register_callback(v):
                result[0] = v

            # –ó–∞–ø—Ä–æ—Å –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
            request_rs485_read_register(register_addr, register_callback)

            # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç (–¥–æ 20 —Å–µ–∫—É–Ω–¥)
            start_time = time.time()
            while result[0] is None and time.time() - start_time < 20:
                time.sleep(0.1)

            if result[0] is not None:
                update_register_from_rs485(store, register_addr, result[0])
                updated_count += 1
            else:
                logging.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_addr:04X}")

            time.sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_addr:04X}: {e}")
    
    logging.info(f"üìä –†–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞–Ω–æ {updated_count} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ {len(REGISTERS_TO_READ)}")
    return updated_count


def run_modbus_server(context):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Modbus TCP‚Äë—Å–µ—Ä–≤–µ—Ä –Ω–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º –ø–æ—Ä—Ç—É."""
    try:
        logger.info(f"üß≤ –ó–∞–ø—É—Å–∫ Modbus TCP‚Äë—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {MODBUS_TCP_PORT}‚Ä¶")
        StartTcpServer(context=context, address=("0.0.0.0", MODBUS_TCP_PORT))
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ TCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")


def main():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –®–õ–Æ–ó–ê 1: Modbus TCP —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä –¥–ª—è –ö–£–ë‚Äë1063")
    logger.info(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: –ø–æ—Ä—Ç {MODBUS_TCP_PORT}, RS485: {SERIAL_PORT}")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω —Å –Ω—É–∂–Ω—ã–º –ø–æ—Ä—Ç–æ–º
    try:
        manager = get_time_window_manager(serial_port=SERIAL_PORT)
        logger.info(f"‚úÖ TimeWindowManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ—Ä—Ç: {SERIAL_PORT})")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TimeWindowManager: {e}")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (SQLite) –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö/–¥–∞—à–±–æ—Ä–¥–∞
    try:
        init_db()
        logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

    # –°–æ–∑–¥–∞–Ω–∏–µ Modbus‚Äë–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–¥–∏–Ω slave, —Ç–æ–ª—å–∫–æ Holding Registers)
    try:
        store = ModbusSlaveContext(hr=create_modbus_datastore())
        context = ModbusServerContext(slaves=store, single=True)
        logger.info("‚úÖ Modbus –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω (65536 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        raise

    # –ó–∞–ø—É—Å–∫–∞–µ–º Writer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—á–µ—Ä–µ–¥–∏ –∫–æ–º–∞–Ω–¥ (–≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ, —á—Ç–æ–±—ã —Ä–∞–∑–¥–µ–ª—è—Ç—å TimeWindowManager)
    try:
        writer = KUB1063Writer(use_time_window_manager=True)
        writer.start()
        logger.info("‚úçÔ∏è Writer –∑–∞–ø—É—â–µ–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ write_commands –∞–∫—Ç–∏–≤–Ω–∞")
    except Exception as e:
        logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Writer: {e}")

    # –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º RS485 –∏ –æ–±–Ω–æ–≤–ª—è–µ–º datastore + –ë–î
    def update_loop():
        logger.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        while True:
            try:
                data_result = [None]

                def data_callback(data):
                    logger.info(f"üîî Callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
                    data_result[0] = data
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ SQLite —Å—Ä–∞–∑—É –≤ callback
                    try:
                        logger.info(f"üîç –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {list(data.keys())}")
                        update_data(**data)
                        logger.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                        import traceback
                        logger.error(traceback.format_exc())

                logging.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ TimeWindowManager‚Ä¶")
                request_rs485_read_all(data_callback)

                # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ 20 —Å–µ–∫—É–Ω–¥
                start_time = time.time()
                while data_result[0] is None and time.time() - start_time < 20:
                    time.sleep(0.1)

                data = data_result[0]
                if data and data.get("connection_status") == "connected":
                    logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: temp={data.get('temp_inside')}¬∞C, humidity={data.get('humidity')}%, CO2={data.get('co2')}ppm")

                    try:
                        # –†–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä—ã –≤ Modbus TCP
                        updated_count = read_and_retranslate_all_registers(store)
                        logging.info(f"üì° –†–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞–Ω–æ {updated_count} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {e}")
                else:
                    logging.warning("‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∏ —Å –ö–£–ë‚Äë1063 –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                time.sleep(30)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {e}")
                time.sleep(3)

    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ TCP‚Äë—Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=update_loop, daemon=True).start()
    run_modbus_server(context)


if __name__ == "__main__":
    main()
