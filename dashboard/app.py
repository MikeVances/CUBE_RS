"""
Streamlit Dashboard –¥–ª—è –ö–£–ë-1063
–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ –≤ —Å—Ç–∏–ª–µ Grafana (–ë–ï–ó –ì–†–ê–§–ò–ö–û–í)
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import streamlit as st
import time
from datetime import datetime, timedelta

# –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
try:
    from dashboard.dashboard_reader import read_all, get_statistics
    DEVICE_AVAILABLE = True
except ImportError:
    try:
        from .dashboard_reader import read_all, get_statistics
        DEVICE_AVAILABLE = True
    except ImportError:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å dashboard_reader")
        DEVICE_AVAILABLE = False
        
        def read_all():
            return {'temp_inside': 25.0, 'humidity': 60.0, 'co2': 400, 'connection_status': 'demo'}
        
        def get_statistics():
            return {'success_count': 0, 'error_count': 0, 'success_rate': 0, 'is_running': False}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ö–£–ë-1063 Dashboard", 
    layout="wide",
    initial_sidebar_state="collapsed"
)

# –°—Ç–∏–ª–∏ –≤ —Å—Ç–∏–ª–µ Grafana
st.markdown("""
    <style>
    .stApp {
        background-color: #0d1117;
        color: #e6edf3;
    }
    
    .stMetric {
        background-color: #21262d;
        border: 1px solid #30363d;
        border-radius: 6px;
        padding: 16px;
        margin: 8px 0;
    }
    
    .stMetric > div {
        background-color: transparent !important;
    }
    
    h1, h2, h3 {
        color: #58a6ff !important;
    }
    
    .element-container {
        background-color: #21262d;
        border-radius: 6px;
        margin: 8px 0;
    }
    </style>
""", unsafe_allow_html=True)

def get_status_color(value, min_val, max_val):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
    if value is None:
        return "#6c757d"
    if min_val <= value <= max_val:
        return "#28a745"  # –ó–µ–ª–µ–Ω—ã–π
    elif abs(value - min_val) < abs(value - max_val):
        return "#ffc107"  # –ñ–µ–ª—Ç—ã–π
    else:
        return "#dc3545"  # –ö—Ä–∞—Å–Ω—ã–π

def main():
    st.title("üìä –ü–∞–Ω–µ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ö–£–ë-1063")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        auto_refresh = st.checkbox("–ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ", value=True)
        refresh_interval = st.slider("–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–µ–∫)", 1, 60, 5)
        
        st.header("üîå –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        if DEVICE_AVAILABLE:
            st.success("‚úÖ Dashboard Reader –ø–æ–¥–∫–ª—é—á–µ–Ω")
        else:
            st.error("‚ùå Dashboard Reader –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        if st.button("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"):
            st.rerun()
    
    # –°–æ–∑–¥–∞–µ–º placeholder –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    placeholder = st.empty()
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    while True:
        with placeholder.container():
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            try:
                data = read_all()
                if not data:
                    st.error("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
                    data = {}
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                data = {}
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection_status = data.get('connection_status', 'unknown')
            if connection_status == 'connected':
                st.success("üü¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ö–£–ë-1063 –∞–∫—Ç–∏–≤–Ω–æ")
            elif connection_status == 'demo':
                st.info("üîµ –î–µ–º–æ —Ä–µ–∂–∏–º (–Ω–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É)")
            else:
                st.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {connection_status}")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.subheader("üéØ –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                temp_inside = data.get('temp_inside', 0) or 0
                temp_target = data.get('temp_target', 25) or 25
                temp_color = get_status_color(temp_inside, temp_target - 2, temp_target + 2)
                temp_inside_str = f"{temp_inside:.1f}¬∞C" if temp_inside is not None else "N/A"
                temp_target_str = f"{temp_target:.1f}¬∞C" if temp_target is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {temp_color};">
                    <h4 style="margin: 0; color: #e6edf3;">üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞</h4>
                    <h2 style="margin: 8px 0; color: {temp_color};">{temp_inside_str}</h2>
                    <small style="color: #8b949e;">–¶–µ–ª—å: {temp_target_str}</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col2:
                humidity = data.get('humidity', 0) or 0
                humidity_color = get_status_color(humidity, 40, 70)
                humidity_str = f"{humidity:.1f}%" if humidity is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {humidity_color};">
                    <h4 style="margin: 0; color: #e6edf3;">üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å</h4>
                    <h2 style="margin: 8px 0; color: {humidity_color};">{humidity_str}</h2>
                    <small style="color: #8b949e;">–ù–æ—Ä–º–∞: 40-70%</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col3:
                co2 = data.get('co2', 0) or 0
                co2_color = get_status_color(co2, 400, 3000)
                co2_str = f"{co2} ppm" if co2 is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {co2_color};">
                    <h4 style="margin: 0; color: #e6edf3;">ü´Å CO‚ÇÇ</h4>
                    <h2 style="margin: 8px 0; color: {co2_color};">{co2_str}</h2>
                    <small style="color: #8b949e;">–ù–æ—Ä–º–∞: 400-3000 ppm</small>
                </div>
                """, unsafe_allow_html=True)
            
            with col4:
                ventilation = data.get('ventilation_level', 0) or 0
                vent_color = "#58a6ff"
                ventilation_str = f"{ventilation}%" if ventilation is not None else "N/A"
                
                st.markdown(f"""
                <div style="background-color: #21262d; padding: 16px; border-radius: 6px; border-left: 4px solid {vent_color};">
                    <h4 style="margin: 0; color: #e6edf3;">üåÄ –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è</h4>
                    <h2 style="margin: 8px 0; color: {vent_color};">{ventilation_str}</h2>
                    <small style="color: #8b949e;">–£—Ä–æ–≤–µ–Ω—å –º–æ—â–Ω–æ—Å—Ç–∏</small>
                </div>
                """, unsafe_allow_html=True)
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            st.subheader("üìä –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
            col5, col6, col7, col8 = st.columns(4)
            
            with col5:
                pressure = data.get('pressure', 0)
                pressure_str = f"{pressure:.1f} –ü–∞" if pressure is not None else "N/A"
                st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üå™Ô∏è –î–∞–≤–ª–µ–Ω–∏–µ</div>', unsafe_allow_html=True)
                st.metric(label="–î–∞–≤–ª–µ–Ω–∏–µ", value=pressure_str, help="–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", label_visibility="collapsed")
            
            with col6:
                nh3 = data.get('nh3', 0)
                nh3_str = f"{nh3:.1f} ppm" if nh3 is not None else "N/A"
                st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üí® NH‚ÇÉ</div>', unsafe_allow_html=True)
                st.metric(label="NH3", value=nh3_str, help="–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è –∞–º–º–∏–∞–∫–∞", label_visibility="collapsed")
            
            with col7:
                st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üíª –í–µ—Ä—Å–∏—è –ü–û</div>', unsafe_allow_html=True)
                st.metric(label="–í–µ—Ä—Å–∏—è –ü–û", value=data.get('software_version', '‚Äì'), help="–í–µ—Ä—Å–∏—è –ø—Ä–æ—à–∏–≤–∫–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞", label_visibility="collapsed")
            
            with col8:
                last_update = data.get('timestamp', datetime.now())
                if isinstance(last_update, str):
                    try:
                        last_update = datetime.fromisoformat(last_update.replace('Z', '+00:00'))
                    except:
                        last_update = datetime.now()
                
                st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ</div>', unsafe_allow_html=True)
                st.metric(label="–í—Ä–µ–º—è", value=last_update.strftime("%H:%M:%S"), help="–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è", label_visibility="collapsed")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
            if DEVICE_AVAILABLE:
                try:
                    stats = get_statistics()
                    if stats:
                        st.subheader("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã")
                        col_stats1, col_stats2, col_stats3, col_stats4 = st.columns(4)
                        
                        with col_stats1:
                            st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö</div>', unsafe_allow_html=True)
                            st.metric(label="–£—Å–ø–µ—à–Ω—ã—Ö", value=stats.get('success_count', 0), label_visibility="collapsed")
                        
                        with col_stats2:
                            st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">‚ùå –û—à–∏–±–æ–∫</div>', unsafe_allow_html=True)
                            st.metric(label="–û—à–∏–±–æ–∫", value=stats.get('error_count', 0), label_visibility="collapsed")
                        
                        with col_stats3:
                            success_rate = stats.get('success_rate', 0) * 100
                            st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å</div>', unsafe_allow_html=True)
                            st.metric(label="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å", value=f"{success_rate:.1f}%", label_visibility="collapsed")
                        
                        with col_stats4:
                            is_running = stats.get('is_running', False)
                            status = "üü¢ –†–∞–±–æ—Ç–∞–µ—Ç" if is_running else "üî¥ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                            st.markdown('<div style="font-size:1.3em; color:#fff; font-weight:bold; margin-bottom:0.2em;">üîÑ –°—Ç–∞—Ç—É—Å</div>', unsafe_allow_html=True)
                            st.metric(label="–°—Ç–∞—Ç—É—Å", value=status, label_visibility="collapsed")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
            
            # –ó–∞–º–µ—Ç–∫–∞ –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö
            st.subheader("üìà –ì—Ä–∞—Ñ–∏–∫–∏")
            st.info("üìä –ì—Ä–∞—Ñ–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –±–∞–∑–µ SQL —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∞–Ω–Ω—ã—Ö.")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        if not auto_refresh:
            break
            
        time.sleep(refresh_interval)

if __name__ == "__main__":
    main()