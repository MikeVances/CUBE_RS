#!/bin/bash
set -e

# --- 1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–µ—Ç–∫–∏ ---
git checkout -b feature/ux-improvements || git checkout feature/ux-improvements

# --- 2. –ü–∞—Ç—á: telegram_bot/bot_utils.py ---
cat > telegram_bot/bot_utils.py << 'EOF'
from telegram import InlineKeyboardMarkup, InlineKeyboardButton

def build_main_menu(access_level: str = "user") -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞"""
    buttons = [
        [InlineKeyboardButton("üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è", callback_data="show_stats")],
        [InlineKeyboardButton("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_history")],
    ]
    if access_level in ("operator", "admin"):
        buttons.append([InlineKeyboardButton("üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π", callback_data="reset_alarms")])
    if access_level == "admin":
        buttons.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")])
    buttons.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")])
    return InlineKeyboardMarkup(buttons)

async def send_typing_action(update, context):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç '–ø–µ—á–∞—Ç–∞–µ—Ç...' –ø–æ–∫–∞ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞"""
    if update.message:
        await context.bot.send_chat_action(chat_id=update.message.chat_id, action="typing")
    elif update.callback_query:
        await context.bot.send_chat_action(chat_id=update.callback_query.message.chat_id, action="typing")

def error_message(text: str) -> str:
    return f"‚ùå <b>–û—à–∏–±–∫–∞</b>:\n{text}"
EOF

# --- 3. –ü–∞—Ç—á: telegram_bot/bot_main.py ---
cat > telegram_bot/bot_main.py << 'EOF'
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, ContextTypes

from .bot_utils import build_main_menu, send_typing_action, error_message

class CubeBot:
    def __init__(self, application, bot_db):
        self.application = application
        self.bot_db = bot_db
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))

    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user = update.effective_user
        self.bot_db.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–£–ë-1063 Control Bot.\n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: <b>{access_level}</b>.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
        )
        await update.message.reply_text(welcome_text, reply_markup=menu, parse_mode="HTML")

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        access_level = self.bot_db.get_user_access_level(update.effective_user.id)
        help_text = (
            "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ö–£–ë-1063 Control Bot</b>\n\n"
            "‚Ä¢ <b>üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è</b> ‚Äî —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ <b>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî –∏—Å—Ç–æ—Ä–∏—è –∑–Ω–∞—á–µ–Ω–∏–π\n"
            "‚Ä¢ <b>üîÑ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π</b> ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤\n"
            "‚Ä¢ <b>‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏</b> ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:"
        )
        await update.message.reply_text(help_text, reply_markup=build_main_menu(access_level), parse_mode="HTML")

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await send_typing_action(update, context)
        # ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –≤—ã–≤–æ–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏

    async def confirm_reset_alarms(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="reset_alarms_confirmed")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="main_menu")]
        ]
        await query.edit_message_text(
            "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b>\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏?",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="HTML"
        )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        data = query.data
        if data == "reset_alarms":
            await self.confirm_reset_alarms(update, context)
        elif data == "reset_alarms_confirmed":
            # ... –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å, –ø–æ–∫–∞–∑–∞—Ç—å —É—Å–ø–µ—Ö/–æ—à–∏–±–∫—É
            await query.edit_message_text("üîÑ –í—Å–µ –∞–≤–∞—Ä–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã.")
        elif data == "main_menu":
            access_level = self.bot_db.get_user_access_level(query.from_user.id)
            await query.edit_message_text(
                "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
                reply_markup=build_main_menu(access_level)
            )
        # ... –¥—Ä—É–≥–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
EOF

# --- 4. –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç ---
git add telegram_bot/bot_main.py telegram_bot/bot_utils.py
git commit -m "UX: –£–ª—É—á—à–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Telegram-–±–æ—Ç–∞ (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è, –æ—à–∏–±–∫–∏, —Å–ø—Ä–∞–≤–∫–∞, inline-–∫–Ω–æ–ø–∫–∏, typing...)"

echo "‚úÖ –ü–∞—Ç—á UX —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω—ë–Ω! –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—à—å –≤–µ—Ç–∫—É: git push origin feature/ux-improvements"