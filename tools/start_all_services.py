#!/usr/bin/env python3
"""
–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ö–£–ë-1063
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
"""

import os
import sys
import time
import signal
import subprocess
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
ROOT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
sys.path.insert(0, ROOT_DIR)

# –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä–∞
try:
    from core.config_manager import get_config
    config = get_config()
except ImportError:
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ConfigManager. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PyYAML.")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
log_file = config.config_dir / "logs" / "start_services.log"
log_file.parent.mkdir(exist_ok=True)

logging.basicConfig(
    level=getattr(logging, config.system.log_level),
    format="%(asctime)s %(levelname)s [START] %(message)s",
    handlers=[
        logging.FileHandler(log_file, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

BANNER = (
    "üéØ –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã –ö–£–ë-1063 (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)...\n" +
    "=" * 75
)

# –î–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
def get_enabled_services():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∫–ª—é—á–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    services = []
    
    # Gateway (–æ—Å–Ω–æ–≤–Ω–æ–π —à–ª—é–∑)
    if config.services.gateway_enabled:
        services.append({
            "name": f"Gateway (Modbus TCP {config.modbus_tcp.port} + DB)",
            "cmd": f"{sys.executable} -m modbus.gateway",
            "delay": 3
        })
    
    # Dashboard (Streamlit)
    if config.services.dashboard_enabled:
        services.append({
            "name": f"Dashboard (Streamlit {config.services.dashboard_port})",
            "cmd": f"streamlit run dashboard/app.py --server.port {config.services.dashboard_port}",
            "delay": 1
        })
    
    # Telegram Bot
    if config.services.telegram_enabled:
        services.append({
            "name": "Telegram Bot",
            "cmd": f"{sys.executable} telegram_bot/run_bot.py",
            "delay": 1
        })
    
    # WebSocket Server (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if config.services.websocket_enabled:
        services.append({
            "name": f"WebSocket Server ({config.services.websocket_port})",
            "cmd": f"{sys.executable} publish/websocket_server.py",
            "delay": 1
        })
    
    # MQTT Publisher (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
    if config.services.mqtt_enabled:
        services.append({
            "name": "MQTT Publisher",
            "cmd": f"{sys.executable} publish/mqtt.py",
            "delay": 1
        })
    
    return services

SERVICES = get_enabled_services()


def check_port_available(port):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞"""
    import socket
    try:
        with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
            s.bind(('localhost', port))
            return True
    except:
        return False


def wait_for_service(name, port, timeout=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    import socket
    start_time = time.time()
    
    while time.time() - start_time < timeout:
        try:
            with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
                s.settimeout(1)
                result = s.connect_ex(('localhost', port))
                if result == 0:
                    logging.info(f"‚úÖ {name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
                    return True
        except:
            pass
        time.sleep(1)
    
    logging.warning(f"‚ö†Ô∏è {name} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç —á–µ—Ä–µ–∑ {timeout}—Å")
    return False


def main():
    print(BANNER)
    print(f"üìÇ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {ROOT_DIR}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö –ø–æ—Ä—Ç–æ–≤
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
    ports_to_check = []
    if config.services.gateway_enabled:
        ports_to_check.append(config.modbus_tcp.port)
    if config.services.dashboard_enabled:
        ports_to_check.append(config.services.dashboard_port)
    if config.services.websocket_enabled:
        ports_to_check.append(config.services.websocket_port)
    for port in ports_to_check:
        if not check_port_available(port):
            logging.error(f"‚ùå –ü–æ—Ä—Ç {port} —É–∂–µ –∑–∞–Ω—è—Ç!")
            return 1
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    env = os.environ.copy()
    env["PYTHONPATH"] = f".:{env.get('PYTHONPATH', '')}"
    env["PYTHONUNBUFFERED"] = "1"  # –î–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –ª–æ–≥–æ–≤
    
    processes = []
    
    try:
        # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
        for service in SERVICES:
            name = service["name"]
            cmd = service["cmd"]
            delay = service.get("delay", 1)
            optional = service.get("optional", False)
            
            try:
                logging.info(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                process = subprocess.Popen(
                    cmd, 
                    shell=True, 
                    env=env, 
                    cwd=ROOT_DIR,
                    stdout=subprocess.PIPE,
                    stderr=subprocess.STDOUT,
                    universal_newlines=True
                )
                
                processes.append({
                    "name": name,
                    "process": process,
                    "optional": optional
                })
                
                logging.info(f"‚úÖ {name} –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
                
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
                if delay > 0:
                    time.sleep(delay)
                
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}"
                if optional:
                    logging.warning(f"‚ö†Ô∏è {error_msg} (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å)")
                else:
                    logging.error(error_msg)
                    if not optional:
                        raise
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫–ª—é—á–µ–≤—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
        service_checks = []
        if config.services.gateway_enabled:
            service_checks.append(("Gateway", config.modbus_tcp.port))
        if config.services.dashboard_enabled:
            service_checks.append(("Dashboard", config.services.dashboard_port))
        if config.services.websocket_enabled:
            service_checks.append(("WebSocket", config.services.websocket_port))
        
        for name, port in service_checks:
            wait_for_service(name, port, timeout=15)
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
        print("\n" + "=" * 70)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –∑–∞–ø—É—â–µ–Ω–∞ (—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è)!")
        print("=" * 70)
        
        if config.services.dashboard_enabled:
            print(f"üìä Dashboard:        http://localhost:{config.services.dashboard_port}")
        
        if config.services.gateway_enabled:
            print(f"üîß Modbus TCP:       localhost:{config.modbus_tcp.port}")
        
        if config.services.websocket_enabled:
            print(f"üåê WebSocket:        ws://localhost:{config.services.websocket_port}")
        
        if config.services.telegram_enabled:
            print("ü§ñ Telegram Bot:     –∞–∫—Ç–∏–≤–µ–Ω")
        
        if config.services.mqtt_enabled:
            print("üì° MQTT Publisher:   –∞–∫—Ç–∏–≤–µ–Ω")
            
        print("=" * 70)
        print("üìã –õ–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–æ–≤:")
        print(f"   logs/gateway1.log      - –æ—Å–Ω–æ–≤–Ω–æ–π —à–ª—é–∑ (RS485‚Üí–ë–î‚ÜíModbus TCP {config.modbus_tcp.port})")
        print(f"   logs/dashboard.log     - –≤–µ–±-–¥–∞—à–±–æ—Ä–¥ (–ø–æ—Ä—Ç {config.services.dashboard_port})")
        print(f"   logs/telegram.log      - telegram bot")
        print(f"   logs/start_services.log - —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç")
        print("=" * 60)
        print("‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤")
        print("=" * 60)
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        while True:
            time.sleep(5)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            for service in processes:
                proc = service["process"]
                if proc.poll() is not None:
                    # –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                    logging.error(f"‚ùå {service['name']} –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è (–∫–æ–¥: {proc.returncode})")
                    if not service["optional"]:
                        raise Exception(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å {service['name']} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
    
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    except Exception as e:
        logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        print("\nüîÑ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        
        # –°–Ω–∞—á–∞–ª–∞ –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
        for service in reversed(processes):
            name = service["name"]
            proc = service["process"]
            
            if proc.poll() is None:
                try:
                    logging.info(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name}...")
                    
                    if "Streamlit" in name:
                        # Streamlit –ª—É—á—à–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —á–µ—Ä–µ–∑ SIGINT
                        proc.send_signal(signal.SIGINT)
                    else:
                        proc.terminate()
                        
                except Exception as e:
                    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        deadline = time.time() + 10
        for service in reversed(processes):
            name = service["name"]
            proc = service["process"]
            
            if proc.poll() is None:
                try:
                    remaining = max(0, deadline - time.time())
                    proc.wait(timeout=remaining)
                    logging.info(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except subprocess.TimeoutExpired:
                    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                    try:
                        proc.kill()
                        proc.wait(timeout=5)
                        logging.info(f"üíÄ {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    except:
                        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {name}")
                except KeyboardInterrupt:
                    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π Ctrl+C - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–±–∏–≤–∞–µ–º –≤—Å–µ
                    logging.warning("‚ö° –ü–æ–≤—Ç–æ—Ä–Ω—ã–π Ctrl+C - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
                    try:
                        proc.kill()
                    except:
                        pass
        
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return 0


if __name__ == "__main__":
    sys.exit(main())