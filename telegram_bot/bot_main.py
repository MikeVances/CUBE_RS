#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ö–£–ë-1063
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫.
"""

import os
import sys
import json
import logging
import asyncio
import sqlite3
from typing import Dict, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# –ò–º–ø–æ—Ä—Ç —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
try:
    from core.config_manager import get_config
    from core.security_manager import log_security_event
    from core.log_filter import setup_secure_logging
    config = get_config()
    SECURITY_AVAILABLE = True
except ImportError as e:
    if "security_manager" in str(e) or "log_filter" in str(e):
        from core.config_manager import get_config
        config = get_config()
        SECURITY_AVAILABLE = False
        logging.warning("‚ö†Ô∏è –ú–æ–¥—É–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã - –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
    else:
        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å ConfigManager. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω PyYAML.")
        sys.exit(1)

# Telegram Bot imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from bot_database import TelegramBotDB
from bot_permissions import check_user_permission, check_command_rate_limit, get_user_access_level
from bot_utils import (
    format_sensor_data, format_system_stats, 
    build_main_menu, build_confirmation_menu, build_back_menu, build_stats_menu,
    send_typing_action, send_upload_action,
    error_message, success_message, info_message, warning_message, loading_message,
    truncate_text
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
log_file = config.config_dir / "logs" / "telegram.log"
log_file.parent.mkdir(exist_ok=True)

logging.basicConfig(
    level=getattr(logging, config.system.log_level),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ö–†–ò–¢–ò–ß–ù–û: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —É—Ç–µ—á–∫–∏ —Ç–æ–∫–µ–Ω–æ–≤
if SECURITY_AVAILABLE:
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä —Å–µ–∫—Ä–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–≥–µ—Ä–æ–≤
    security_filter = setup_secure_logging()
    logger.info("üîê –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–∏–ª—å—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –¥–ª—è –ª–æ–≥–æ–≤")
else:
    # Fallback: –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ 
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("telegram.ext").setLevel(logging.WARNING)
    logging.getLogger("telegram.request").setLevel(logging.WARNING)

class KUBTelegramBot:
    """Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–£–ë-1063 —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π"""
    
    def __init__(self, token: str):
        self.token = token
        self.config = config  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä
        
        # –ù–ï —Å–æ–∑–¥–∞–µ–º UnifiedKUBSystem - —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.kub_system = None
        self.bot_db = TelegramBotDB()
        
        # Telegram Application
        self.application = None
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.config.telegram.admin_users)} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
        logger.info("ü§ñ KUBTelegramBot —Å UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    # =======================================================================
    # –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò –ß–ï–†–ï–ó SQLite (–≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ RS485)
    # =======================================================================
    
    def get_current_data_from_db(self):
        """–ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π)"""
        try:
            import sqlite3
            with sqlite3.connect("kub_data.db") as conn:
                cursor = conn.execute("""
                    SELECT temp_inside, temp_target, humidity, co2, nh3, pressure,
                           ventilation_level, ventilation_target, active_alarms,
                           active_warnings, updated_at 
                    FROM latest_data WHERE id=1
                """)
                row = cursor.fetchone()
                if row:
                    return {
                        'temp_inside': row[0] if row[0] else 0,  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã Gateway
                        'temp_target': row[1] if row[1] else 0,
                        'humidity': row[2] if row[2] else 0,
                        'co2': row[3] if row[3] else 0,
                        'nh3': row[4] if row[4] else 0,
                        'pressure': row[5] if row[5] else 0,
                        'ventilation_level': row[6] if row[6] else 0,
                        'ventilation_target': row[7] if row[7] else 0,
                        'active_alarms': row[8] if row[8] else 0,
                        'active_warnings': row[9] if row[9] else 0,
                        'updated_at': row[10],
                        'connection_status': 'connected' if row[10] else 'disconnected'
                    }
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            return None

    def add_write_command_to_db(self, register: int, value: int, user_info: str):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å (–≤—ã–ø–æ–ª–Ω–∏—Ç –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)"""
        try:
            import sqlite3
            import uuid
            from datetime import datetime
            
            command_id = str(uuid.uuid4())[:8]
            
            with sqlite3.connect("kub_commands.db") as conn:
                conn.execute("""
                    INSERT INTO write_commands 
                    (id, register, value, user_info, created_at, status, priority)
                    VALUES (?, ?, ?, ?, ?, 'pending', 1)
                """, (command_id, register, value, user_info, datetime.now().isoformat()))
                conn.commit()
            
            logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞: reg=0x{register:04X}, val={value}, id={command_id}")
            return True, command_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False, str(e)

    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
    # =======================================================================
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = update.effective_user
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if SECURITY_AVAILABLE:
            log_security_event("BOT_START_ATTEMPT", user_id=user.id, details={
                "username": user.username,
                "first_name": user.first_name,
                "has_args": bool(context.args)
            })
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
        await send_typing_action(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        invitation_code = None
        if context.args:
            # –ò—â–µ–º –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ invite_XXXXXXXX
            for arg in context.args:
                if arg.startswith('invite_'):
                    invitation_code = arg.replace('invite_', '')
                    break
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = self.bot_db.get_user(user.id)
        
        if existing_user:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            welcome_text = (
                f"üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {user.first_name or user.username}!\n\n"
                f"**–ö–£–ë-1063 Control Bot**\n"
                f"üîê –í–∞—à —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: **{access_level}**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
            )
            
            await update.message.reply_text(
                welcome_text, 
                reply_markup=menu, 
                parse_mode="Markdown"
            )
            
            self.bot_db.log_user_command(user.id, "start", None, True)
            return
        
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
        if not invitation_code:
            # –ù–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è - –æ—Ç–∫–ª–æ–Ω—è–µ–º –¥–æ—Å—Ç—É–ø
            await update.message.reply_text(
                "üîí **–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω**\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã –ö–£–ë-1063 –∑–∞ —Å—Å—ã–ª–∫–æ–π-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º.\n\n"
                "üìã **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø:**\n"
                "1. –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ\n"
                "2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é\n"
                "3. –ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–∏—Å—Ç–µ–º–µ",
                parse_mode="Markdown"
            )
            return
        
        # –ï—Å—Ç—å –∫–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ
        try:
            import sqlite3
            import datetime
            
            conn = sqlite3.connect('kub_commands.db')
            cursor = conn.cursor()
            
            # –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            cursor.execute('''
                SELECT invitation_code, invited_by, access_level, expires_at, used_by
                FROM user_invitations 
                WHERE invitation_code = ?
            ''', (invitation_code,))
            
            invitation = cursor.fetchone()
            
            if not invitation:
                conn.close()
                await update.message.reply_text(
                    "‚ùå **–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ**\n\n"
                    "–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª.\n"
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    parse_mode="Markdown"
                )
                return
            
            code, invited_by, level, expires_at_str, used_by = invitation
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
            if used_by:
                conn.close()
                await update.message.reply_text(
                    "‚ùå **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ**\n\n"
                    "–≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ.\n"
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    parse_mode="Markdown"
                )
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
            expires_at = datetime.datetime.fromisoformat(expires_at_str)
            if datetime.datetime.now() > expires_at:
                conn.close()
                await update.message.reply_text(
                    "‚è∞ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ**\n\n"
                    "–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏—Å—Ç—ë–∫.\n"
                    "–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤–æ–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
                    parse_mode="Markdown"
                )
                return
            
            # –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ - —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.bot_db.register_user(
                telegram_id=user.id,
                username=user.username,
                first_name=user.first_name,
                last_name=user.last_name,
                access_level=level
            )
            
            # –û—Ç–º–µ—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ
            cursor.execute('''
                UPDATE user_invitations 
                SET used_by = ?, used_at = ?
                WHERE invitation_code = ?
            ''', (user.id, datetime.datetime.now().isoformat(), invitation_code))
            
            conn.commit()
            conn.close()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–º
            inviter_info = self.bot_db.get_user(invited_by)
            inviter_name = inviter_info.get('username', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä') if inviter_info else '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
            
            menu = build_main_menu(level)
            
            level_names = {
                'user': 'üë§ User (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)',
                'operator': '‚öôÔ∏è Operator (–û–ø–µ—Ä–∞—Ç–æ—Ä)',
                'engineer': 'üîß Engineer (–ò–Ω–∂–µ–Ω–µ—Ä)'
            }
            
            welcome_text = (
                f"üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–£–ë-1063 Control Bot!**\n\n"
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n\n"
                f"‚úÖ **–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞**\n"
                f"üîê **–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:** {level_names.get(level, level)}\n"
                f"üë§ **–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç:** @{inviter_name}\n\n"
                f"**–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–∞—Ç—á–∏–∫–æ–≤ –ö–£–ë-1063\n"
                f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                f"‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π (–ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞)\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
            )
            
            await update.message.reply_text(
                welcome_text, 
                reply_markup=menu, 
                parse_mode="Markdown"
            )
            
            self.bot_db.log_user_command(user.id, "start", f"invite_{invitation_code}", True)
            logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—é {invitation_code}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            await update.message.reply_text(
                error_message(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {str(e)}"),
                parse_mode="Markdown"
            )
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_user_permission(user.id, "read", self.bot_db):
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"), 
                parse_mode="Markdown"
            )
            return

        try:
            await send_typing_action(update, context)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
            data = self.get_current_data_from_db()
            
            if data:
                status_text = format_sensor_data(data)
            else:
                status_text = error_message(
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ö–£–ë-1063\n\n"
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É:\n"
                    "`python tools/start_all_services.py`"
                )
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            status_text = truncate_text(status_text, 4000)
            
            await update.message.reply_text(
                status_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
            
            self.bot_db.log_user_command(user.id, "read", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await update.message.reply_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        user = update.effective_user

        if not check_user_permission(user.id, "read", self.bot_db):
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
                parse_mode="Markdown"
            )
            return

        try:
            await send_typing_action(update, context)
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ UnifiedKUBSystem
            stats_text = "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ö–£–ë-1063**\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã
            data = self.get_current_data_from_db()
            if data:
                stats_text += f"üîÑ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** `{data.get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
                stats_text += f"üå°Ô∏è **–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** `{data.get('temp_inside', 0):.1f}¬∞C`\n"
                stats_text += f"üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** `{data.get('humidity', 0):.1f}%`\n"
                stats_text += f"üö® **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤–∞—Ä–∏–∏:** `{data.get('active_alarms', 0)}`\n"
            else:
                stats_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.bot_db.get_user_stats(user.id)
            
            if user_stats:
                stats_text += f"\n**üë§ –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: `{user_stats.get('total_commands', 0)}`\n"
                stats_text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: `{user_stats.get('commands_today', 0)}`\n"
                stats_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: `{user_stats.get('success_rate', 0):.1f}%`\n"
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_stats_menu(access_level)
            
            stats_text = truncate_text(stats_text, 4000)
            
            await update.message.reply_text(
                stats_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
            
            self.bot_db.log_user_command(user.id, "stats", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"),
                parse_mode="Markdown"
            )

    # =======================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–õ–Ø–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    # =======================================================================
    
    async def cmd_promote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /promote - –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        user = update.effective_user
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤
        if SECURITY_AVAILABLE:
            log_security_event("PRIVILEGE_ESCALATION_ATTEMPT", user_id=user.id, details={
                "username": user.username,
                "args": context.args,
                "is_admin": user.id in self.config.telegram.admin_users
            }, level="WARNING" if user.id not in self.config.telegram.admin_users else "INFO")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if user.id not in self.config.telegram.admin_users:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            args = context.args
            if len(args) < 2:
                await update.message.reply_text(
                    "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/promote @username —É—Ä–æ–≤–µ–Ω—å`\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:\n"
                    "‚Ä¢ `user` - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ\n"
                    "‚Ä¢ `operator` - —á—Ç–µ–Ω–∏–µ + —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π\n"
                    "‚Ä¢ `admin` - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
                    "‚Ä¢ `engineer` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø",
                    parse_mode="Markdown"
                )
                return
            
            username = args[0].replace('@', '')
            new_level = args[1].lower()
            
            if new_level not in ['user', 'operator', 'admin', 'engineer']:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            target_user = self.bot_db.find_user_by_username(username)
            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
            success = self.bot_db.set_user_access_level(target_user['telegram_id'], new_level)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è `{new_level}`",
                    parse_mode="Markdown"
                )
                logger.info(f"üîù –ê–¥–º–∏–Ω {user.id} –ø–æ–≤—ã—Å–∏–ª @{username} –¥–æ {new_level}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã promote: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        user = update.effective_user
        
        if user.id not in self.config.telegram.admin_users:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            users = self.bot_db.get_all_users()
            
            if not users:
                await update.message.reply_text("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üë• **–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**\n\n"
            
            for user_data in users:
                username = user_data.get('username', '–Ω–µ—Ç')
                first_name = user_data.get('first_name', '')
                access_level = user_data.get('access_level', 'user')
                is_active = user_data.get('is_active', True)
                
                status = "‚úÖ" if is_active else "‚ùå"
                
                text += f"{status} **{first_name}** (@{username})\n"
                text += f"   ID: `{user_data['telegram_id']}`\n"
                text += f"   –î–æ—Å—Ç—É–ø: `{access_level}`\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            if len(text) > 4000:
                parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
                for part in parts:
                    await update.message.reply_text(part, parse_mode="Markdown")
            else:
                await update.message.reply_text(text, parse_mode="Markdown")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã users: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        user = update.effective_user
        
        await send_typing_action(update, context)
        
        access_level = self.bot_db.get_user_access_level(user.id)
        
        help_text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ö–£–ë-1063 Control Bot**\n\n"
            "**üì± –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**\n"
            "‚Ä¢ `/start` ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/status` ‚Äî –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ `/stats` ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ `/help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        )
        
        if user.id in self.config.telegram.admin_users or access_level in ['admin', 'engineer']:
            help_text += (
                "**üëë –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:**\n"
                "‚Ä¢ `/promote @user —É—Ä–æ–≤–µ–Ω—å` ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞\n"
                "‚Ä¢ `/users` ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                "‚Ä¢ `/switch_level <—É—Ä–æ–≤–µ–Ω—å>` ‚Äî –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è\n"
                "‚Ä¢ `/level_info` ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ\n"
                "‚Ä¢ `/block_user ID` ‚Äî –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ `/unblock_user ID` ‚Äî —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
            )
        
        help_text += f"**üîê –í–ê–® –£–†–û–í–ï–ù–¨ –î–û–°–¢–£–ü–ê:** `{access_level}`\n"
        
        menu = build_main_menu(access_level)
        
        await update.message.reply_text(
            help_text,
            reply_markup=menu,
            parse_mode="Markdown"
        )

    async def cmd_switch_level(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /switch_level - –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
        current_level = self.bot_db.get_user_access_level(user.id)
        if current_level not in ['admin', 'engineer']:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞", 
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if not args:
            await update.message.reply_text(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/switch_level <—É—Ä–æ–≤–µ–Ω—å> [—á–∞—Å—ã]`\n\n"
                "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:**\n"
                "‚Ä¢ `user` ‚Äî –±–∞–∑–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å\n"
                "‚Ä¢ `operator` ‚Äî –æ–ø–µ—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å\n"
                "‚Ä¢ `engineer` ‚Äî –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å\n" 
                "‚Ä¢ `admin` ‚Äî –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã:**\n"
                "‚Ä¢ `/switch_level user` ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ user –Ω–∞ 24 —á–∞—Å–∞\n"
                "‚Ä¢ `/switch_level operator 2` ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ operator –Ω–∞ 2 —á–∞—Å–∞\n"
                "‚Ä¢ `/switch_level restore` ‚Äî –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å",
                parse_mode="Markdown"
            )
            return
        
        target_level = args[0].lower()
        duration_hours = int(args[1]) if len(args) > 1 else 24
        
        try:
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
            if target_level == 'restore':
                success = self.bot_db.restore_user_original_level(user.id)
                if success:
                    new_level = self.bot_db.get_user_access_level(user.id)
                    await update.message.reply_text(
                        f"üîÑ **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞**\n\n"
                        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: `{new_level}`",
                        parse_mode="Markdown"
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ü–µ–ª–µ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
            valid_levels = ['user', 'operator', 'engineer', 'admin']
            if target_level not in valid_levels:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: `{target_level}`\n"
                    f"–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_levels)}",
                    parse_mode="Markdown"
                )
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å
            success = self.bot_db.set_user_temporary_level(user.id, target_level, duration_hours)
            if success:
                level_info = self.bot_db.get_user_level_info(user.id)
                await update.message.reply_text(
                    f"üïê **–í—Ä–µ–º–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω**\n\n"
                    f"–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å: `{target_level}`\n"
                    f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration_hours} —á–∞—Å(–æ–≤)\n"
                    f"–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å: `{level_info.get('original_level')}`\n\n"
                    f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/switch_level restore` –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.",
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_level_info(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /level_info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞"""
        user = update.effective_user
        
        try:
            level_info = self.bot_db.get_user_level_info(user.id)
            if not level_info:
                await update.message.reply_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
                return
            
            current_level = level_info.get('current_level')
            original_level = level_info.get('original_level')
            is_temporary = level_info.get('is_temporary')
            temp_expires = level_info.get('temp_expires')
            
            info_text = f"üîê **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞**\n\n"
            info_text += f"**–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** `{current_level}`\n"
            
            if is_temporary and original_level:
                info_text += f"**–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:** `{original_level}`\n"
                info_text += f"**–°—Ç–∞—Ç—É—Å:** –í—Ä–µ–º–µ–Ω–Ω—ã–π\n"
                if temp_expires:
                    info_text += f"**–ò—Å—Ç–µ–∫–∞–µ—Ç:** {temp_expires}\n"
                info_text += f"\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `/switch_level restore` –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è."
            else:
                info_text += f"**–°—Ç–∞—Ç—É—Å:** –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∞
            permissions = self.bot_db.get_access_permissions(current_level)
            if permissions:
                info_text += f"\n**üîì –í–∞—à–∏ –ø—Ä–∞–≤–∞:**\n"
                if permissions.get('can_read'):
                    info_text += "‚Ä¢ ‚úÖ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
                if permissions.get('can_write'):
                    info_text += "‚Ä¢ ‚úÖ –ó–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥\n"
                if permissions.get('can_reset_alarms'):
                    info_text += "‚Ä¢ ‚úÖ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π\n"
            
            await update.message.reply_text(info_text, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_block_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /block_user - –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if SECURITY_AVAILABLE:
            log_security_event("USER_BLOCK_ATTEMPT", user_id=user.id, details={
                "username": user.username,
                "args": context.args
            }, level="WARNING")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        access_level = self.bot_db.get_user_access_level(user.id)
        if access_level not in ['engineer', 'admin']:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if not args:
            await update.message.reply_text(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/block_user ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/block_user 123456789`\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/users` –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Ö ID.",
                parse_mode="Markdown"
            )
            return
        
        try:
            target_user_id = int(args[0])
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
            if target_user_id == user.id:
                await update.message.reply_text("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è")
                return
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = self.bot_db.deactivate_user(target_user_id)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                target_user = self.bot_db.get_user(target_user_id)
                target_username = target_user.get('username', 'Unknown') if target_user else 'Unknown'
                
                await update.message.reply_text(
                    f"üîí **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                    f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{target_username} (ID: {target_user_id})\n"
                    f"üëÆ‚Äç‚ôÇÔ∏è **–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª:** @{user.username or 'Unknown'}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.",
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_unblock_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /unblock_user - —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        access_level = self.bot_db.get_user_access_level(user.id)
        if access_level not in ['engineer', 'admin']:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", 
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = context.args
        if not args:
            await update.message.reply_text(
                "üìù **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:** `/unblock_user ID_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`\n\n"
                "**–ü—Ä–∏–º–µ—Ä:** `/unblock_user 123456789`\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ‚Üí –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è** "
                "–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
                parse_mode="Markdown"
            )
            return
        
        try:
            target_user_id = int(args[0])
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º is_active = 1)
            try:
                with sqlite3.connect('kub_commands.db') as conn:
                    cursor = conn.execute("""
                        UPDATE telegram_users 
                        SET is_active = 1, last_active = CURRENT_TIMESTAMP
                        WHERE telegram_id = ?
                    """, (target_user_id,))
                    
                    success = cursor.rowcount > 0
            except Exception as db_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {db_error}")
                success = False
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                target_user = self.bot_db.get_user(target_user_id)
                target_username = target_user.get('username', 'Unknown') if target_user else 'Unknown'
                
                await update.message.reply_text(
                    f"‚úÖ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω**\n\n"
                    f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{target_username} (ID: {target_user_id})\n"
                    f"üëÆ‚Äç‚ôÇÔ∏è **–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª:** @{user.username or 'Unknown'}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
                    parse_mode="Markdown"
                )
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω.")
                
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERY (INLINE –ö–ù–û–ü–ö–ò)
    # =======================================================================
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        try:
            await send_typing_action(query, context)
            
            if data == "show_status":
                await self._handle_show_status(query, context)
            elif data == "refresh_status":
                await self._handle_refresh_status(query, context)
            elif data == "show_stats":
                await self._handle_show_stats(query, context)
            elif data == "refresh_stats":
                await self._handle_refresh_stats(query, context)
            elif data == "reset_alarms":
                await self._handle_reset_alarms(query, context)
            elif data == "reset_alarms_confirmed":
                await self._handle_confirm_reset_alarms(query, context)
            elif data == "main_menu":
                await self._handle_main_menu(query, context)
            elif data == "show_help":
                await self._handle_show_help(query, context)
            elif data == "settings":
                await self._handle_settings(query, context)
            
            # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö
            elif data == "manage_users":
                await self._handle_manage_users(query, context)
            elif data == "switch_level_menu":
                await self._handle_switch_level_menu(query, context)
            elif data == "system_config":
                await self._handle_system_config(query, context)
            elif data == "system_logs":
                await self._handle_system_logs(query, context)
            elif data == "permissions_config":
                await self._handle_permissions_config(query, context)
            elif data == "backup_config":
                await self._handle_backup_config(query, context)
            
            # –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
            elif data == "list_users":
                await self._handle_list_users(query, context)
            elif data == "invite_user":
                await self._handle_invite_user(query, context)
            elif data == "block_user":
                await self._handle_block_user(query, context)
            elif data == "unblock_user":
                await self._handle_unblock_user(query, context)
            elif data == "change_permissions":
                await self._handle_change_permissions(query, context)
            elif data == "user_stats":
                await self._handle_user_stats(query, context)
            
            # –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –£–†–û–í–ù–ï–ô
            elif data.startswith("temp_level_"):
                level = data.replace("temp_level_", "")
                await self._handle_temp_level(query, context, level)
            elif data == "restore_level":
                await self._handle_restore_level(query, context)
            elif data == "level_info_menu":
                await self._handle_level_info_menu(query, context)
            
            # –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
            elif data.startswith("promote_user_"):
                user_id = int(data.replace("promote_user_", ""))
                await self._handle_promote_user_selected(query, context, user_id)
            elif data.startswith("block_user_"):
                user_id = int(data.replace("block_user_", ""))
                await self._handle_block_user_selected(query, context, user_id)
            elif data.startswith("unblock_user_"):
                user_id = int(data.replace("unblock_user_", ""))
                await self._handle_unblock_user_selected(query, context, user_id)
            elif data.startswith("set_level_"):
                parts = data.replace("set_level_", "").split("_")
                user_id = int(parts[0])
                new_level = parts[1]
                await self._handle_set_user_level(query, context, user_id, new_level)
            elif data.startswith("invite_level_"):
                level = data.replace("invite_level_", "")
                await self._handle_invite_level_selected(query, context, level)
            elif data.startswith("confirm_invite_"):
                level = data.replace("confirm_invite_", "")
                await self._handle_confirm_invite(query, context, level)
            elif data.startswith("copy_link_"):
                await query.answer("üìã –°—Å—ã–ª–∫–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—é! –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë –≤—ã—à–µ ‚òùÔ∏è", show_alert=True)
            elif data == "promote_users":
                await self._handle_change_permissions(query, context)
            
            else:
                await query.edit_message_text(
                    error_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"), 
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            access_level = self.bot_db.get_user_access_level(query.from_user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu,
            parse_mode="Markdown"
        )

    async def _handle_show_status(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        await self._handle_refresh_status(query, context)

    async def _handle_refresh_status(self, query, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ SQLite –±–∞–∑—ã"""
        user = query.from_user
        
        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
            data = self.get_current_data_from_db()
            
            if data:
                status_text = format_sensor_data(data)
            else:
                status_text = error_message(
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ö–£–ë-1063\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞\n"
                    "‚Ä¢ –ù–µ—Ç —Å–≤—è–∑–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º\n\n"
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python tools/start_all_services.py`"
                )
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            status_text = truncate_text(status_text, 4000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            try:
                await query.edit_message_text(
                    status_text,
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                if "message is not modified" in str(edit_error).lower():
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await query.answer("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", show_alert=False)
                else:
                    raise edit_error
            
            self.bot_db.log_user_command(user.id, "read", None, data is not None)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_show_stats(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await self._handle_refresh_stats(query, context)

    async def _handle_refresh_stats(self, query, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = query.from_user
        
        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_text = "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ö–£–ë-1063**\n\n"
            
            data = self.get_current_data_from_db()
            if data:
                stats_text += f"üîÑ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** `{data.get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
                stats_text += f"üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** `{data.get('temp_inside', 0):.1f}¬∞C`\n"
                stats_text += f"üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** `{data.get('humidity', 0):.1f}%`\n"
            else:
                stats_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
            
            user_stats = self.bot_db.get_user_stats(user.id)
            if user_stats:
                stats_text += f"\n**üë§ –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: `{user_stats.get('total_commands', 0)}`\n"
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_stats_menu(access_level)
            
            stats_text = truncate_text(stats_text, 4000)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–µ—Ä–µ–¥ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            try:
                await query.edit_message_text(
                    stats_text,
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
            except Exception as edit_error:
                if "message is not modified" in str(edit_error).lower():
                    # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    await query.answer("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞", show_alert=False)
                else:
                    raise edit_error
            
            self.bot_db.log_user_command(user.id, "stats", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_reset_alarms(self, query, context):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"""
        user = query.from_user
        
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        confirmation_menu = build_confirmation_menu("reset_alarms_confirmed", "main_menu")
        
        await query.edit_message_text(
            warning_message("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"),
            reply_markup=confirmation_menu,
            parse_mode="Markdown"
        )

    async def _handle_confirm_reset_alarms(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥"""
        user = query.from_user
        
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            await query.edit_message_text(
                loading_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π..."),
                parse_mode="Markdown"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–µ–≥–∏—Å—Ç—Ä 0x0020, –∑–Ω–∞—á–µ–Ω–∏–µ 1)
            user_info = f"telegram_user_{user.id}_{user.username or user.first_name}"
            success, result = self.add_write_command_to_db(0x0020, 1, user_info)
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            if success:
                await query.edit_message_text(
                    success_message(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\nID –∫–æ–º–∞–Ω–¥—ã: `{result}`\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."),
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                self.bot_db.log_user_command(user.id, "reset_alarms", "0x0020", True)
            else:
                await query.edit_message_text(
                    error_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:\n{result}"),
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                self.bot_db.log_user_command(user.id, "reset_alarms", "0x0020", False)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_show_help(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ callback"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        help_text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ö–£–ë-1063 Control Bot**\n\n"
            "**üîò –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ:**\n"
            "‚Ä¢ üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è ‚Äî —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        )
        
        if access_level in ("operator", "admin", "engineer"):
            help_text += "‚Ä¢ üö® –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π ‚Äî —Å–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤–∞—Ä–∏–π\n"
        
        if access_level in ("admin", "engineer"):
            help_text += "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n"
        
        help_text += f"\n**üîê –í–ê–® –î–û–°–¢–£–ü:** `{access_level}`\n"
        help_text += "\nüí° **–°–æ–≤–µ—Ç:** –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–µ–µ –∫–æ–º–∞–Ω–¥!"
        
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            help_text,
            reply_markup=menu,
            parse_mode="Markdown"
        )

    async def _handle_settings(self, query, context):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        user = query.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        access_level = self.bot_db.get_user_access_level(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        user_info = self.bot_db.get_user(user.id)
        username = user_info.get('username', 'Unknown') if user_info else 'Unknown'
        
        settings_text = (
            f"‚öôÔ∏è **–ù–ê–°–¢–†–û–ô–ö–ò –°–ò–°–¢–ï–ú–´**\n\n"
            f"üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** @{username}\n"
            f"üîê **–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:** `{access_level}`\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫:"
        )
        
        from telegram_bot.bot_utils import build_settings_menu
        menu = build_settings_menu(access_level)
        
        try:
            await query.edit_message_text(
                settings_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            if "message is not modified" in str(edit_error).lower():
                await query.answer("‚öôÔ∏è –ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç–∫—Ä—ã—Ç–æ", show_alert=False)
            else:
                raise edit_error

    # =======================================================================
    # –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ú–ï–ù–Æ –ù–ê–°–¢–†–û–ï–ö
    # =======================================================================

    async def _handle_manage_users(self, query, context):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['operator', 'engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", show_alert=True)
            return
        
        users_text = (
            f"üë• **–£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò**\n\n"
            f"üîê **–í–∞—à —É—Ä–æ–≤–µ–Ω—å:** `{access_level}`\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        
        from telegram_bot.bot_utils import build_user_management_menu
        menu = build_user_management_menu(access_level)
        
        try:
            await query.edit_message_text(
                users_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            if "message is not modified" in str(edit_error).lower():
                await query.answer("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", show_alert=False)
            else:
                raise edit_error

    async def _handle_switch_level_menu(self, query, context):
        """–ú–µ–Ω—é –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è", show_alert=True)
            return
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π (–º–µ—Ç–æ–¥—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
        switch_text = (
            f"üîÑ **–ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –£–†–û–í–ù–Ø –î–û–°–¢–£–ü–ê**\n\n"
            f"üìä **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** `{access_level}`\n\n"
            f"‚ö†Ô∏è **–í—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ:** –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –±—É–¥—É—Ç –∞–∫—Ç–∏–≤–Ω—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã.\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"‚Ä¢ `/switch_level user` - –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ user\n"
            f"‚Ä¢ `/switch_level restore` - –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å\n"
            f"‚Ä¢ `/level_info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Ä–æ–≤–Ω–µ"
        )
        
        from telegram_bot.bot_utils import build_switch_level_menu
        menu = build_switch_level_menu(access_level)
        
        try:
            await query.edit_message_text(
                switch_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            if "message is not modified" in str(edit_error).lower():
                await query.answer("üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è", show_alert=False)
            else:
                raise edit_error

    async def _handle_list_users(self, query, context):
        """–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['operator', 'engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        
        try:
            all_users = self.bot_db.get_all_users()
            
            users_text = f"üë§ **–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô** (–≤—Å–µ–≥–æ: {len(all_users)})\n\n"
            
            for user_data in all_users[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                username = user_data.get('username') or '–ë–µ–∑ username'
                first_name = user_data.get('first_name') or '–ë–µ–∑ –∏–º–µ–Ω–∏'
                user_access_level = user_data.get('access_level', 'user')
                is_active = user_data.get('is_active', True)
                
                status_emoji = "‚úÖ" if is_active else "‚ùå"
                level_emoji = {"user": "üë§", "operator": "üë∑", "engineer": "üîß", "admin": "üëë"}.get(user_access_level, "‚ùì")
                
                users_text += f"{status_emoji} {level_emoji} **{first_name}** (@{username})\n"
                users_text += f"   ID: `{user_data['telegram_id']}` | –£—Ä–æ–≤–µ–Ω—å: `{user_access_level}`\n\n"
            
            if len(all_users) > 10:
                users_text += f"... –∏ –µ—â–µ {len(all_users) - 10} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
            
            from telegram_bot.bot_utils import build_user_management_menu
            menu = build_user_management_menu(access_level)
            
            await query.edit_message_text(
                users_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

    async def _handle_temp_level(self, query, context, level):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –º–µ—Ç–æ–¥—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        await query.answer(f"‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /switch_level {level}", show_alert=True)

    async def _handle_restore_level(self, query, context):
        """–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è"""
        user = query.from_user
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–≥–ª—É—à–∫–∞ - –º–µ—Ç–æ–¥—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
        await query.answer("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /switch_level restore", show_alert=True)

    async def _handle_level_info_menu(self, query, context):
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —É—Ä–æ–≤–Ω–µ –¥–æ—Å—Ç—É–ø–∞"""
        user = query.from_user
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ–∑ –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤
        try:
            current_level = self.bot_db.get_user_access_level(user.id)
            
            info_text = f"‚ÑπÔ∏è **–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û–ë –£–†–û–í–ù–ï –î–û–°–¢–£–ü–ê**\n\n"
            info_text += f"üìä **–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** `{current_level}`\n"
            info_text += f"‚ö° **–°—Ç–∞—Ç—É—Å:** –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            permissions = self.bot_db.get_access_permissions(current_level)
            if permissions:
                info_text += f"\nüîì **–í–∞—à–∏ –ø—Ä–∞–≤–∞:**\n"
                if permissions.get('can_read'):
                    info_text += "‚Ä¢ ‚úÖ –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
                if permissions.get('can_write'):
                    info_text += "‚Ä¢ ‚úÖ –ó–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥\n"
                if permissions.get('can_reset_alarms'):
                    info_text += "‚Ä¢ ‚úÖ –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π\n"
            
            info_text += f"\nüí° **–ö–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:**\n"
            info_text += f"‚Ä¢ `/switch_level user` - –≤—Ä–µ–º–µ–Ω–Ω–æ —Å—Ç–∞—Ç—å user\n"
            info_text += f"‚Ä¢ `/level_info` - –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
            
            from telegram_bot.bot_utils import build_switch_level_menu
            menu = build_switch_level_menu(current_level)
            
            await query.edit_message_text(
                info_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Ä–æ–≤–Ω–µ: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)

    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
    async def _handle_system_config(self, query, context):
        await query.answer("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    async def _handle_system_logs(self, query, context):
        await query.answer("üìã –õ–æ–≥–∏ —Å–∏—Å—Ç–µ–º—ã - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    async def _handle_permissions_config(self, query, context):
        await query.answer("üîê –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∞–º–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    async def _handle_backup_config(self, query, context):
        await query.answer("üíæ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ - –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)

    async def _handle_invite_user(self, query, context):
        """–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—ã–±–æ—Ä —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['operator', 'engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        invite_text = (
            f"‚ûï **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
            f"üîê **–í–∞—à —É—Ä–æ–≤–µ–Ω—å:** `{access_level}`\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n"
            f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:**\n"
            f"‚Ä¢ **üë§ User** - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
            f"‚Ä¢ **‚öôÔ∏è Operator** - —á—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å –∫–æ–º–∞–Ω–¥\n"
            f"‚Ä¢ **üîß Engineer** - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n\n"
            f"–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ."
        )
        
        from telegram_bot.bot_utils import build_invitation_level_menu
        menu = build_invitation_level_menu()
        
        try:
            await query.edit_message_text(
                invite_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            if "message is not modified" in str(edit_error).lower():
                await query.answer("‚ûï –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=False)
            else:
                raise edit_error

    async def _handle_block_user(self, query, context):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        try:
            all_users = self.bot_db.get_all_users()
            active_users = [u for u in all_users if u.get('is_active', True)]
            
            if not active_users:
                await query.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏", show_alert=True)
                return
            
            block_text = (
                f"üîí **–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
                f"**–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:**\n\n"
                f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ:** –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
            )
            
            from telegram_bot.bot_utils import build_user_list_menu
            menu = build_user_list_menu(active_users, "block", access_level)
            
            await query.edit_message_text(
                block_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

    async def _handle_unblock_user(self, query, context):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        try:
            all_users = self.bot_db.get_all_users()
            blocked_users = [u for u in all_users if not u.get('is_active', True)]
            
            if not blocked_users:
                unblock_text = (
                    f"‚úÖ **–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
                    f"üéâ **–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã!**\n\n"
                    f"–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                )
                
                from telegram_bot.bot_utils import build_user_management_menu
                menu = build_user_management_menu(access_level)
                
                await query.edit_message_text(
                    unblock_text,
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
            else:
                unblock_text = (
                    f"‚úÖ **–†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
                    f"**–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:**"
                )
                
                from telegram_bot.bot_utils import build_user_list_menu
                menu = build_user_list_menu(blocked_users, "unblock", access_level)
                
                await query.edit_message_text(
                    unblock_text,
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)

    async def _handle_change_permissions(self, query, context):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level != 'admin':
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞", show_alert=True)
            return
        
        try:
            all_users = self.bot_db.get_all_users()
            
            if not all_users:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            permissions_text = (
                f"üëë **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–†–ê–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
                f"**–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–≥–æ –ø—Ä–∞–≤:**\n\n"
                f"**–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:**\n"
                f"‚Ä¢ üë§ `user` - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ\n"
                f"‚Ä¢ üë∑ `operator` - —á—Ç–µ–Ω–∏–µ + –∑–∞–ø–∏—Å—å\n"
                f"‚Ä¢ üîß `engineer` - —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏\n"
                f"‚Ä¢ üëë `admin` - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø"
            )
            
            from telegram_bot.bot_utils import build_user_list_menu
            menu = build_user_list_menu(all_users, "promote", access_level)
            
            await query.edit_message_text(
                permissions_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∞–≤–∞—Ö: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)

    async def _handle_user_stats(self, query, context):
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['operator', 'engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)
            return
        
        try:
            all_users = self.bot_db.get_all_users()
            
            if not all_users:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_users = len(all_users)
            active_users = sum(1 for u in all_users if u.get('is_active', True))
            inactive_users = total_users - active_users
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—è–º –¥–æ—Å—Ç—É–ø–∞
            level_stats = {}
            for user_data in all_users:
                level = user_data.get('access_level', 'user')
                level_stats[level] = level_stats.get(level, 0) + 1
            
            stats_text = f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô**\n\n"
            stats_text += f"üë• **–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:** {total_users}\n"
            stats_text += f"‚úÖ **–ê–∫—Ç–∏–≤–Ω—ã—Ö:** {active_users}\n"
            stats_text += f"‚ùå **–ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö:** {inactive_users}\n\n"
            
            stats_text += f"**üìä –ü–æ —É—Ä–æ–≤–Ω—è–º –¥–æ—Å—Ç—É–ø–∞:**\n"
            level_emojis = {"user": "üë§", "operator": "üë∑", "engineer": "üîß", "admin": "üëë"}
            for level, count in level_stats.items():
                emoji = level_emojis.get(level, "‚ùì")
                stats_text += f"{emoji} **{level.capitalize()}:** {count} —á–µ–ª.\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
            recent_users = [u for u in all_users if u.get('last_active')][:5]
            if recent_users:
                stats_text += f"\n**üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
                for user_data in recent_users:
                    username = user_data.get('username') or '–ë–µ–∑ username'
                    last_active = user_data.get('last_active', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                    stats_text += f"‚Ä¢ @{username} - {last_active}\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            stats_text += f"\n**üìà –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã:**\n"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            try:
                import sqlite3
                with sqlite3.connect('kub_commands.db') as conn:
                    cursor = conn.execute("SELECT COUNT(*) FROM user_command_history WHERE timestamp > datetime('now', '-24 hours')")
                    commands_24h = cursor.fetchone()[0]
                    
                    cursor = conn.execute("SELECT COUNT(*) FROM user_command_history WHERE timestamp > datetime('now', '-1 hour')")
                    commands_1h = cursor.fetchone()[0]
                    
                    stats_text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥ –∑–∞ —á–∞—Å: {commands_1h}\n"
                    stats_text += f"‚Ä¢ –ö–æ–º–∞–Ω–¥ –∑–∞ —Å—É—Ç–∫–∏: {commands_24h}\n"
            except:
                stats_text += f"‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞\n"
            
            from telegram_bot.bot_utils import build_user_management_menu
            menu = build_user_management_menu(access_level)
            
            await query.edit_message_text(
                stats_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", show_alert=True)

    # =======================================================================
    # –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò
    # =======================================================================

    async def _handle_promote_user_selected(self, query, context, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level != 'admin':
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = self.bot_db.get_user(user_id)
            if not target_user:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            target_username = target_user.get('username', '–ë–µ–∑ username')
            target_first_name = target_user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            current_level = target_user.get('access_level', 'user')
            
            # –ù–µ –ø–æ–∑–≤–æ–ª—è–µ–º –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ
            if user_id == user.id:
                await query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞", show_alert=True)
                return
            
            level_emojis = {"user": "üë§", "operator": "üë∑", "engineer": "üîß", "admin": "üëë"}
            current_emoji = level_emojis.get(current_level, "‚ùì")
            
            promote_text = (
                f"üëë **–ò–ó–ú–ï–ù–ï–ù–ò–ï –ü–†–ê–í –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø**\n\n"
                f"**–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:**\n"
                f"{current_emoji} **{target_first_name}** (@{target_username})\n"
                f"**–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å:** `{current_level}`\n\n"
                f"**–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:**"
            )
            
            from telegram_bot.bot_utils import build_level_selection_menu
            menu = build_level_selection_menu(user_id, current_level)
            
            await query.edit_message_text(
                promote_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

    async def _handle_set_user_level(self, query, context, user_id: int, new_level: str):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level != 'admin':
            await query.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –ø—Ä–∞–≤–∞", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = self.bot_db.get_user(user_id)
            if not target_user:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            target_username = target_user.get('username', '–ë–µ–∑ username')
            target_first_name = target_user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            old_level = target_user.get('access_level', 'user')
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            try:
                with sqlite3.connect('kub_commands.db') as conn:
                    cursor = conn.execute("""
                        UPDATE telegram_users 
                        SET access_level = ?, last_active = CURRENT_TIMESTAMP
                        WHERE telegram_id = ?
                    """, (new_level, user_id))
                    
                    success = cursor.rowcount > 0
            except Exception as db_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —É—Ä–æ–≤–Ω—è: {db_error}")
                success = False
            
            if success:
                level_emojis = {"user": "üë§", "operator": "üë∑", "engineer": "üîß", "admin": "üëë"}
                old_emoji = level_emojis.get(old_level, "‚ùì")
                new_emoji = level_emojis.get(new_level, "‚ùì")
                
                success_text = (
                    f"‚úÖ **–ü–†–ê–í–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø –ò–ó–ú–ï–ù–ï–ù–´**\n\n"
                    f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_first_name} (@{target_username})\n"
                    f"**–ò–∑–º–µ–Ω–µ–Ω–∏–µ:** {old_emoji} `{old_level}` ‚Üí {new_emoji} `{new_level}`\n"
                    f"**–ò–∑–º–µ–Ω–∏–ª:** @{user.username or 'Unknown'}\n\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ."
                )
                
                from telegram_bot.bot_utils import build_user_management_menu
                menu = build_user_management_menu(access_level)
                
                await query.edit_message_text(
                    success_text,
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                
                await query.answer("‚úÖ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑–º–µ–Ω–µ–Ω—ã", show_alert=False)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

    async def _handle_block_user_selected(self, query, context, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è
        if user_id == user.id:
            await query.answer("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = self.bot_db.get_user(user_id)
            if not target_user:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            target_username = target_user.get('username', '–ë–µ–∑ username')
            target_first_name = target_user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            success = self.bot_db.deactivate_user(user_id)
            
            if success:
                block_text = (
                    f"üîí **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ó–ê–ë–õ–û–ö–ò–†–û–í–ê–ù**\n\n"
                    f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_first_name} (@{target_username})\n"
                    f"**–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª:** @{user.username or 'Unknown'}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ —Å–º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏."
                )
                
                from telegram_bot.bot_utils import build_user_management_menu
                menu = build_user_management_menu(access_level)
                
                await query.edit_message_text(
                    block_text,
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                
                await query.answer("üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=False)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

    async def _handle_unblock_user_selected(self, query, context, user_id: int):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            target_user = self.bot_db.get_user(user_id)
            if not target_user:
                await query.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
                return
            
            target_username = target_user.get('username', '–ë–µ–∑ username')
            target_first_name = target_user.get('first_name', '–ë–µ–∑ –∏–º–µ–Ω–∏')
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                with sqlite3.connect('kub_commands.db') as conn:
                    cursor = conn.execute("""
                        UPDATE telegram_users 
                        SET is_active = 1, last_active = CURRENT_TIMESTAMP
                        WHERE telegram_id = ?
                    """, (user_id,))
                    
                    success = cursor.rowcount > 0
            except Exception as db_error:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ: {db_error}")
                success = False
            
            if success:
                unblock_text = (
                    f"‚úÖ **–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ê–ù**\n\n"
                    f"**–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {target_first_name} (@{target_username})\n"
                    f"**–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª:** @{user.username or 'Unknown'}\n\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
                )
                
                from telegram_bot.bot_utils import build_user_management_menu
                menu = build_user_management_menu(access_level)
                
                await query.edit_message_text(
                    unblock_text,
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                
                await query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω", show_alert=False)
            else:
                await query.answer("‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            await query.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

    # =======================================================================
    # –ó–ê–ü–£–°–ö –ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í
    # =======================================================================

    async def start_bot(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã RS485"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot (–±–µ–∑ RS485)...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from modbus.modbus_storage import init_db
            init_db()
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.application = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.cmd_start))
            self.application.add_handler(CommandHandler("status", self.cmd_status))
            self.application.add_handler(CommandHandler("stats", self.cmd_stats))
            self.application.add_handler(CommandHandler("help", self.cmd_help))
            
            # –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–õ–Ø–ú–ò
            self.application.add_handler(CommandHandler("promote", self.cmd_promote))
            self.application.add_handler(CommandHandler("users", self.cmd_users))
            
            # –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï –£–†–û–í–ù–ï–ô –î–û–°–¢–£–ü–ê
            self.application.add_handler(CommandHandler("switch_level", self.cmd_switch_level))
            self.application.add_handler(CommandHandler("level_info", self.cmd_level_info))
            
            # –ë–õ–û–ö–ò–†–û–í–ö–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
            self.application.add_handler(CommandHandler("block_user", self.cmd_block_user))
            self.application.add_handler(CommandHandler("unblock_user", self.cmd_unblock_user))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))

            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤—Ä—É—á–Ω—É—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            await self.application.updater.start_polling(drop_pending_updates=True)
            
            logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
            try:
                expired_count = self.bot_db.check_and_restore_expired_levels()
                if expired_count > 0:
                    logger.info(f"‚è∞ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {expired_count} –∏—Å—Ç–µ–∫—à–∏—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞")
            except AttributeError:
                logger.info("‚ö†Ô∏è –ú–µ—Ç–æ–¥—ã –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω–µ–π –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
            
            try:
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                await asyncio.sleep(float('inf'))
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            finally:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

    async def _handle_invite_level_selected(self, query, context, level: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['operator', 'engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if level == 'engineer' and access_level not in ['engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Engineer –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", show_alert=True)
            return
            
        level_names = {
            'user': 'User (–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)',
            'operator': 'Operator (–û–ø–µ—Ä–∞—Ç–æ—Ä)',
            'engineer': 'Engineer (–ò–Ω–∂–µ–Ω–µ—Ä)'
        }
        
        confirmation_text = (
            f"‚úÖ **–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ü–†–ò–ì–õ–ê–®–ï–ù–ò–Ø**\n\n"
            f"üéØ **–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:** `{level_names.get(level, level)}`\n"
            f"‚è∞ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 24 —á–∞—Å–∞\n"
            f"üë§ **–ü—Ä–∏–≥–ª–∞—à–∞–µ—Ç:** @{user.username}\n\n"
            f"–°–æ–∑–¥–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?"
        )
        
        from telegram_bot.bot_utils import build_invitation_confirmation_menu
        menu = build_invitation_confirmation_menu(level)
        
        try:
            await query.edit_message_text(
                confirmation_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
        except Exception as edit_error:
            if "message is not modified" in str(edit_error).lower():
                await query.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è", show_alert=False)
            else:
                raise edit_error

    async def _handle_confirm_invite(self, query, context, level: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        if access_level not in ['operator', 'engineer', 'admin']:
            await query.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤", show_alert=True)
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
            bot_username = self.application.bot.username if hasattr(self, 'application') and hasattr(self.application, 'bot') else 'your_bot'
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞—ë–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –±–∞–∑–µ (–º–µ—Ç–æ–¥—ã –∑–∞–≥—Ä—É–∑—è—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞)
            import uuid
            import datetime
            import sqlite3
            
            invitation_code = str(uuid.uuid4())[:8].upper()
            expires_at = datetime.datetime.now() + datetime.timedelta(hours=24)
            
            # –ü—Ä—è–º–∞—è –≤—Å—Ç–∞–≤–∫–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            conn = sqlite3.connect('kub_commands.db')
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT INTO user_invitations (invitation_code, invited_by, access_level, expires_at)
                VALUES (?, ?, ?, ?)
            ''', (invitation_code, user.id, level, expires_at.isoformat()))
            
            conn.commit()
            conn.close()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É
            invite_link = f"https://t.me/{bot_username}?start=invite_{invitation_code}"
            
            level_names = {
                'user': 'üë§ User',
                'operator': '‚öôÔ∏è Operator', 
                'engineer': 'üîß Engineer'
            }
            
            # –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏
            info_text = (
                f"üéâ **–ü–†–ò–ì–õ–ê–®–ï–ù–ò–ï –°–û–ó–î–ê–ù–û**\n\n"
                f"üìã **–î–µ—Ç–∞–ª–∏:**\n"
                f"‚Ä¢ **–ö–æ–¥:** `{invitation_code}`\n"
                f"‚Ä¢ **–£—Ä–æ–≤–µ–Ω—å:** {level_names.get(level, level)}\n"
                f"‚Ä¢ **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è:** 24 —á–∞—Å–∞\n"
                f"‚Ä¢ **–°–æ–∑–¥–∞–ª:** @{user.username}\n\n"
                f"üì§ **–°—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è**"
            )
            
            from telegram_bot.bot_utils import build_user_management_menu
            menu = build_user_management_menu(access_level)
            
            await query.edit_message_text(
                info_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
            # –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —Ç–æ–ª—å–∫–æ —Å—Å—ã–ª–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            link_text = (
                f"üîó **–°—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ:**\n\n"
                f"{invite_link}\n\n"
                f"üì± **–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É –≤—ã—à–µ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è**\n"
                f"üì§ **–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏**"
            )
            
            from telegram_bot.bot_utils import build_invitation_share_menu
            share_menu = build_invitation_share_menu(invite_link, access_level)
            
            await query.message.reply_text(
                link_text,
                reply_markup=share_menu,
                parse_mode="Markdown"
            )
            
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ {invitation_code} –¥–ª—è —É—Ä–æ–≤–Ω—è {level} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user.id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {e}")
            from telegram_bot.bot_utils import build_user_management_menu
            menu = build_user_management_menu(access_level)
            
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {str(e)}"),
                reply_markup=menu,
                parse_mode="Markdown"
            )

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("ü§ñ TELEGRAM BOT –î–õ–Ø –ö–£–ë-1063 (–¶–ï–ù–¢–†–ê–õ–ò–ó–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø)")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–Ω—Ñ–∏–≥-–º–µ–Ω–µ–¥–∂–µ—Ä
    token = config.telegram.token
    
    if not token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ config/bot_secrets.json:")
        print('{"telegram": {"bot_token": "your_token", "admin_users": [your_id]}}')
        print("üí° –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_BOT_TOKEN")
        return

    logger.info(f"‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ ConfigManager")
    logger.info(f"üìä –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {len(config.telegram.admin_users)}")
    logger.info(f"‚öôÔ∏è –°–µ—Ä–≤–∏—Å—ã –≤–∫–ª—é—á–µ–Ω—ã: telegram={config.services.telegram_enabled}")
    
    # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
    bot = KUBTelegramBot(token)

    try:
        import asyncio
        asyncio.run(bot.start_bot())
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()