#!/usr/bin/env python3
"""
–û—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x00D5
"""

import socket
import struct
import time

def read_single_register_debug(register_address, host='tcp.cloudpub.ru', port=27521):
    """
    –ß–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}...")
        sock.connect((host, port))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Modbus TCP –∑–∞–ø—Ä–æ—Å
        transaction_id = (register_address & 0xFFFF)
        request = struct.pack('>HHHBBHH',
            transaction_id, 0x0000, 0x0006, 0x01, 0x03, register_address, 1
        )
        
        print(f"üì§ –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_address:04X}...")
        print(f"üì§ –ó–∞–ø—Ä–æ—Å: {request.hex()}")
        sock.send(request)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = sock.recv(1024)
        print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
        
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞
        if len(response) >= 9:
            print(f"üìä –ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–∞:")
            print(f"   –î–ª–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞: {len(response)} –±–∞–π—Ç")
            print(f"   Transaction ID: 0x{response[0:2].hex()}")
            print(f"   Protocol ID: 0x{response[2:4].hex()}")
            print(f"   Length: 0x{response[4:6].hex()}")
            print(f"   Unit ID: 0x{response[6]:02X}")
            print(f"   Function Code: 0x{response[7]:02X}")
            
            function_code = response[7]
            
            if function_code == 0x03:
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                byte_count = response[8]
                print(f"   Byte Count: {byte_count}")
                
                if byte_count >= 2:
                    data = response[9:9+byte_count]
                    print(f"   Data: {data.hex()}")
                    
                    value = struct.unpack('>H', data[0:2])[0]
                    print(f"   Raw Value: {value} (0x{value:04X})")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
                    if register_address == 0x00D5:
                        formatted_value = f"{value / 10:.1f}¬∞C"
                    else:
                        formatted_value = f"{value}"
                    
                    print(f"   Formatted Value: {formatted_value}")
                    sock.close()
                    return True, value, formatted_value
                else:
                    print(f"   ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {byte_count} –±–∞–π—Ç")
                    sock.close()
                    return False, None, None
                    
            elif function_code == 0x83:
                # –û—à–∏–±–∫–∞ Modbus
                error_code = response[8] if len(response) > 8 else 0
                error_messages = {
                    1: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
                    2: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞", 
                    3: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤",
                    4: "–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                }
                error_msg = error_messages.get(error_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({error_code})")
                print(f"   ‚ùå –û—à–∏–±–∫–∞ Modbus: {error_msg}")
                sock.close()
                return False, None, None
                
            else:
                print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏: 0x{function_code:02X}")
                sock.close()
                return False, None, None
        else:
            print(f"   ‚ùå –°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç: {len(response)} –±–∞–π—Ç")
            sock.close()
            return False, None, None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False, None, None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
    print("üîç –û–¢–õ–ê–î–û–ß–ù–´–ô –¢–ï–°–¢ –†–ï–ì–ò–°–¢–†–ê 0x00D5")
    print("=" * 60)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–≥–∏—Å—Ç—Ä 0x00D5 (–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)
    register_addr = 0x00D5
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_addr:04X} (–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞)")
    print("=" * 60)
    
    success, raw_value, formatted_value = read_single_register_debug(register_addr)
    
    print("\n" + "=" * 60)
    print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢ –û–¢–õ–ê–î–ö–ò")
    print("=" * 60)
    
    if success:
        print(f"‚úÖ –£–°–ü–ï–•:")
        print(f"   –†–µ–≥–∏—Å—Ç—Ä: 0x{register_addr:04X}")
        print(f"   –°—ã—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {raw_value} (0x{raw_value:04X})")
        print(f"   –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ: {formatted_value}")
        
        if raw_value == 0:
            print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ó–Ω–∞—á–µ–Ω–∏–µ —Ä–∞–≤–Ω–æ 0!")
            print(f"   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print(f"   - –ö–£–ë –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ —Å–µ—Ä–≤–µ—Ä—É")
            print(f"   - –ö–£–ë –≤ —Ä–µ–∂–∏–º–µ –æ–∂–∏–¥–∞–Ω–∏—è")
            print(f"   - –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –æ—Ç–∫–ª—é—á–µ–Ω")
            print(f"   - –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ö–£–ë")
    else:
        print(f"‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä 0x{register_addr:04X}")
    
    print("=" * 60)

if __name__ == "__main__":
    main() 