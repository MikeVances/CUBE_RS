#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import subprocess
import time
import signal
import sys
import os
import psutil

def find_processes_by_name(name_patterns):
    """–ü–æ–∏—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω–∞–º –∏–º–µ–Ω"""
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            cmdline = ' '.join(proc.info['cmdline']) if proc.info['cmdline'] else ''
            for pattern in name_patterns:
                if pattern in cmdline:
                    processes.append(proc)
                    break
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return processes

def stop_process_safely(proc, name, timeout=10):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
    try:
        print(f"üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ {name} (PID: {proc.pid})...")
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º graceful shutdown
        proc.terminate()
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            proc.wait(timeout=timeout)
            print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω gracefully")
            return True
        except psutil.TimeoutExpired:
            print(f"‚ö†Ô∏è {name} –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∑–∞ {timeout}—Å, –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º...")
            proc.kill()
            try:
                proc.wait(timeout=5)
                print(f"üíÄ {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                return True
            except psutil.TimeoutExpired:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å {name}")
                return False
                
    except psutil.NoSuchProcess:
        print(f"‚úÖ {name} —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ {name}: {e}")
        return False

def main():
    print("üõë –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã...")
    print("=" * 50)
    
    # –°–ø–∏—Å–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–≤ –ø–æ—Ä—è–¥–∫–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)
    services = [
        {
            "name": "MQTT Publisher",
            "patterns": ["mqtt.py", "publish/mqtt.py"]
        },
        {
            "name": "Telegram Bot", 
            "patterns": ["telegram_bot.py", "telegram_bot/bot_main.py", "telegram_bot/run_bot.py", "run_bot.py"]
        },
        {
            "name": "WebSocket Server",
            "patterns": ["websocket_server.py", "publish/websocket_server.py"]
        },
        {
            "name": "Dashboard (Streamlit)",
            "patterns": ["streamlit", "dashboard/app.py"]
        },
        {
            "name": "TCP Duplicator",
            "patterns": ["tcp_duplicator.py", "modbus/tcp_duplicator.py"]
        },
        {
            "name": "Gateway (Modbus TCP)",
            "patterns": ["gateway.py", "modbus/gateway.py", "modbus.gateway", "-m modbus.gateway"]
        }
    ]
    
    stopped_count = 0
    total_count = len(services)
    
    for service in services:
        processes = find_processes_by_name(service["patterns"])
        
        if not processes:
            print(f"‚ÑπÔ∏è {service['name']}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
            continue
            
        for proc in processes:
            if stop_process_safely(proc, service["name"]):
                stopped_count += 1
            time.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Å—Ç–∞–Ω–æ–≤–∫–∞–º–∏
    
    print("=" * 50)
    print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {stopped_count}/{total_count} —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–ª–∏—Å—å –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å—ã
    remaining = []
    for service in services:
        processes = find_processes_by_name(service["patterns"])
        if processes:
            remaining.extend([f"{service['name']} (PID: {p.pid})" for p in processes])
    
    if remaining:
        print("‚ö†Ô∏è –û—Å—Ç–∞–≤—à–∏–µ—Å—è –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        for proc in remaining:
            print(f"   - {proc}")
    else:
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    
    print("=" * 50)

if __name__ == "__main__":
    main() 