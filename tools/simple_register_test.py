#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —Å tcp.cloudpub.ru:27521
"""

import socket
import struct
import time

def read_single_register(register_address, host='tcp.cloudpub.ru', port=27521):
    """
    –ß–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä –ø–æ Modbus TCP
    
    Args:
        register_address (int): –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0x0000)
        host (str): –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
        port (int): –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
    
    Returns:
        tuple: (success, value, error_message)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}...")
        sock.connect((host, port))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Modbus TCP –∑–∞–ø—Ä–æ—Å
        transaction_id = (register_address & 0xFFFF)
        request = struct.pack('>HHHBBHH',
            transaction_id, 0x0000, 0x0006, 0x01, 0x03, register_address, 1
        )
        
        print(f"üì§ –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_address:04X}...")
        sock.send(request)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = sock.recv(1024)
        print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if len(response) >= 9:
            function_code = response[7]
            
            if function_code == 0x03:
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                byte_count = response[8]
                if byte_count >= 2:
                    value = struct.unpack('>H', response[9:11])[0]
                    print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä 0x{register_address:04X} = 0x{value:04X} ({value})")
                    sock.close()
                    return True, value, None
                else:
                    error_msg = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ"
                    print(f"‚ùå {error_msg}")
                    sock.close()
                    return False, None, error_msg
                    
            elif function_code == 0x83:
                # –û—à–∏–±–∫–∞ Modbus
                error_code = response[8] if len(response) > 8 else 0
                error_messages = {
                    1: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
                    2: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞", 
                    3: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤",
                    4: "–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                }
                error_msg = error_messages.get(error_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({error_code})")
                print(f"‚ùå –û—à–∏–±–∫–∞ Modbus: {error_msg}")
                sock.close()
                return False, None, error_msg
                
            else:
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏: 0x{function_code:02X}"
                print(f"‚ùå {error_msg}")
                sock.close()
                return False, None, error_msg
        else:
            error_msg = "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç"
            print(f"‚ùå {error_msg}")
            sock.close()
            return False, None, error_msg
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
        print(f"‚ùå {error_msg}")
        return False, None, error_msg

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîç –ü–†–û–°–¢–û–ô –¢–ï–°–¢ –ß–¢–ï–ù–ò–Ø –†–ï–ì–ò–°–¢–†–ê")
    print("=" * 50)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
    test_registers = [
        0x0000,  # –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
        0x0001,  # –í–ª–∞–∂–Ω–æ—Å—Ç—å
        0x0002,  # CO2
        0x0084,  # –ó–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä
        0x00D5,  # –¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    ]
    
    results = {}
    
    for reg_addr in test_registers:
        print(f"\n{'='*50}")
        success, value, error = read_single_register(reg_addr)
        
        if success:
            results[f"0x{reg_addr:04X}"] = value
            print(f"‚úÖ –£–°–ü–ï–•: 0x{reg_addr:04X} = {value}")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: 0x{reg_addr:04X} - {error}")
        
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print(f"\n{'='*50}")
    print("üìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 50)
    
    if results:
        for reg_addr, value in results.items():
            print(f"‚Ä¢ {reg_addr}: 0x{value:04X} ({value})")
    else:
        print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    print("=" * 50)

if __name__ == "__main__":
    main() 