"""
Modbus TCP‚Äë—à–ª—é–∑ –¥–ª—è –ö–£–ë‚Äë1063 (–®–õ–Æ–ó 1) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ß–∏—Ç–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ TimeWindowManager (RS485) –∏ —Ä–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä—É–µ—Ç –∏—Ö –≤ Modbus TCP (–ø–æ—Ä—Ç 5021).
"""

import sys
import os
# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞ –ø–æ–≤–µ—Ä—Ö –æ–¥–Ω–æ–∏–º—ë–Ω–Ω–æ–≥–æ PyPI-–º–æ–¥—É–ª—è
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import time
import threading
import logging

from pymodbus.server import StartTcpServer
from pymodbus.datastore import ModbusSlaveContext, ModbusServerContext
from pymodbus.datastore import ModbusSequentialDataBlock

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥—É–ª–µ–π
try:
    from modbus.modbus_storage import init_db, update_data
    from modbus.time_window_manager import (
        request_rs485_read_all,
        get_time_window_manager
    )
except ImportError:
    try:
        from .modbus_storage import init_db, update_data
        from .time_window_manager import (
            request_rs485_read_all,
            get_time_window_manager
        )
    except ImportError:
        # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        import modbus_storage
        import time_window_manager
        init_db = modbus_storage.init_db
        update_data = modbus_storage.update_data
        request_rs485_read_all = time_window_manager.request_rs485_read_all
        get_time_window_manager = time_window_manager.get_time_window_manager

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s %(levelname)s [GATEWAY1] %(message)s",
    handlers=[
        logging.FileHandler("gateway1.log", encoding="utf-8"),
        logging.StreamHandler(),
    ],
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
store_lock = threading.Lock()

# –ú–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –∞–¥—Ä–µ—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
DATA_TO_REGISTER_MAP = {
    "software_version": 0x0301,
    "temp_inside": 0x00D5,
    "temp_target": 0x00D4,
    "humidity": 0x0084,
    "co2": 0x0085,
    "nh3": 0x0086,
    "pressure": 0x0083,
    "ventilation_level": 0x00D1,
    "ventilation_target": 0x00D0,
    "ventilation_scheme": 0x00D2,
    "day_counter": 0x00D3,
}

MODBUS_TCP_PORT = 5021
SERIAL_PORT = "/dev/tty.usbserial-210"


def create_modbus_datastore():
    """–°–æ–∑–¥–∞—ë—Ç –±–ª–æ–∫ Holding Registers –Ω–∞ –ø–æ–ª–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –∞–¥—Ä–µ—Å–æ–≤ (0..65535)."""
    registers = [0] * 65536
    return ModbusSequentialDataBlock(0, registers)


def convert_value_to_register(value, field_name):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –ë–î –≤ —Ñ–æ—Ä–º–∞—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
    if value is None:
        return 0
    
    try:
        if field_name == "software_version":
            # –í–µ—Ä—Å–∏—è –ü–û –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ "4.14" -> 414
            if isinstance(value, str):
                parts = value.split('.')
                if len(parts) == 2:
                    return int(parts[0]) * 100 + int(parts[1])
            return 0
        
        elif field_name in ["temp_inside", "temp_target"]:
            # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö
            temp = float(value) * 10
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (two's complement –¥–ª—è 16-bit)
            if temp < 0:
                return int(65536 + temp)
            return int(temp)
        
        elif field_name in ["humidity", "pressure", "nh3"]:
            # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö
            val = float(value) * 10
            if val < 0:
                return int(65536 + val)
            return int(val)
        
        elif field_name in ["ventilation_level", "ventilation_target"]:
            # –í–µ–Ω—Ç–∏–ª—è—Ü–∏—è –≤ –¥–µ—Å—è—Ç—ã—Ö –¥–æ–ª—è—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            return int(float(value) * 10)
        
        elif field_name == "ventilation_scheme":
            # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —á–∏—Å–ª–æ
            if isinstance(value, str):
                return 1 if "—Ç—É–Ω–Ω–µ–ª—å–Ω–∞—è" in value.lower() else 0
            return int(value)
        
        else:
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–∞–∫ —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
            return int(float(value))
            
    except (ValueError, TypeError):
        return 0


def update_register_from_data(store, register_addr, value):
    """–ü–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ Holding Register."""
    try:
        with store_lock:
            store.setValues(3, register_addr, [int(value)])  # FC=3 Holding
        logging.debug(f"üì° –û–±–Ω–æ–≤–ª–µ–Ω —Ä–µ–≥–∏—Å—Ç—Ä 0x{register_addr:04X} = {int(value)}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_addr:04X}: {e}")


def update_modbus_registers_from_data(store, data):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç Modbus —Ä–µ–≥–∏—Å—Ç—Ä—ã –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–ù–ï —á–∏—Ç–∞–µ—Ç RS485 –ø–æ–≤—Ç–æ—Ä–Ω–æ)"""
    updated_count = 0
    
    for field_name, register_addr in DATA_TO_REGISTER_MAP.items():
        if field_name in data and data[field_name] is not None:
            register_value = convert_value_to_register(data[field_name], field_name)
            update_register_from_data(store, register_addr, register_value)
            updated_count += 1
    
    logging.info(f"üì° –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} Modbus —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    return updated_count


def run_modbus_server(context):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Modbus TCP‚Äë—Å–µ—Ä–≤–µ—Ä –Ω–∞ 5021 –ø–æ—Ä—Ç—É."""
    try:
        logging.info(f"üß≤ –ó–∞–ø—É—Å–∫ Modbus TCP‚Äë—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {MODBUS_TCP_PORT}‚Ä¶")
        StartTcpServer(context=context, address=("0.0.0.0", MODBUS_TCP_PORT))
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ TCP —Å–µ—Ä–≤–µ—Ä–∞: {e}")


def main():
    logging.info("üöÄ –ó–∞–ø—É—Å–∫ –®–õ–Æ–ó–ê 1: Modbus TCP —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ç–æ—Ä –¥–ª—è –ö–£–ë‚Äë1063")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω —Å –Ω—É–∂–Ω—ã–º –ø–æ—Ä—Ç–æ–º
    try:
        manager = get_time_window_manager(serial_port=SERIAL_PORT)
        logging.info(f"‚úÖ TimeWindowManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (–ø–æ—Ä—Ç: {SERIAL_PORT})")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ TimeWindowManager: {e}")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î (SQLite) –¥–ª—è —Å–≤–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö/–¥–∞—à–±–æ—Ä–¥–∞
    try:
        init_db()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise

    # –°–æ–∑–¥–∞–Ω–∏–µ Modbus‚Äë–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–æ–¥–∏–Ω slave, —Ç–æ–ª—å–∫–æ Holding Registers)
    try:
        store = ModbusSlaveContext(hr=create_modbus_datastore())
        context = ModbusServerContext(slaves=store, single=True)
        logging.info("‚úÖ Modbus –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–∑–¥–∞–Ω (65536 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤)")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
        raise

    # –§–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫: –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º RS485 –∏ –æ–±–Ω–æ–≤–ª—è–µ–º datastore + –ë–î
    def update_loop():
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        
        while True:
            try:
                data_result = [None]

                def data_callback(data):
                    logging.info(f"üîî Callback –≤—ã–∑–≤–∞–Ω —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
                    data_result[0] = data

                logging.info("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ TimeWindowManager‚Ä¶")
                request_rs485_read_all(data_callback)

                # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –æ–±—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ 20 —Å–µ–∫—É–Ω–¥
                start_time = time.time()
                while data_result[0] is None and time.time() - start_time < 20:
                    time.sleep(0.1)

                data = data_result[0]
                if data and data.get("connection_status") == "connected":
                    logging.info(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: temp={data.get('temp_inside')}¬∞C, humidity={data.get('humidity')}%, CO2={data.get('co2')}ppm")

                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Modbus —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
                    # –ë–ï–ó –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è RS485
                    try:
                        updated_count = update_modbus_registers_from_data(store, data)
                        logging.info(f"üì° –†–µ—Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞–Ω–æ {updated_count} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –≤ Modbus TCP")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏ –≤ Modbus: {e}")

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ SQLite –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞
                    try:
                        update_data(**data)
                        logging.info("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î")
                    except Exception as e:
                        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {e}")
                else:
                    logging.warning("‚ö†Ô∏è –ù–µ—Ç —Å–≤—è–∑–∏ —Å –ö–£–ë‚Äë1063 –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

                time.sleep(10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —Ä–µ—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏–∏: {e}")
                time.sleep(3)

    # –°—Ç–∞—Ä—Ç—É–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –∏ TCP‚Äë—Å–µ—Ä–≤–µ—Ä
    threading.Thread(target=update_loop, daemon=True).start()
    run_modbus_server(context)


if __name__ == "__main__":
    main()