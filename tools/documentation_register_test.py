#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–£–ë-1063
"""

import socket
import struct
import time

def read_single_register(register_address, host='tcp.cloudpub.ru', port=27521):
    """
    –ß–∏—Ç–∞–µ—Ç –æ–¥–∏–Ω —Ä–µ–≥–∏—Å—Ç—Ä –ø–æ Modbus TCP
    
    Args:
        register_address (int): –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞
        host (str): –•–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞
        port (int): –ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
    
    Returns:
        tuple: (success, value, error_message)
    """
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        
        print(f"üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {host}:{port}...")
        sock.connect((host, port))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º Modbus TCP –∑–∞–ø—Ä–æ—Å
        transaction_id = (register_address & 0xFFFF)
        request = struct.pack('>HHHBBHH',
            transaction_id, 0x0000, 0x0006, 0x01, 0x03, register_address, 1
        )
        
        print(f"üì§ –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register_address:04X}...")
        sock.send(request)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
        response = sock.recv(1024)
        print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        if len(response) >= 9:
            function_code = response[7]
            
            if function_code == 0x03:
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                byte_count = response[8]
                if byte_count >= 2:
                    value = struct.unpack('>H', response[9:11])[0]
                    print(f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä 0x{register_address:04X} = 0x{value:04X} ({value})")
                    sock.close()
                    return True, value, None
                else:
                    error_msg = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ"
                    print(f"‚ùå {error_msg}")
                    sock.close()
                    return False, None, error_msg
                    
            elif function_code == 0x83:
                # –û—à–∏–±–∫–∞ Modbus
                error_code = response[8] if len(response) > 8 else 0
                error_messages = {
                    1: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
                    2: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞", 
                    3: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤",
                    4: "–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                }
                error_msg = error_messages.get(error_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({error_code})")
                print(f"‚ùå –û—à–∏–±–∫–∞ Modbus: {error_msg}")
                sock.close()
                return False, None, error_msg
                
            else:
                error_msg = f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏: 0x{function_code:02X}"
                print(f"‚ùå {error_msg}")
                sock.close()
                return False, None, error_msg
        else:
            error_msg = "–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –æ—Ç–≤–µ—Ç"
            print(f"‚ùå {error_msg}")
            sock.close()
            return False, None, error_msg
            
    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
        print(f"‚ùå {error_msg}")
        return False, None, error_msg

def format_value(value, unit_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    if unit_type == 'temperature':
        return f"{value / 10:.1f}¬∞C"
    elif unit_type == 'humidity':
        return f"{value / 10:.1f}%"
    elif unit_type == 'co2':
        return f"{value} ppm"
    elif unit_type == 'pressure':
        return f"{value / 10:.1f} –ü–∞"
    elif unit_type == 'nh3':
        return f"{value / 10:.1f} ppm"
    elif unit_type == 'version':
        return f"{value / 100:.2f}"
    elif unit_type == 'raw':
        return f"{value}"
    else:
        return f"{value}"

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üîç –¢–ï–°–¢ –†–ï–ì–ò–°–¢–†–û–í –ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò –ö–£–ë-1063")
    print("=" * 60)
    
    # –†–µ–≥–∏—Å—Ç—Ä—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–£–ë-1063
    test_registers = [
        (0x0301, "–í–µ—Ä—Å–∏—è –ü–û", 'version'),
        (0x0083, "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ", 'pressure'),
        (0x0084, "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å", 'humidity'),
        (0x0085, "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2", 'co2'),
        (0x0086, "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3", 'nh3'),
        (0x00D0, "–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏", 'raw'),
        (0x00D1, "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏", 'raw'),
        (0x00D2, "–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏", 'raw'),
        (0x00D4, "–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 'temperature'),
        (0x00D5, "–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞", 'temperature'),
        (0x00D6, "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏", 'temperature'),
    ]
    
    results = {}
    
    for reg_addr, description, unit_type in test_registers:
        print(f"\n{'='*60}")
        print(f"üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {description}")
        print(f"üìç –ê–¥—Ä–µ—Å: 0x{reg_addr:04X}")
        print(f"üìä –¢–∏–ø: {unit_type}")
        
        success, value, error = read_single_register(reg_addr)
        
        if success:
            formatted_value = format_value(value, unit_type)
            results[f"0x{reg_addr:04X}"] = {
                'description': description,
                'raw_value': value,
                'formatted_value': formatted_value,
                'unit_type': unit_type
            }
            print(f"‚úÖ –£–°–ü–ï–•: {formatted_value}")
        else:
            print(f"‚ùå –û–®–ò–ë–ö–ê: {error}")
        
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –í—ã–≤–æ–¥–∏–º —Å–≤–æ–¥–∫—É
    print(f"\n{'='*60}")
    print("üìã –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    if results:
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        categories = {
            "üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê": [],
            "üíß –í–õ–ê–ñ–ù–û–°–¢–¨": [],
            "üå¨Ô∏è –î–ê–í–õ–ï–ù–ò–ï": [],
            "üåø –ì–ê–ó–´": [],
            "‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï": [],
            "üìä –°–ò–°–¢–ï–ú–ê": []
        }
        
        for reg_addr, data in results.items():
            desc = data['description']
            if '—Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞' in desc.lower():
                categories["üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê"].append((reg_addr, data))
            elif '–≤–ª–∞–∂–Ω–æ—Å—Ç—å' in desc.lower():
                categories["üíß –í–õ–ê–ñ–ù–û–°–¢–¨"].append((reg_addr, data))
            elif '–¥–∞–≤–ª–µ–Ω–∏–µ' in desc.lower():
                categories["üå¨Ô∏è –î–ê–í–õ–ï–ù–ò–ï"].append((reg_addr, data))
            elif 'co2' in desc.lower() or 'nh3' in desc.lower():
                categories["üåø –ì–ê–ó–´"].append((reg_addr, data))
            elif '–≤–µ–Ω—Ç–∏–ª—è—Ü–∏—è' in desc.lower() or '—É—Ä–æ–≤–µ–Ω—å' in desc.lower():
                categories["‚öôÔ∏è –£–ü–†–ê–í–õ–ï–ù–ò–ï"].append((reg_addr, data))
            else:
                categories["üìä –°–ò–°–¢–ï–ú–ê"].append((reg_addr, data))
        
        for category, items in categories.items():
            if items:
                print(f"\n{category}:")
                for reg_addr, data in items:
                    print(f"   ‚Ä¢ {data['description']}: {data['formatted_value']} (0x{reg_addr})")
    else:
        print("‚ùå –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    print("=" * 60)

if __name__ == "__main__":
    main() 