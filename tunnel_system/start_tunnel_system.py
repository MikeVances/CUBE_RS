#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Tunnel System
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –æ–¥–Ω–æ–π –º–∞—à–∏–Ω–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import os
import sys
import time
import subprocess
import threading
import signal
import requests
from typing import List, Dict

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
processes: List[subprocess.Popen] = []

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–∞ –¥–ª—è graceful shutdown"""
    print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã...")
    stop_all_processes()
    sys.exit(0)

def stop_all_processes():
    """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤"""
    for proc in processes:
        try:
            proc.terminate()
            proc.wait(timeout=5)
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except subprocess.TimeoutExpired:
            proc.kill()
            print(f"üíÄ –ü—Ä–æ—Ü–µ—Å—Å {proc.pid} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ {proc.pid}: {e}")

def run_process(name: str, command: List[str], cwd: str = None) -> subprocess.Popen:
    """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    print(f"üöÄ –ó–∞–ø—É—Å–∫ {name}...")
    print(f"   –ö–æ–º–∞–Ω–¥–∞: {' '.join(command)}")
    
    try:
        proc = subprocess.Popen(
            command,
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            universal_newlines=True,
            cwd=cwd
        )
        processes.append(proc)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def log_output():
            while True:
                line = proc.stdout.readline()
                if not line:
                    break
                print(f"[{name}] {line.strip()}")
        
        log_thread = threading.Thread(target=log_output, daemon=True)
        log_thread.start()
        
        return proc
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ {name}: {e}")
        return None

def wait_for_service(url: str, timeout: int = 30) -> bool:
    """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞"""
    print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ {url}...")
    
    start_time = time.time()
    while time.time() - start_time < timeout:
        try:
            response = requests.get(url, timeout=5)
            if response.status_code == 200:
                print(f"‚úÖ –°–µ—Ä–≤–∏—Å {url} –≥–æ—Ç–æ–≤")
                return True
        except:
            pass
        
        time.sleep(2)
    
    print(f"‚ùå –°–µ—Ä–≤–∏—Å {url} –Ω–µ –≥–æ—Ç–æ–≤ –∑–∞ {timeout} —Å–µ–∫—É–Ω–¥")
    return False

def register_test_user() -> str:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üë§ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    try:
        response = requests.post('http://localhost:8080/api/register', json={
            'username': 'testuser',
            'email': 'test@example.com',
            'password': 'password123'
        }, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            user_id = result.get('user_id')
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_id}")
            return user_id
        else:
            print(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (—ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            # –ü—Ä–æ–±—É–µ–º –≤–æ–π—Ç–∏
            login_response = requests.post('http://localhost:8080/api/login', json={
                'username': 'testuser',
                'password': 'password123'
            }, timeout=10)
            
            if login_response.status_code == 200:
                result = login_response.json()
                user_id = result['user_info']['user_id']
                print(f"‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω: {user_id}")
                return user_id
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    return "user_123456"  # Fallback ID

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üåê –ó–∞–ø—É—Å–∫ Tunnel System Demo")
    print("=" * 50)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import flask
        import websocket_server
        print("‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install -r tunnel_system/requirements.txt")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏
    current_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(current_dir)
    
    try:
        # 1. –ó–∞–ø—É—Å–∫ Tunnel Broker
        broker_proc = run_process(
            "Tunnel Broker",
            [sys.executable, "tunnel_broker.py", "--host", "localhost", "--port", "8080"],
            cwd=current_dir
        )
        
        if not broker_proc:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Tunnel Broker")
            return
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±—Ä–æ–∫–µ—Ä–∞
        if not wait_for_service("http://localhost:8080/health", timeout=15):
            print("‚ùå Tunnel Broker –Ω–µ –≥–æ—Ç–æ–≤")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = register_test_user()
        
        # 2. –ó–∞–ø—É—Å–∫ Farm Client
        farm_proc = run_process(
            "Farm Client",
            [
                sys.executable, "farm_client.py",
                "--broker", "http://localhost:8080",
                "--farm-id", "demo-farm-001",
                "--owner-id", user_id,
                "--farm-name", "–î–µ–º–æ —Ñ–µ—Ä–º–∞ –ö–£–ë-1063"
            ],
            cwd=current_dir
        )
        
        if not farm_proc:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Farm Client")
            return
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Ñ–µ—Ä–º—ã
        time.sleep(5)
        
        # 3. –ó–∞–ø—É—Å–∫ Mobile App
        mobile_proc = run_process(
            "Mobile App",
            [
                sys.executable, "mobile_app.py",
                "--broker", "http://localhost:8080",
                "--host", "localhost",
                "--port", "5000"
            ],
            cwd=current_dir
        )
        
        if not mobile_proc:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Mobile App")
            return
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –º–æ–±–∏–ª—å–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if wait_for_service("http://localhost:5000", timeout=10):
            print("\n" + "=" * 50)
            print("üéâ Tunnel System —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            print("=" * 50)
            print(f"üìä Tunnel Broker:  http://localhost:8080/health")
            print(f"üì± Mobile App:     http://localhost:5000")
            print(f"üë§ –¢–µ—Å—Ç. –ª–æ–≥–∏–Ω:    testuser / password123")
            print(f"üè≠ –§–µ—Ä–º–∞:          demo-farm-001")
            print("=" * 50)
            print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
            print()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª - –∂–¥–µ–º —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        try:
            while True:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ –∂–∏–≤—ã
                for i, proc in enumerate(processes):
                    if proc.poll() is not None:
                        print(f"‚ö†Ô∏è –ü—Ä–æ—Ü–µ—Å—Å {i} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {proc.returncode}")
                
                time.sleep(5)
                
        except KeyboardInterrupt:
            pass
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        stop_all_processes()
        print("‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == '__main__':
    main()