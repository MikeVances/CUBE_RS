#!/usr/bin/env python3
"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Bot
"""

import sqlite3
import json
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from pathlib import Path

logger = logging.getLogger(__name__)

class TelegramBotDB:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram Bot"""
    
    def __init__(self, db_file: str = "kub_commands.db"):
        self.db_file = db_file
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –±–∞–∑–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not Path(db_file).exists():
            raise FileNotFoundError(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å—Ç–∏—Ç–µ init_telegram_db.py")
        
        logger.info(f"üóÑÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {db_file}")
    
    def register_user(self, telegram_id: int, username: str = None, 
                     first_name: str = None, last_name: str = None,
                     access_level: str = "user") -> bool:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
                cursor = conn.execute(
                    "SELECT telegram_id FROM telegram_users WHERE telegram_id = ?",
                    (telegram_id,)
                )
                exists = cursor.fetchone()
                
                if exists:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    conn.execute("""
                        UPDATE telegram_users 
                        SET username = ?, first_name = ?, last_name = ?, 
                            last_active = CURRENT_TIMESTAMP
                        WHERE telegram_id = ?
                    """, (username, first_name, last_name, telegram_id))
                    
                    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username}) –æ–±–Ω–æ–≤–ª—ë–Ω")
                else:
                    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    conn.execute("""
                        INSERT INTO telegram_users 
                        (telegram_id, username, first_name, last_name, access_level)
                        VALUES (?, ?, ?, ?, ?)
                    """, (telegram_id, username, first_name, last_name, access_level))
                    
                    logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} (@{username}) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å —É—Ä–æ–≤–Ω–µ–º {access_level}")
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return False
    
    def get_user(self, telegram_id: int) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT * FROM telegram_users WHERE telegram_id = ?
                """, (telegram_id,))
                
                row = cursor.fetchone()
                if row:
                    return dict(row)
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return None
    
    def get_user_access_level(self, telegram_id: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = self.get_user(telegram_id)
        if user:
            return user.get('access_level', 'user')
        return 'user'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def set_user_access_level(self, telegram_id: int, access_level: str) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    UPDATE telegram_users 
                    SET access_level = ?
                    WHERE telegram_id = ?
                """, (access_level, telegram_id))
                
                if cursor.rowcount > 0:
                    logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {telegram_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Ä–æ–≤–µ–Ω—å {access_level}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–º–µ–Ω—ã —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞ {telegram_id}: {e}")
            return False
    
    def get_access_permissions(self, access_level: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.execute("""
                    SELECT * FROM access_config WHERE access_level = ?
                """, (access_level,))
                
                row = cursor.fetchone()
                if row:
                    permissions = dict(row)
                    # –ü–∞—Ä—Å–∏–º JSON —Å —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–º–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞–º–∏
                    if permissions.get('allowed_registers'):
                        try:
                            permissions['allowed_registers'] = json.loads(permissions['allowed_registers'])
                        except:
                            permissions['allowed_registers'] = []
                    return permissions
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è {access_level}: {e}")
            return None
    
    def log_user_command(self, telegram_id: int, command_type: str, 
                        register_address: str = None, success: bool = True) -> bool:
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.execute("""
                    INSERT INTO user_command_history 
                    (telegram_id, command_type, register_address, success)
                    VALUES (?, ?, ?, ?)
                """, (telegram_id, command_type, register_address, success))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç—á–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                conn.execute("""
                    UPDATE telegram_users 
                    SET total_commands = total_commands + 1,
                        last_command_at = CURRENT_TIMESTAMP,
                        last_active = CURRENT_TIMESTAMP
                    WHERE telegram_id = ?
                """, (telegram_id,))
                
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã {telegram_id}: {e}")
            return False
    
    def get_user_command_count_last_hour(self, telegram_id: int) -> int:
        """–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM user_command_history 
                    WHERE telegram_id = ? 
                    AND timestamp > datetime('now', '-1 hour')
                """, (telegram_id,))
                
                return cursor.fetchone()[0]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Å—á—ë—Ç–∞ –∫–æ–º–∞–Ω–¥ {telegram_id}: {e}")
            return 0
    
    def get_user_stats(self, telegram_id: int) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            user = self.get_user(telegram_id)
            if not user:
                return {}
            
            with sqlite3.connect(self.db_file) as conn:
                # –ö–æ–º–∞–Ω–¥—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM user_command_history 
                    WHERE telegram_id = ? 
                    AND timestamp > datetime('now', '-1 hour')
                """, (telegram_id,))
                commands_last_hour = cursor.fetchone()[0]
                
                # –ö–æ–º–∞–Ω–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
                cursor = conn.execute("""
                    SELECT COUNT(*) FROM user_command_history 
                    WHERE telegram_id = ? 
                    AND date(timestamp) = date('now')
                """, (telegram_id,))
                commands_today = cursor.fetchone()[0]
                
                # –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ–º–∞–Ω–¥–∞
                cursor = conn.execute("""
                    SELECT command_type, register_address, timestamp 
                    FROM user_command_history 
                    WHERE telegram_id = ? 
                    ORDER BY timestamp DESC LIMIT 1
                """, (telegram_id,))
                last_command = cursor.fetchone()
                
                return {
                    'user_info': user,
                    'commands_last_hour': commands_last_hour,
                    'commands_today': commands_today,
                    'total_commands': user.get('total_commands', 0),
                    'last_command': last_command,
                    'registered_at': user.get('created_at'),
                    'last_active': user.get('last_active')
                }
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {telegram_id}: {e}")
            return {}
    
    def get_all_users(self, active_only: bool = True) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                conn.row_factory = sqlite3.Row
                
                query = "SELECT * FROM telegram_users"
                if active_only:
                    query += " WHERE is_active = 1"
                query += " ORDER BY created_at DESC"
                
                cursor = conn.execute(query)
                return [dict(row) for row in cursor.fetchall()]
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return []
    
    def deactivate_user(self, telegram_id: int) -> bool:
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    UPDATE telegram_users 
                    SET is_active = 0
                    WHERE telegram_id = ?
                """, (telegram_id,))
                
                success = cursor.rowcount > 0
                if success:
                    logger.info(f"üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
                
                return success
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id}: {e}")
            return False
    
    def cleanup_old_history(self, days: int = 30) -> int:
        """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥"""
        try:
            with sqlite3.connect(self.db_file) as conn:
                cursor = conn.execute("""
                    DELETE FROM user_command_history 
                    WHERE timestamp < datetime('now', '-{} days')
                """.format(days))
                
                deleted_count = cursor.rowcount
                logger.info(f"üßπ –£–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥")
                
                return deleted_count
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
            return 0

# =============================================================================
# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø
# =============================================================================

def test_bot_database():
    """–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ TelegramBotDB")
    print("=" * 40)
    
    try:
        db = TelegramBotDB()
        
        # –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        test_user_id = 123456789
        print(f"1. –¢–µ—Å—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {test_user_id}...")
        
        success = db.register_user(
            telegram_id=test_user_id,
            username="test_user",
            first_name="Test",
            last_name="User"
        )
        print(f"   –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {'‚úÖ' if success else '‚ùå'}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("2. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...")
        user = db.get_user(test_user_id)
        if user:
            print(f"   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: @{user['username']}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: {user['access_level']}")
        else:
            print("   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥
        print("3. –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥...")
        db.log_user_command(test_user_id, "read", None, True)
        db.log_user_command(test_user_id, "write", "0x0020", True)
        
        # –¢–µ—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("4. –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
        stats = db.get_user_stats(test_user_id)
        if stats:
            print(f"   ‚úÖ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: {stats.get('total_commands', 0)}")
            print(f"   –ó–∞ —á–∞—Å: {stats.get('commands_last_hour', 0)}")
            print(f"   –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {stats.get('commands_today', 0)}")
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

if __name__ == "__main__":
    test_bot_database()