#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ SecurityManager —Å ConfigManager –∏ Telegram Bot
"""

import os
import sys
import json
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(__file__))

def test_config_manager():
    """–¢–µ—Å—Ç ConfigManager"""
    print("üîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ConfigManager...")
    
    try:
        from core.config_manager import get_config
        config = get_config()
        
        print(f"‚úÖ RS485 –ø–æ—Ä—Ç: {config.rs485.port}")
        print(f"‚úÖ Gateway –ø–æ—Ä—Ç: {config.modbus_tcp.port}")
        print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {config.database.file}")
        print(f"‚úÖ –ê–¥–º–∏–Ω–æ–≤ –≤ Telegram: {len(config.telegram.admin_users)}")
        print(f"‚úÖ Modbus —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤: {len(config.modbus_registers)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ConfigManager: {e}")
        return False

def test_security_manager():
    """–¢–µ—Å—Ç SecurityManager"""
    print("\nüîí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SecurityManager...")
    
    try:
        from core.security_manager import get_security_manager, log_security_event
        sm = get_security_manager()
        
        # –¢–µ—Å—Ç —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        test_data = {"secret_token": "test_123", "user_id": 12345}
        print(f"üîì –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {test_data}")
        
        encrypted = sm.encrypt_data(test_data)
        print(f"üîê –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {encrypted[:50]}...")
        
        decrypted = sm.decrypt_data(encrypted)
        print(f"üîì –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {decrypted}")
        
        success = test_data == decrypted
        print(f"{'‚úÖ' if success else '‚ùå'} –®–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {success}")
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        log_security_event("INTEGRATION_TEST", user_id=12345, details={"test": True})
        print("‚úÖ –°–æ–±—ã—Ç–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø–∏—Å–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        health = sm.health_check()
        print(f"üè• –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        for key, value in health.items():
            status = "‚úÖ" if value else "‚ùå"
            print(f"   {status} {key}: {value}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ SecurityManager: {e}")
        return False

def test_telegram_imports():
    """–¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–æ–≤ –≤ Telegram –±–æ—Ç–µ"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ Telegram –±–æ—Ç–∞...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∏–º–ø–æ—Ä—Ç—ã –±–µ–∑ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞
        import telegram_bot.bot_main
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è SECURITY_AVAILABLE —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        security_available = getattr(telegram_bot.bot_main, 'SECURITY_AVAILABLE', False)
        print(f"‚úÖ SECURITY_AVAILABLE: {security_available}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ Telegram –±–æ—Ç–∞: {e}")
        return False

def test_encrypted_config_migration():
    """–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤ –≤ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    print("\nüì¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤...")
    
    try:
        from core.config_manager import get_config
        config = get_config()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –º–∏–≥—Ä–∞—Ü–∏–∏
        if hasattr(config, 'migrate_secrets_to_encrypted'):
            print("‚úÖ –ú–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–µ–Ω")
        else:
            print("‚ùå –ú–µ—Ç–æ–¥ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –ö–£–ë-1063\n")
    
    tests = [
        ("ConfigManager", test_config_manager),
        ("SecurityManager", test_security_manager), 
        ("Telegram Imports", test_telegram_imports),
        ("Config Migration", test_encrypted_config_migration),
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –ò—Ç–æ–≥–∏
    print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"   {status}: {test_name}")
        if result:
            passed += 1
    
    total = len(results)
    print(f"\nüéØ –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã! –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç.")
        return True
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)