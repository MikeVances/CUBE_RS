#!/usr/bin/env python3
"""
Multi-Tenant Telegram Bot –¥–ª—è CUBE_RS
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–π –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
–ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
"""

import os
import sys
import json
import logging
import asyncio
from typing import Dict, Any, List
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# Telegram Bot imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from modbus.unified_system import UnifiedKUBSystem
from bot_database import TelegramBotDB
from bot_permissions import check_user_permission, check_command_rate_limit
from bot_utils import (
    format_sensor_data, format_system_stats, 
    build_main_menu, build_confirmation_menu, build_back_menu,
    send_typing_action, error_message, success_message, info_message, warning_message
)

# Multi-tenant –º–æ–¥—É–ª—å
from multi_tenant_manager import MultiTenantManager, MultiTenantTelegramMixin

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot_multitenant.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class MultiTenantKUBTelegramBot(MultiTenantTelegramMixin):
    """Multi-Tenant Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–£–ë-1063 —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
    
    def __init__(self, token: str, config_file: str = "config/telegram_bot.json"):
        self.token = token
        self.config = self._load_config(config_file)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã
        self.kub_system = None
        self.bot_db = TelegramBotDB()
        self.mt_manager = MultiTenantManager()  # Multi-tenant –º–µ–Ω–µ–¥–∂–µ—Ä
        
        # Telegram Application
        self.application = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏)
        self.user_states = {}
        
        logger.info("üè≠ Multi-Tenant KUB Telegram Bot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_file: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            with open(config_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º defaults")
            return {
                "allowed_users": [],
                "admin_users": [],
                "default_access_level": "user",
                "command_timeout": 30,
                "max_message_length": 4000
            }
    
    async def initialize_system(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedKUBSystem"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è UnifiedKUBSystem...")
            self.kub_system = UnifiedKUBSystem()
            self.kub_system.start()
            logger.info("‚úÖ UnifiedKUBSystem –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã: {e}")
            return False
    
    # =======================================================================
    # MULTI-TENANT –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
    # =======================================================================
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start —Å multi-tenant –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        user = update.effective_user
        
        await send_typing_action(update, context)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
        self.bot_db.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        self.mt_manager.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ü–æ–ª—É—á–∞–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        devices = self.mt_manager.get_user_devices(user.id)
        organizations = self.mt_manager.get_user_organizations(user.id)
        
        if not devices:
            welcome_text = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n\n"
                f"üè≠ **–ö–£–ë-1063 Multi-Tenant Control Bot**\n\n"
                f"‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º.\n"
                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—é.\n\n"
                f"üìß –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ —É–∫–∞–∂–∏—Ç–µ:\n"
                f"‚Ä¢ –í–∞—à Telegram ID: `{user.id}`\n"
                f"‚Ä¢ –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø"
            )
            
            await update.message.reply_text(
                welcome_text,
                parse_mode="Markdown"
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n\n"
            f"üè≠ **–ö–£–ë-1063 Multi-Tenant Control Bot**\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è—Ö
        if organizations:
            welcome_text += f"üè¢ **–í–∞—à–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏:**\n"
            for org in organizations:
                welcome_text += f"‚Ä¢ {org['name']} ({org['role']})\n"
            welcome_text += "\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
        welcome_text += f"üì¶ **–î–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤:** {len(devices)}\n\n"
        welcome_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
        
        menu = self._build_multitenant_main_menu(user.id)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=menu,
            parse_mode="Markdown"
        )
        
        self.bot_db.log_user_command(user.id, "start", None, True)
    
    async def cmd_devices(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /devices - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        user = update.effective_user
        
        await send_typing_action(update, context)
        
        devices = self.mt_manager.get_user_devices(user.id)
        
        if not devices:
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º\n\n–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."),
                parse_mode="Markdown"
            )
            return
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º
        devices_by_org = {}
        for device in devices:
            org_name = device.organization_name
            if org_name not in devices_by_org:
                devices_by_org[org_name] = []
            devices_by_org[org_name].append(device)
        
        text = f"üè≠ **–í–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ({len(devices)}):**\n\n"
        
        for org_name, org_devices in devices_by_org.items():
            text += f"üè¢ **{org_name}**\n"
            for device in org_devices:
                access_icon = {"read": "üëÅÔ∏è", "write": "‚úèÔ∏è", "admin": "‚öôÔ∏è"}.get(device.access_level, "‚ùì")
                text += f"  {access_icon} `{device.device_id}` - {device.device_name}\n"
                if device.location:
                    text += f"    üìç {device.location}\n"
            text += "\n"
        
        text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º."
        
        menu = self._build_device_selection_menu(devices)
        
        await update.message.reply_text(
            text,
            reply_markup=menu,
            parse_mode="Markdown"
        )
        
        self.bot_db.log_user_command(user.id, "devices", None, True)
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status —Å –≤—ã–±–æ—Ä–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        user = update.effective_user
        
        devices = self.mt_manager.get_user_devices(user.id)
        
        if not devices:
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"),
                parse_mode="Markdown"
            )
            return
        
        if len(devices) == 1:
            # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–¥–Ω–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
            await self._show_device_status(update, context, devices[0].device_id)
        else:
            # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞
            text = "üìä **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π:**"
            menu = self._build_device_selection_menu(devices, action_prefix="status_")
            
            await update.message.reply_text(
                text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
    
    async def _show_device_status(self, update, context, device_id: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        user = update.effective_user if hasattr(update, 'effective_user') else update.callback_query.from_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø
        if not self.mt_manager.check_device_access(user.id, device_id, "read"):
            text = error_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É")
            if hasattr(update, 'message'):
                await update.message.reply_text(text, parse_mode="Markdown")
            else:
                await update.callback_query.edit_message_text(text, parse_mode="Markdown")
            return
        
        await send_typing_action(update, context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        devices = self.mt_manager.get_user_devices(user.id)
        device = next((d for d in devices if d.device_id == device_id), None)
        
        if not device:
            text = error_message("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            if hasattr(update, 'message'):
                await update.message.reply_text(text, parse_mode="Markdown")
            else:
                await update.callback_query.edit_message_text(text, parse_mode="Markdown")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ Modbus Slave ID
            if not self.kub_system:
                text = error_message("–°–∏—Å—Ç–µ–º–∞ –ö–£–ë-1063 –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                # –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å UnifiedKUBSystem –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö slave_id
                # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â–∏–π –º–µ—Ç–æ–¥
                raw_data = self.kub_system.get_current_data()
                
                if raw_data:
                    # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ–±–æ–≥–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ multi-tenant –º–µ–Ω–µ–¥–∂–µ—Ä
                    filtered_data = self.mt_manager.filter_data_for_user(
                        user.id, device.modbus_slave_id, raw_data
                    )
                    
                    if filtered_data:
                        text = self._format_device_status(device, filtered_data)
                    else:
                        text = error_message("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                else:
                    text = error_message("–ù–µ—Ç —Å–≤—è–∑–∏ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ–º")
            
            menu = self._build_device_action_menu(device)
            
            if hasattr(update, 'message'):
                await update.message.reply_text(text, reply_markup=menu, parse_mode="Markdown")
            else:
                await update.callback_query.edit_message_text(text, reply_markup=menu, parse_mode="Markdown")
            
            self.bot_db.log_user_command(user.id, "read", device_id, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ {device_id}: {e}")
            text = error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
            
            if hasattr(update, 'message'):
                await update.message.reply_text(text, parse_mode="Markdown")
            else:
                await update.callback_query.edit_message_text(text, parse_mode="Markdown")
    
    def _format_device_status(self, device, data: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        header = (
            f"üè≠ **{device.organization_name}**\n"
            f"üì¶ **{device.device_name}** (`{device.device_id}`)\n"
        )
        
        if device.location:
            header += f"üìç {device.location}\n"
        
        header += f"üîó Modbus ID: `{device.modbus_slave_id}`\n\n"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        formatted_data = format_sensor_data(data)
        
        return header + formatted_data
    
    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERY (MULTI-TENANT)
    # =======================================================================
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫ —Å multi-tenant –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        try:
            await send_typing_action(query, context)
            
            if data.startswith("device_"):
                device_id = data.replace("device_", "")
                await self._show_device_status(query, context, device_id)
            
            elif data.startswith("status_"):
                device_id = data.replace("status_", "")
                await self._show_device_status(query, context, device_id)
            
            elif data.startswith("refresh_"):
                device_id = data.replace("refresh_", "")
                await self._show_device_status(query, context, device_id)
            
            elif data.startswith("reset_alarms_"):
                device_id = data.replace("reset_alarms_", "")
                await self._handle_reset_alarms_for_device(query, context, device_id)
            
            elif data.startswith("confirm_reset_"):
                device_id = data.replace("confirm_reset_", "")
                await self._confirm_reset_alarms_for_device(query, context, device_id)
            
            elif data == "show_devices":
                await self._handle_show_devices(query, context)
            
            elif data == "main_menu":
                await self._handle_main_menu(query, context)
            
            elif data == "show_organizations":
                await self._handle_show_organizations(query, context)
            
            else:
                await query.edit_message_text(
                    error_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"),
                    parse_mode="Markdown"
                )
        
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"),
                parse_mode="Markdown"
            )
    
    async def _handle_reset_alarms_for_device(self, query, context, device_id: str):
        """–°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        user = query.from_user
        
        if not self.mt_manager.check_device_access(user.id, device_id, "write"):
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ"),
                parse_mode="Markdown"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        devices = self.mt_manager.get_user_devices(user.id)
        device = next((d for d in devices if d.device_id == device_id), None)
        
        if not device:
            await query.edit_message_text(
                error_message("–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"),
                parse_mode="Markdown"
            )
            return
        
        confirmation_text = (
            f"‚ö†Ô∏è **–°–ë–†–û–° –ê–í–ê–†–ò–ô**\n\n"
            f"üè≠ **{device.organization_name}**\n"
            f"üì¶ **{device.device_name}**\n"
            f"üìç {device.location or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏ –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ?\n\n"
            f"‚ö†Ô∏è –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
        )
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_reset_{device_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"device_{device_id}")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        
        await query.edit_message_text(
            confirmation_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )
    
    # =======================================================================
    # –£–¢–ò–õ–ò–¢–´ –ü–û–°–¢–†–û–ï–ù–ò–Ø –ú–ï–ù–Æ
    # =======================================================================
    
    def _build_multitenant_main_menu(self, telegram_id: int) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        devices = self.mt_manager.get_user_devices(telegram_id)
        
        buttons = []
        
        if devices:
            if len(devices) == 1:
                # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–¥–Ω–æ - –ø—Ä—è–º–∞—è –∫–Ω–æ–ø–∫–∞ –∫ –Ω–µ–º—É
                device = devices[0]
                buttons.append([InlineKeyboardButton(
                    f"üìä {device.device_name}", 
                    callback_data=f"device_{device.device_id}"
                )])
            else:
                # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ - –∫–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞
                buttons.append([InlineKeyboardButton("üì¶ –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="show_devices")])
            
            buttons.append([InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="show_devices")])
            buttons.append([InlineKeyboardButton("üè¢ –ú–æ–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", callback_data="show_organizations")])
        
        buttons.append([InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="show_help")])
        
        return InlineKeyboardMarkup(buttons)
    
    def _build_device_selection_menu(self, devices: List, action_prefix: str = "device_") -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        buttons = []
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è–º –¥–ª—è –ª—É—á—à–µ–≥–æ UX
        devices_by_org = {}
        for device in devices:
            org_name = device.organization_name
            if org_name not in devices_by_org:
                devices_by_org[org_name] = []
            devices_by_org[org_name].append(device)
        
        for org_name, org_devices in devices_by_org.items():
            # –ï—Å–ª–∏ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
            if len(devices_by_org) > 1 or len(org_devices) > 1:
                for device in org_devices:
                    button_text = f"{device.device_name}"
                    if len(devices_by_org) > 1:
                        button_text = f"{org_name}: {device.device_name}"
                    
                    buttons.append([InlineKeyboardButton(
                        button_text,
                        callback_data=f"{action_prefix}{device.device_id}"
                    )])
            else:
                # –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ–¥–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏
                device = org_devices[0]
                buttons.append([InlineKeyboardButton(
                    device.device_name,
                    callback_data=f"{action_prefix}{device.device_id}"
                )])
        
        buttons.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
        
        return InlineKeyboardMarkup(buttons)
    
    def _build_device_action_menu(self, device) -> InlineKeyboardMarkup:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –º–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        buttons = [
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data=f"refresh_{device.device_id}")],
        ]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –¥–æ—Å—Ç—É–ø–∞
        if device.access_level in ("write", "admin"):
            buttons.append([InlineKeyboardButton("üö® –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π", callback_data=f"reset_alarms_{device.device_id}")])
        
        if device.access_level == "admin":
            buttons.append([InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data=f"settings_{device.device_id}")])
        
        buttons.extend([
            [InlineKeyboardButton("üì¶ –î—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="show_devices")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        return InlineKeyboardMarkup(buttons)
    
    # =======================================================================
    # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò
    # =======================================================================
    
    async def _handle_show_devices(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        user = query.from_user
        devices = self.mt_manager.get_user_devices(user.id)
        
        if not devices:
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º"),
                parse_mode="Markdown"
            )
            return
        
        text = f"üì¶ **–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ ({len(devices)}):**"
        menu = self._build_device_selection_menu(devices)
        
        await query.edit_message_text(
            text,
            reply_markup=menu,
            parse_mode="Markdown"
        )
    
    async def _handle_show_organizations(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user = query.from_user
        organizations = self.mt_manager.get_user_organizations(user.id)
        
        if not organizations:
            await query.edit_message_text(
                error_message("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏"),
                parse_mode="Markdown"
            )
            return
        
        text = f"üè¢ **–í–∞—à–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ ({len(organizations)}):**\n\n"
        
        for org in organizations:
            role_icon = {"owner": "üëë", "admin": "‚öôÔ∏è", "operator": "üîß", "viewer": "üëÅÔ∏è"}.get(org['role'], "‚ùì")
            text += f"{role_icon} **{org['name']}** ({org['role']})\n"
            if org['description']:
                text += f"   ‚ÑπÔ∏è {org['description']}\n"
            text += "\n"
        
        menu = InlineKeyboardMarkup([
            [InlineKeyboardButton("üì¶ –ú–æ–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", callback_data="show_devices")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
        ])
        
        await query.edit_message_text(
            text,
            reply_markup=menu,
            parse_mode="Markdown"
        )
    
    async def _handle_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        
        text = "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        menu = self._build_multitenant_main_menu(user.id)
        
        await query.edit_message_text(
            text,
            reply_markup=menu,
            parse_mode="Markdown"
        )
    
    # =======================================================================
    # –ó–ê–ü–£–°–ö –ò –û–°–¢–ê–ù–û–í–ö–ê –ë–û–¢–ê
    # =======================================================================
    
    async def start_bot(self):
        """–ó–∞–ø—É—Å–∫ Multi-Tenant Telegram Bot"""
        try:
            if not await self.initialize_system():
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É")
                return False

            self.application = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.cmd_start))
            self.application.add_handler(CommandHandler("devices", self.cmd_devices))
            self.application.add_handler(CommandHandler("status", self.cmd_status))
            self.application.add_handler(CommandHandler("help", self.cmd_help))

            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))

            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Multi-Tenant Telegram Bot...")

            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(drop_pending_updates=True)
            await self.application.updater.idle()

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise
    
    async def stop_bot(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Multi-Tenant Telegram Bot...")

            if self.application:
                if hasattr(self.application, 'updater') and self.application.updater.running:
                    await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()

            if self.kub_system:
                self.kub_system.stop()

            logger.info("üõë Multi-Tenant Telegram Bot –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")

# =============================================================================
# –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –§–£–ù–ö–¶–ò–ò
# =============================================================================

class MultiTenantAdmin:
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è multi-tenant —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.mt_manager = MultiTenantManager()
    
    def add_user_to_farm(self, telegram_id: int, organization_code: str, role: str = "operator"):
        """–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ —Ñ–µ—Ä–º—É"""
        success = self.mt_manager.add_user_to_organization(telegram_id, organization_code, role)
        if success:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {telegram_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ {organization_code} —Å —Ä–æ–ª—å—é {role}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {telegram_id} –≤ {organization_code}")
        return success
    
    def list_users_access(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö –¥–æ—Å—Ç—É–ø—ã"""
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∫–æ–¥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        pass

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    try:
        from secure_config import SecureConfig
        config = SecureConfig()
        token = config.get_bot_token()
    except ImportError:
        token = os.getenv('TELEGRAM_BOT_TOKEN')

    if not token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN")
        return

    bot = MultiTenantKUBTelegramBot(token)

    try:
        await bot.start_bot()
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        await bot.stop_bot()
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        await bot.stop_bot()

if __name__ == "__main__":
    print("üè≠ MULTI-TENANT TELEGRAM BOT –î–õ–Ø –ö–£–ë-1063")
    print("=" * 60)
    asyncio.run(main())