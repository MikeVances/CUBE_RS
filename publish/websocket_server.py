"""
WebSocket Server –¥–ª—è CUBE RS
–ü–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –ö–£–ë-1063 —á–µ—Ä–µ–∑ WebSocket
"""

import sys
import os
# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

import asyncio
import json
import logging
import websockets
import time
from modbus.modbus_storage import read_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class WebSocketServer:
    def __init__(self, host="localhost", port=8765):
        self.host = host
        self.port = port
        self.clients = set()
        self.is_running = False
        
    async def register(self, websocket):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.add(websocket)
        logger.info(f"–ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
        
    async def unregister(self, websocket):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.clients.remove(websocket)
        logger.info(f"–ö–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω. –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(self.clients)}")
        
    async def send_data_to_clients(self, data):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ day_counter, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å –≤ –±–∞–∑–µ
        if "day_counter" not in data:
            try:
                from modbus.modbus_storage import read_data
                db_data = read_data()
                if "day_counter" in db_data:
                    data["day_counter"] = db_data["day_counter"]
            except Exception:
                pass
        if self.clients:
            message = json.dumps(data, ensure_ascii=False)
            await asyncio.gather(
                *[client.send(message) for client in self.clients],
                return_exceptions=True
            )
            
    async def data_broadcast_loop(self):
        """–¶–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞–º"""
        while self.is_running:
            try:
                data = read_data()
                if data:
                    await self.send_data_to_clients(data)
                    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ {len(self.clients)} –∫–ª–∏–µ–Ω—Ç–∞–º")
                else:
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
                    
                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(10)
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
                await asyncio.sleep(5)
                
    async def handle_client(self, websocket, path):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"""
        await self.register(websocket)
        try:
            async for message in websocket:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤
                try:
                    data = json.loads(message)
                    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞: {data}")
                    
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "get"
                    if data.get("cmd") == "get":
                        current_data = read_data()
                        if current_data:
                            await websocket.send(json.dumps(current_data, ensure_ascii=False))
                            logger.info("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞")
                        
                except json.JSONDecodeError:
                    logger.warning(f"–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ JSON —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –∑–∞–∫—Ä—ã—Ç–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞: {e}")
        finally:
            await self.unregister(websocket)
            
    async def start_server(self):
        """–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞"""
        try:
            server = await websockets.serve(
                self.handle_client,
                self.host,
                self.port
            )
            
            logger.info(f"üîå WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ ws://{self.host}:{self.port}")
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ–Ω–µ
            asyncio.create_task(self.data_broadcast_loop())
            
            await server.wait_closed()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞: {e}")
            self.is_running = False

def run_websocket_server():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    server = WebSocketServer()
    
    while True:
        try:
            if not server.is_running:
                logger.info("–ó–∞–ø—É—Å–∫ WebSocket —Å–µ—Ä–≤–µ—Ä–∞...")
                asyncio.run(server.start_server())
            else:
                time.sleep(1)
        except KeyboardInterrupt:
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ WebSocket —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ Ctrl+C")
            break
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ WebSocket —Å–µ—Ä–≤–µ—Ä–µ: {e}")
            time.sleep(10)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π

if __name__ == "__main__":
    run_websocket_server() 