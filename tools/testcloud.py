#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –æ–±–ª–∞—á–Ω–æ–≥–æ Modbus TCP - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"""

import socket
import struct
import time

# –†–µ–≥–∏—Å—Ç—Ä—ã –ö–£–ë-1063
REGISTER_MAP = [
    (0x00D5, '–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'temperature'),
    (0x00D4, '–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞', 'temperature'),
    (0x0084, '–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å', 'humidity'),
    (0x0085, '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2', 'co2'),
    (0x0086, '–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3', 'nh3'),
    (0x0083, '–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ', 'pressure'),
    (0x00D0, '–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'ventilation'),
    (0x00D1, '–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'ventilation'),
    (0x00D2, '–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏', 'scheme'),
    (0x0301, '–í–µ—Ä—Å–∏—è –ü–û', 'version'),
]

ADDR_TO_DESC = {addr: (desc, unit) for addr, desc, unit in REGISTER_MAP}

def format_value(value, unit_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    if unit_type == 'raw':
        return f"{value}"
    elif unit_type == 'temperature':
        return f"{value / 10:.1f}¬∞C"
    elif unit_type == 'humidity':
        return f"{value / 10:.1f}%"
    elif unit_type == 'pressure':
        return f"{value / 10:.1f} –ü–∞"
    elif unit_type == 'co2':
        return f"{value} ppm"
    elif unit_type == 'nh3':
        return f"{value / 10:.1f} ppm"
    elif unit_type == 'ventilation':
        return f"{value / 10:.1f}%"
    elif unit_type == 'scheme':
        schemes = {0: "–ë–∞–∑–æ–≤–∞—è", 1: "–¢—É–Ω–Ω–µ–ª—å–Ω–∞—è"}
        return schemes.get(value, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ ({value})")
    elif unit_type == 'version':
        return f"{value // 100}.{value % 100:02d}"
    else:
        return f"{value}"

def test_modbus():
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï MODBUS TCP")
    print("=" * 60)
    print("üéØ –¶–µ–ª—å: –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –ö–£–ë-1063")
    print("üåê –°–µ—Ä–≤–µ—Ä: tcp.cloudpub.ru:16212")
    print("=" * 60)
    
    results = {}
    
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(10)
        print("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ä–≤–µ—Ä—É...")
        sock.connect(('tcp.cloudpub.ru', 16212))
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")

        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —á—Ç–µ–Ω–∏–µ –ø–æ 10 —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ –ø–æ–¥—Ä—è–¥
        addresses = [addr for addr, _, _ in REGISTER_MAP]
        addresses = sorted(set(addresses))
        
        i = 0
        while i < len(addresses):
            start_addr = addresses[i]
            # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ä—è–¥ –∏–¥—É—â–∏—Ö –∞–¥—Ä–µ—Å–æ–≤ –º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å (–º–∞–∫—Å–∏–º—É–º 10)
            quantity = 1
            for j in range(i+1, min(i+10, len(addresses))):
                if addresses[j] == addresses[j-1] + 1:
                    quantity += 1
                else:
                    break
                    
            transaction_id = (start_addr & 0xFFFF)
            request = struct.pack('>HHHBBHH',
                transaction_id, 0x0000, 0x0006, 0x01, 0x04, start_addr, quantity
            )
            
            print(f"\nüì§ –ß—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ {hex(start_addr)} - {hex(start_addr+quantity-1)}...")
            sock.send(request)
            response = sock.recv(1024)
            print(f"üì• –û—Ç–≤–µ—Ç: {response.hex()}")
            
            if len(response) >= 9:
                function_code = response[7]
                if function_code == 0x04:
                    # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                    byte_count = response[8]
                    if byte_count > 0:
                        data = response[9:9+byte_count]
                        for k in range(0, len(data), 2):
                            if i + (k//2) < len(addresses):
                                reg_addr = start_addr + (k//2)
                                reg_value = struct.unpack('>H', data[k:k+2])[0]
                                desc_info = ADDR_TO_DESC.get(reg_addr, ('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–≥–∏—Å—Ç—Ä', 'raw'))
                                desc, unit_type = desc_info
                                formatted_value = format_value(reg_value, unit_type)
                                print(f"   ‚úÖ {desc}: {formatted_value} (0x{reg_value:04X})")
                                results[desc] = formatted_value
                                
                elif function_code == 0x84:
                    # –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
                    error_code = response[8] if len(response) > 8 else 0
                    error_messages = {
                        1: "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è",
                        2: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞", 
                        3: "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤",
                        4: "–û—à–∏–±–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"
                    }
                    error_msg = error_messages.get(error_code, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ ({error_code})")
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤ {hex(start_addr)}: {error_msg}")
                else:
                    print(f"   ‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏: 0x{function_code:02X}")
                    
            i += quantity
            time.sleep(0.2)
            
        sock.close()
        print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
        
        # –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é —Å–≤–æ–¥–∫—É
        if results:
            print("\n" + "=" * 60)
            print("üìã –°–í–û–î–ö–ê –ü–û–ö–ê–ó–ê–ù–ò–ô –ö–£–ë-1063")
            print("=" * 60)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            categories = {
                "üå°Ô∏è –¢–ï–ú–ü–ï–†–ê–¢–£–†–ê": [
                    "–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞",
                    "–¶–µ–ª–µ–≤–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞"
                ],
                "üíß –í–õ–ê–ñ–ù–û–°–¢–¨ –ò –î–ê–í–õ–ï–ù–ò–ï": [
                    "–û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è –≤–ª–∞–∂–Ω–æ—Å—Ç—å",  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                    "–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ"
                ],
                "üå¨Ô∏è –ì–ê–ó–´": [
                    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è CO2",  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                    "–ö–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—è NH3"
                ],
                "‚öôÔ∏è –í–ï–ù–¢–ò–õ–Ø–¶–ò–Ø": [
                    "–¶–µ–ª–µ–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏",
                    "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏", 
                    "–ê–∫—Ç–∏–≤–Ω–∞—è —Å—Ö–µ–º–∞ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏"
                ],
                "üîß –°–ò–°–¢–ï–ú–ê": [
                    "–í–µ—Ä—Å–∏—è –ü–û"
                ]
            }
            
            for category, items in categories.items():
                print(f"\n{category}:")
                category_has_data = False
                for item in items:
                    if item in results:
                        print(f"   ‚Ä¢ {item}: {results[item]}")
                        category_has_data = True
                
                if not category_has_data:
                    print("   ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(REGISTER_MAP)}")
            print(f"   ‚Ä¢ –ü–æ–ª—É—á–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(results)}")
            print(f"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: {len(results)/len(REGISTER_MAP)*100:.1f}%")
            
            print("\n" + "=" * 60)
            print("‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    test_modbus()