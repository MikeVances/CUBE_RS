#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º–æ–π –ö–£–ë-1063
–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø - –ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í RS485
"""

import os
import sys
import json
import logging
import asyncio
from typing import Dict, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..'))

# Telegram Bot imports
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—à–∏ –º–æ–¥—É–ª–∏
from bot_database import TelegramBotDB
from bot_permissions import check_user_permission, check_command_rate_limit, get_user_access_level
from bot_utils import (
    format_sensor_data, format_system_stats, 
    build_main_menu, build_confirmation_menu, build_back_menu, build_stats_menu,
    send_typing_action, send_upload_action,
    error_message, success_message, info_message, warning_message, loading_message,
    truncate_text
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('telegram_bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class KUBTelegramBot:
    """Telegram Bot –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ö–£–ë-1063 –ë–ï–ó –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ RS485"""
    
    def __init__(self, token: str, config_file: str = "config/telegram_bot.json"):
        self.token = token
        self.config = self._load_config(config_file)
        
        # –ù–ï —Å–æ–∑–¥–∞–µ–º UnifiedKUBSystem - —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        self.kub_system = None
        self.bot_db = TelegramBotDB()
        
        # Telegram Application
        self.application = None
        
        logger.info("ü§ñ KUBTelegramBot —Å UX —É–ª—É—á—à–µ–Ω–∏—è–º–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_file: str = "config/telegram_bot.json") -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        config = {
            "admin_users": [],
            "allowed_users": [],
            "default_access_level": "user",
            "max_message_length": 4000
        }
        
        try:
            # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥
            with open(config_file, 'r', encoding='utf-8') as f:
                main_config = json.load(f)
                config.update(main_config)
        except FileNotFoundError:
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥ {config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {config_file}: {e}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ bot_secrets.json
            secrets_file = "config/bot_secrets.json"
            with open(secrets_file, 'r', encoding='utf-8') as f:
                secrets = json.load(f)
                
            # –ò–∑–≤–ª–µ–∫–∞–µ–º admin_users –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
            if "telegram" in secrets:
                telegram_config = secrets["telegram"]
                if "admin_users" in telegram_config:
                    config["admin_users"] = telegram_config["admin_users"]
                    logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(config['admin_users'])} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤")
            
        except FileNotFoundError:
            logger.warning("‚ö†Ô∏è –§–∞–π–ª config/bot_secrets.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ bot_secrets.json: {e}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤: {e}")
        
        return config

    # =======================================================================
    # –†–ê–ë–û–¢–ê –° –î–ê–ù–ù–´–ú–ò –ß–ï–†–ï–ó SQLite (–≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ RS485)
    # =======================================================================
    
    def get_current_data_from_db(self):
        """–ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π)"""
        try:
            import sqlite3
            with sqlite3.connect("kub_data.db") as conn:
                cursor = conn.execute("""
                    SELECT temp_inside, temp_target, humidity, co2, nh3, pressure,
                           ventilation_level, ventilation_target, active_alarms,
                           active_warnings, updated_at 
                    FROM latest_data WHERE id=1
                """)
                row = cursor.fetchone()
                if row:
                    return {
                        'temp_inside': row[0] if row[0] else 0,  # –î–∞–Ω–Ω—ã–µ —É–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã Gateway
                        'temp_target': row[1] if row[1] else 0,
                        'humidity': row[2] if row[2] else 0,
                        'co2': row[3] if row[3] else 0,
                        'nh3': row[4] if row[4] else 0,
                        'pressure': row[5] if row[5] else 0,
                        'ventilation_level': row[6] if row[6] else 0,
                        'ventilation_target': row[7] if row[7] else 0,
                        'active_alarms': row[8] if row[8] else 0,
                        'active_warnings': row[9] if row[9] else 0,
                        'updated_at': row[10],
                        'connection_status': 'connected' if row[10] else 'disconnected'
                    }
                return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
            return None

    def add_write_command_to_db(self, register: int, value: int, user_info: str):
        """–î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø–∏—Å–∏ –≤ –æ—á–µ—Ä–µ–¥—å (–≤—ã–ø–æ–ª–Ω–∏—Ç –æ—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)"""
        try:
            import sqlite3
            import uuid
            from datetime import datetime
            
            command_id = str(uuid.uuid4())[:8]
            
            with sqlite3.connect("kub_commands.db") as conn:
                conn.execute("""
                    INSERT INTO write_commands 
                    (id, register, value, user_info, created_at, status, priority)
                    VALUES (?, ?, ?, ?, ?, 'pending', 1)
                """, (command_id, register, value, user_info, datetime.now().isoformat()))
                conn.commit()
            
            logger.info(f"üìù –ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞: reg=0x{register:04X}, val={value}, id={command_id}")
            return True, command_id
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}")
            return False, str(e)

    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
    # =======================================================================
    
    async def cmd_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = update.effective_user
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—á–∞—Ç–∞–Ω–∏–µ
        await send_typing_action(update, context)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.bot_db.register_user(
            telegram_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        
        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name or user.username}!\n\n"
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **–ö–£–ë-1063 Control Bot**.\n"
            f"–¢–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞: **{access_level}**.\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ ‚¨áÔ∏è"
        )
        
        await update.message.reply_text(
            welcome_text, 
            reply_markup=menu, 
            parse_mode="Markdown"
        )
        
        self.bot_db.log_user_command(user.id, "start", None, True)
    
    async def cmd_status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /status - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ"""
        user = update.effective_user

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if not check_user_permission(user.id, "read", self.bot_db):
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"), 
                parse_mode="Markdown"
            )
            return

        try:
            await send_typing_action(update, context)
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
            data = self.get_current_data_from_db()
            
            if data:
                status_text = format_sensor_data(data)
            else:
                status_text = error_message(
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ö–£–ë-1063\n\n"
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é —Å–∏—Å—Ç–µ–º—É:\n"
                    "`python tools/start_all_services.py`"
                )
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            status_text = truncate_text(status_text, 4000)
            
            await update.message.reply_text(
                status_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
            
            self.bot_db.log_user_command(user.id, "read", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await update.message.reply_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def cmd_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
        user = update.effective_user

        if not check_user_permission(user.id, "read", self.bot_db):
            await update.message.reply_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
                parse_mode="Markdown"
            )
            return

        try:
            await send_typing_action(update, context)
            
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–µ–∑ UnifiedKUBSystem
            stats_text = "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ö–£–ë-1063**\n\n"
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã
            data = self.get_current_data_from_db()
            if data:
                stats_text += f"üîÑ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** `{data.get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
                stats_text += f"üå°Ô∏è **–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** `{data.get('temp_inside', 0):.1f}¬∞C`\n"
                stats_text += f"üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** `{data.get('humidity', 0):.1f}%`\n"
                stats_text += f"üö® **–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≤–∞—Ä–∏–∏:** `{data.get('active_alarms', 0)}`\n"
            else:
                stats_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_stats = self.bot_db.get_user_stats(user.id)
            
            if user_stats:
                stats_text += f"\n**üë§ –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: `{user_stats.get('total_commands', 0)}`\n"
                stats_text += f"‚Ä¢ –ó–∞ —Å–µ–≥–æ–¥–Ω—è: `{user_stats.get('commands_today', 0)}`\n"
                stats_text += f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: `{user_stats.get('success_rate', 0):.1f}%`\n"
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_stats_menu(access_level)
            
            stats_text = truncate_text(stats_text, 4000)
            
            await update.message.reply_text(
                stats_text,
                parse_mode='Markdown',
                reply_markup=menu
            )
            
            self.bot_db.log_user_command(user.id, "stats", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            await update.message.reply_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"),
                parse_mode="Markdown"
            )

    # =======================================================================
    # –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–õ–Ø–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô
    # =======================================================================
    
    async def cmd_promote(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /promote - –ø–æ–≤—ã—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
        if user.id not in self.config.get("admin_users", []):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            args = context.args
            if len(args) < 2:
                await update.message.reply_text(
                    "üìñ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/promote @username —É—Ä–æ–≤–µ–Ω—å`\n\n"
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Ä–æ–≤–Ω–∏:\n"
                    "‚Ä¢ `user` - —Ç–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ\n"
                    "‚Ä¢ `operator` - —á—Ç–µ–Ω–∏–µ + —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π\n"
                    "‚Ä¢ `admin` - –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø\n"
                    "‚Ä¢ `engineer` - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø",
                    parse_mode="Markdown"
                )
                return
            
            username = args[0].replace('@', '')
            new_level = args[1].lower()
            
            if new_level not in ['user', 'operator', 'admin', 'engineer']:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
            target_user = self.bot_db.find_user_by_username(username)
            if not target_user:
                await update.message.reply_text(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞
            success = self.bot_db.set_user_access_level(target_user['telegram_id'], new_level)
            
            if success:
                await update.message.reply_text(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –ø–æ–≤—ã—à–µ–Ω –¥–æ —É—Ä–æ–≤–Ω—è `{new_level}`",
                    parse_mode="Markdown"
                )
                logger.info(f"üîù –ê–¥–º–∏–Ω {user.id} –ø–æ–≤—ã—Å–∏–ª @{username} –¥–æ {new_level}")
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã promote: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /users - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã)"""
        user = update.effective_user
        
        if user.id not in self.config.get("admin_users", []):
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        
        try:
            users = self.bot_db.get_all_users()
            
            if not users:
                await update.message.reply_text("üìã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            text = "üë• **–°–ü–ò–°–û–ö –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô:**\n\n"
            
            for user_data in users:
                username = user_data.get('username', '–Ω–µ—Ç')
                first_name = user_data.get('first_name', '')
                access_level = user_data.get('access_level', 'user')
                is_active = user_data.get('is_active', True)
                
                status = "‚úÖ" if is_active else "‚ùå"
                
                text += f"{status} **{first_name}** (@{username})\n"
                text += f"   ID: `{user_data['telegram_id']}`\n"
                text += f"   –î–æ—Å—Ç—É–ø: `{access_level}`\n\n"
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
            if len(text) > 4000:
                parts = [text[i:i+4000] for i in range(0, len(text), 4000)]
                for part in parts:
                    await update.message.reply_text(part, parse_mode="Markdown")
            else:
                await update.message.reply_text(text, parse_mode="Markdown")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã users: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

    async def cmd_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help - —Å–ø—Ä–∞–≤–∫–∞"""
        user = update.effective_user
        
        await send_typing_action(update, context)
        
        access_level = self.bot_db.get_user_access_level(user.id)
        
        help_text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ö–£–ë-1063 Control Bot**\n\n"
            "**üì± –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´:**\n"
            "‚Ä¢ `/start` ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ `/status` ‚Äî –ø–æ–∫–∞–∑–∞–Ω–∏—è –¥–∞—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ `/stats` ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ `/help` ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        )
        
        if user.id in self.config.get("admin_users", []):
            help_text += (
                "**üëë –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê:**\n"
                "‚Ä¢ `/promote @user —É—Ä–æ–≤–µ–Ω—å` ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∞–≤–∞\n"
                "‚Ä¢ `/users` ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
            )
        
        help_text += f"**üîê –í–ê–® –£–†–û–í–ï–ù–¨ –î–û–°–¢–£–ü–ê:** `{access_level}`\n"
        
        menu = build_main_menu(access_level)
        
        await update.message.reply_text(
            help_text,
            reply_markup=menu,
            parse_mode="Markdown"
        )

    # =======================================================================
    # –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò CALLBACK QUERY (INLINE –ö–ù–û–ü–ö–ò)
    # =======================================================================
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        try:
            await send_typing_action(query, context)
            
            if data == "show_status":
                await self._handle_show_status(query, context)
            elif data == "refresh_status":
                await self._handle_refresh_status(query, context)
            elif data == "show_stats":
                await self._handle_show_stats(query, context)
            elif data == "refresh_stats":
                await self._handle_refresh_stats(query, context)
            elif data == "reset_alarms":
                await self._handle_reset_alarms(query, context)
            elif data == "reset_alarms_confirmed":
                await self._handle_confirm_reset_alarms(query, context)
            elif data == "main_menu":
                await self._handle_main_menu(query, context)
            elif data == "show_help":
                await self._handle_show_help(query, context)
            elif data == "settings":
                await self._handle_settings(query, context)
            else:
                await query.edit_message_text(
                    error_message("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"), 
                    parse_mode="Markdown"
                )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback {data}: {e}")
            access_level = self.bot_db.get_user_access_level(query.from_user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_main_menu(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            "üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=menu,
            parse_mode="Markdown"
        )

    async def _handle_show_status(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        await self._handle_refresh_status(query, context)

    async def _handle_refresh_status(self, query, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ SQLite –±–∞–∑—ã"""
        user = query.from_user
        
        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite
            data = self.get_current_data_from_db()
            
            if data:
                status_text = format_sensor_data(data)
            else:
                status_text = error_message(
                    "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ö–£–ë-1063\n\n"
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
                    "‚Ä¢ –û—Å–Ω–æ–≤–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞\n"
                    "‚Ä¢ –ù–µ—Ç —Å–≤—è–∑–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–º\n\n"
                    "–ó–∞–ø—É—Å—Ç–∏—Ç–µ: `python tools/start_all_services.py`"
                )
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            status_text = truncate_text(status_text, 4000)
            
            await query.edit_message_text(
                status_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
            self.bot_db.log_user_command(user.id, "read", None, data is not None)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_show_stats(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        await self._handle_refresh_stats(query, context)

    async def _handle_refresh_stats(self, query, context):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        user = query.from_user
        
        if not check_user_permission(user.id, "read", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            # –ü—Ä–æ—Å—Ç–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            stats_text = "üìà **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ö–£–ë-1063**\n\n"
            
            data = self.get_current_data_from_db()
            if data:
                stats_text += f"üîÑ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ:** `{data.get('updated_at', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`\n"
                stats_text += f"üå°Ô∏è **–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:** `{data.get('temp_inside', 0):.1f}¬∞C`\n"
                stats_text += f"üíß **–í–ª–∞–∂–Ω–æ—Å—Ç—å:** `{data.get('humidity', 0):.1f}%`\n"
            else:
                stats_text += "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã\n"
            
            user_stats = self.bot_db.get_user_stats(user.id)
            if user_stats:
                stats_text += f"\n**üë§ –í–ê–®–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:**\n"
                stats_text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥: `{user_stats.get('total_commands', 0)}`\n"
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_stats_menu(access_level)
            
            stats_text = truncate_text(stats_text, 4000)
            
            await query.edit_message_text(
                stats_text,
                reply_markup=menu,
                parse_mode="Markdown"
            )
            
            self.bot_db.log_user_command(user.id, "stats", None, True)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_reset_alarms(self, query, context):
        """–ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"""
        user = query.from_user
        
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        confirmation_menu = build_confirmation_menu("reset_alarms_confirmed", "main_menu")
        
        await query.edit_message_text(
            warning_message("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∞–≤–∞—Ä–∏–∏?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"),
            reply_markup=confirmation_menu,
            parse_mode="Markdown"
        )

    async def _handle_confirm_reset_alarms(self, query, context):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–π —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π —á–µ—Ä–µ–∑ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–∞–Ω–¥"""
        user = query.from_user
        
        if not check_user_permission(user.id, "reset_alarms", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            await query.edit_message_text(
                loading_message("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π..."),
                parse_mode="Markdown"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å–±—Ä–æ—Å–∞ –≤ –æ—á–µ—Ä–µ–¥—å (—Ä–µ–≥–∏—Å—Ç—Ä 0x0020, –∑–Ω–∞—á–µ–Ω–∏–µ 1)
            user_info = f"telegram_user_{user.id}_{user.username or user.first_name}"
            success, result = self.add_write_command_to_db(0x0020, 1, user_info)
            
            access_level = self.bot_db.get_user_access_level(user.id)
            menu = build_main_menu(access_level)
            
            if success:
                await query.edit_message_text(
                    success_message(f"üîÑ –ö–æ–º–∞–Ω–¥–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n\nID –∫–æ–º–∞–Ω–¥—ã: `{result}`\n\n–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."),
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                self.bot_db.log_user_command(user.id, "reset_alarms", "0x0020", True)
            else:
                await query.edit_message_text(
                    error_message(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã:\n{result}"),
                    reply_markup=menu,
                    parse_mode="Markdown"
                )
                self.bot_db.log_user_command(user.id, "reset_alarms", "0x0020", False)
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∞–≤–∞—Ä–∏–π: {e}")
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message(f"–û—à–∏–±–∫–∞: {str(e)}"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )

    async def _handle_show_help(self, query, context):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ callback"""
        user = query.from_user
        access_level = self.bot_db.get_user_access_level(user.id)
        
        help_text = (
            "‚ÑπÔ∏è **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –ö–£–ë-1063 Control Bot**\n\n"
            "**üîò –ö–ù–û–ü–ö–ò –ú–ï–ù–Æ:**\n"
            "‚Ä¢ üìä –ü–æ–∫–∞–∑–∞–Ω–∏—è ‚Äî —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –¥–∞—Ç—á–∏–∫–æ–≤\n"
            "‚Ä¢ üîÑ –û–±–Ω–æ–≤–∏—Ç—å ‚Äî –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ\n"
            "‚Ä¢ üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "‚Ä¢ üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ‚Äî –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        )
        
        if access_level in ("operator", "admin", "engineer"):
            help_text += "‚Ä¢ üö® –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π ‚Äî —Å–±—Ä–æ—Å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–≤–∞—Ä–∏–π\n"
        
        if access_level in ("admin", "engineer"):
            help_text += "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–æ–π\n"
        
        help_text += f"\n**üîê –í–ê–® –î–û–°–¢–£–ü:** `{access_level}`\n"
        help_text += "\nüí° **–°–æ–≤–µ—Ç:** –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–µ–µ –∫–æ–º–∞–Ω–¥!"
        
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            help_text,
            reply_markup=menu,
            parse_mode="Markdown"
        )

    async def _handle_settings(self, query, context):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)"""
        user = query.from_user
        
        if not check_user_permission(user.id, "write", self.bot_db):
            access_level = self.bot_db.get_user_access_level(user.id)
            back_menu = build_back_menu(access_level)
            await query.edit_message_text(
                error_message("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
                reply_markup=back_menu,
                parse_mode="Markdown"
            )
            return
        
        access_level = self.bot_db.get_user_access_level(user.id)
        menu = build_main_menu(access_level)
        
        await query.edit_message_text(
            info_message("‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã**\n\n–§—É–Ω–∫—Ü–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n–í –±–ª–∏–∂–∞–π—à–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã:\n‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n‚Ä¢ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã"),
            reply_markup=menu,
            parse_mode="Markdown"
        )

    # =======================================================================
    # –ó–ê–ü–£–°–ö –ë–ï–ó –ö–û–ù–§–õ–ò–ö–¢–û–í
    # =======================================================================

    async def start_bot(self):
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –ë–ï–ó —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã RS485"""
        try:
            logger.info("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Bot (–±–µ–∑ RS485)...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            from modbus.modbus_storage import init_db
            init_db()
            
            # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Telegram
            self.application = Application.builder().token(self.token).build()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
            self.application.add_handler(CommandHandler("start", self.cmd_start))
            self.application.add_handler(CommandHandler("status", self.cmd_status))
            self.application.add_handler(CommandHandler("stats", self.cmd_stats))
            self.application.add_handler(CommandHandler("help", self.cmd_help))
            
            # –£–ü–†–ê–í–õ–ï–ù–ò–ï –†–û–õ–Ø–ú–ò
            self.application.add_handler(CommandHandler("promote", self.cmd_promote))
            self.application.add_handler(CommandHandler("users", self.cmd_users))
            
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
            self.application.add_handler(CallbackQueryHandler(self.handle_callback))

            logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram Bot...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            await self.application.initialize()
            await self.application.start()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤—Ä—É—á–Ω—É—é –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª—è
            await self.application.updater.start_polling(drop_pending_updates=True)
            
            logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è...")
            
            try:
                # –ñ–¥–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
                await asyncio.sleep(float('inf'))
            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            finally:
                # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            raise

# =============================================================================
# –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# =============================================================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    print("ü§ñ TELEGRAM BOT –î–õ–Ø –ö–£–ë-1063 (–ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô)")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ bot_secrets.json –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = None
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º bot_secrets.json
        with open("config/bot_secrets.json", 'r', encoding='utf-8') as f:
            secrets = json.load(f)
            if "telegram" in secrets and "bot_token" in secrets["telegram"]:
                token = secrets["telegram"]["bot_token"]
                logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ bot_secrets.json")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ bot_secrets.json: {e}")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑ —Ñ–∞–π–ª–∞, –ø—Ä–æ–±—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not token:
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        if token:
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    
    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑ secure_config.py
    if not token:
        try:
            from telegram_bot.secure_config import SecureConfig
            config = SecureConfig()
            token = config.get_bot_token()
            if token:
                logger.info("‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ secure_config.py")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ secure_config.py: {e}")

    if not token:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN")
        print("üí° –î–æ–±–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω –≤ config/bot_secrets.json:")
        print('{"telegram": {"bot_token": "your_token", "admin_users": [your_id]}}')
        return

    # –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
    bot = KUBTelegramBot(token)

    try:
        import asyncio
        asyncio.run(bot.start_bot())
        
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()