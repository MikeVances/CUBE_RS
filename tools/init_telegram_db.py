#!/usr/bin/env python3
"""
–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü –¥–ª—è Telegram Bot
–ó–∞–ø—É—Å–∫: python init_telegram_db.py
"""

import sqlite3
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def init_telegram_tables(db_file: str = "kub_commands.db"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –¥–ª—è Telegram Bot"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –±–∞–∑—ã
    if not Path(db_file).exists():
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        logger.info("üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ UnifiedKUBSystem –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü")
        return False
    
    try:
        with sqlite3.connect(db_file) as conn:
            logger.info(f"üìÇ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ {db_file}")
            
            # 1. –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π Telegram
            logger.info("üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã telegram_users...")
            conn.execute("""
                CREATE TABLE IF NOT EXISTS telegram_users (
                    telegram_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    access_level TEXT DEFAULT 'user',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    last_active TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE,
                    total_commands INTEGER DEFAULT 0,
                    last_command_at TIMESTAMP
                )
            """)
            
            # 2. –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            logger.info("üîç –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_telegram_access ON telegram_users(access_level)")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_telegram_active ON telegram_users(is_active)")
            conn.execute("CREATE INDEX IF NOT EXISTS idx_telegram_last_active ON telegram_users(last_active)")
            
            # 3. –¢–∞–±–ª–∏—Ü–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞
            logger.info("‚öôÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã access_config...")
            conn.execute("""
                CREATE TABLE IF NOT EXISTS access_config (
                    access_level TEXT PRIMARY KEY,
                    allowed_registers TEXT,      -- JSON –º–∞—Å—Å–∏–≤ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤
                    can_read BOOLEAN DEFAULT TRUE,
                    can_write BOOLEAN DEFAULT FALSE,
                    can_reset_alarms BOOLEAN DEFAULT FALSE,
                    max_commands_per_hour INTEGER DEFAULT 10,
                    description TEXT
                )
            """)
            
            # 4. –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑–æ–≤—ã–µ —É—Ä–æ–≤–Ω–∏ –¥–æ—Å—Ç—É–ø–∞
            logger.info("üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞...")
            access_levels = [
                ('user', '[]', True, False, False, 5, '–¢–æ–ª—å–∫–æ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö'),
                ('operator', '["0x0020"]', True, True, True, 20, '–°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π'),
                ('admin', '["0x0020", "0x003F"]', True, True, True, 50, '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏'),
                ('engineer', '["0x0020", "0x003F", "0x0100-0x010F", "0x0110-0x0117"]', True, True, True, 100, '–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø')
            ]
            
            conn.executemany("""
                INSERT OR REPLACE INTO access_config 
                (access_level, allowed_registers, can_read, can_write, can_reset_alarms, max_commands_per_hour, description)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, access_levels)
            
            # 5. –¢–∞–±–ª–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–¥–ª—è –ª–∏–º–∏—Ç–æ–≤)
            logger.info("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_command_history...")
            conn.execute("""
                CREATE TABLE IF NOT EXISTS user_command_history (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER,
                    command_type TEXT,           -- 'read', 'write', 'status'
                    register_address TEXT,       -- '0x0020' –∏–ª–∏ NULL –¥–ª—è read/status
                    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    success BOOLEAN,
                    FOREIGN KEY (telegram_id) REFERENCES telegram_users(telegram_id)
                )
            """)
            
            conn.execute("CREATE INDEX IF NOT EXISTS idx_user_history_time ON user_command_history(telegram_id, timestamp)")
            
            # 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—Å—ë —Å–æ–∑–¥–∞–ª–æ—Å—å
            logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü...")
            cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' AND name LIKE '%telegram%' OR name LIKE '%access%'")
            tables = cursor.fetchall()
            
            logger.info("üìã –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:")
            for table in tables:
                logger.info(f"   ‚Ä¢ {table[0]}")
            
            # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–∞–∑—ã
            cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table'")
            all_tables = cursor.fetchall()
            logger.info(f"üìä –í—Å–µ–≥–æ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ: {len(all_tables)}")
            
            return True
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        return False

def show_database_info(db_file: str = "kub_commands.db"):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    if not Path(db_file).exists():
        logger.warning(f"‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö {db_file} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    try:
        with sqlite3.connect(db_file) as conn:
            logger.info(f"üìä –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–ê–ó–ï {db_file}")
            logger.info("=" * 50)
            
            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü
            cursor = conn.execute("SELECT name FROM sqlite_master WHERE type='table' ORDER BY name")
            tables = cursor.fetchall()
            
            for table in tables:
                table_name = table[0]
                
                # –°—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
                count_cursor = conn.execute(f"SELECT COUNT(*) FROM {table_name}")
                count = count_cursor.fetchone()[0]
                
                logger.info(f"üìã {table_name}: {count} –∑–∞–ø–∏—Å–µ–π")
                
                # –î–ª—è –Ω–æ–≤—ã—Ö —Ç–∞–±–ª–∏—Ü –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if 'telegram' in table_name or 'access' in table_name:
                    schema_cursor = conn.execute(f"PRAGMA table_info({table_name})")
                    columns = schema_cursor.fetchall()
                    logger.info(f"   –ü–æ–ª—è: {', '.join([col[1] for col in columns])}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –¢–ê–ë–õ–ò–¶ –î–õ–Ø TELEGRAM BOT")
    print("=" * 50)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    show_database_info()
    
    # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
    success = init_telegram_tables()
    
    if success:
        print("\n‚úÖ –¢–ê–ë–õ–ò–¶–´ –°–û–ó–î–ê–ù–´ –£–°–ü–ï–®–ù–û!")
        print("üöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å Telegram Bot")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("\n" + "=" * 50)
        show_database_info()
        
    else:
        print("\n‚ùå –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø –¢–ê–ë–õ–ò–¶")
        print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ")

if __name__ == "__main__":
    main()
