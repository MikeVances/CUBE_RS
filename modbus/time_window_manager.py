#!/usr/bin/env python3
"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ RS485 –ø–æ—Ä—Ç—É
"""

import sys
import os
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
import logging
import argparse

import threading
import time
import queue
try:
    from modbus.reader import KUB1063Reader
except Exception:
    from .reader import KUB1063Reader

class TimeWindowManager:
    def __init__(self, window_duration=5, cooldown_duration=10, serial_port="/dev/tty.usbserial-210", **reader_kwargs):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω
        
        Args:
            window_duration: –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ –¥–æ—Å—Ç—É–ø–∞ (—Å–µ–∫—É–Ω–¥—ã)
            cooldown_duration: –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –º–µ–∂–¥—É –æ–∫–Ω–∞–º–∏ (—Å–µ–∫—É–Ω–¥—ã)
            serial_port: –ü—É—Ç—å –∫ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ—Ä—Ç—É RS485
            reader_kwargs: –î–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è KUB1063Reader (baudrate, parity –∏ —Ç.–ø.)
        """
        self.window_duration = window_duration
        self.cooldown_duration = cooldown_duration
        self.serial_port = serial_port
        self.reader_kwargs = reader_kwargs
        self.lock = threading.Lock()
        self.current_window = None
        self.last_window_end = 0
        self.request_queue = queue.Queue()
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
        self.worker_thread = threading.Thread(target=self._worker, daemon=True)
        self.worker_thread.start()
    
    def _worker(self):
        """–†–∞–±–æ—á–∏–π –ø–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ RS485"""
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω RS485")
        while self.running:
            try:
                current_time = time.time()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ–µ –æ–∫–Ω–æ
                if (self.current_window is None and 
                    current_time - self.last_window_end >= self.cooldown_duration):
                    
                    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –¥–æ—Å—Ç—É–ø–∞
                    with self.lock:
                        self.current_window = {
                            'start_time': current_time,
                            'end_time': current_time + self.window_duration
                        }
                    
                    logging.info(f"ü™ü –û—Ç–∫—Ä—ã—Ç–æ –æ–∫–Ω–æ –¥–æ—Å—Ç—É–ø–∞ –∫ RS485 (–¥–æ {self.window_duration}—Å)")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –æ–∫–Ω–µ
                    window_start = current_time
                    while (time.time() - window_start < self.window_duration and 
                           self.running):
                        
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –∏–∑ –æ—á–µ—Ä–µ–¥–∏ (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–∏–π)
                            request = self.request_queue.get_nowait()
                            self._process_request(request)
                        except queue.Empty:
                            time.sleep(0.1)
                    
                    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
                    with self.lock:
                        self.current_window = None
                        self.last_window_end = time.time()
                    
                    logging.info(f"üîí –û–∫–Ω–æ –¥–æ—Å—Ç—É–ø–∞ –∫ RS485 –∑–∞–∫—Ä—ã—Ç–æ (cooldown {self.cooldown_duration}—Å)")
                
                time.sleep(0.1)
                
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω: {e}")
                time.sleep(1)
    
    def _process_request(self, request):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ RS485"""
        try:
            reader = KUB1063Reader(port=self.serial_port, **self.reader_kwargs)
            
            if request['type'] == 'read_all':
                # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
                data = reader.read_all()
                request['callback'](data)
                
            elif request['type'] == 'read_register':
                # –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞
                value = reader.read_register(request['register'])
                request['callback'](value)
            
            # KUB1063Reader –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ read_all()
            # reader.close() –Ω–µ –Ω—É–∂–µ–Ω
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            request['callback'](None)
    
    def request_read_all(self, callback):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö"""
        request = {
            'type': 'read_all',
            'callback': callback,
            'timestamp': time.time()
        }
        self.request_queue.put(request)
        logging.info(f"üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
    
    def request_read_register(self, register, callback):
        """–ó–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞"""
        request = {
            'type': 'read_register',
            'register': register,
            'callback': callback,
            'timestamp': time.time()
        }
        self.request_queue.put(request)
        logging.info(f"üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ 0x{register:04X} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –æ—á–µ—Ä–µ–¥—å")
    
    def get_window_status(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–∫–Ω–∞"""
        with self.lock:
            if self.current_window:
                remaining = self.current_window['end_time'] - time.time()
                return {
                    'window_open': True,
                    'remaining_time': max(0, remaining),
                    'total_duration': self.window_duration
                }
            else:
                time_since_last = time.time() - self.last_window_end
                return {
                    'window_open': False,
                    'time_since_last': time_since_last,
                    'cooldown_remaining': max(0, self.cooldown_duration - time_since_last)
                }
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞"""
        self.running = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
_time_window_manager = None
_manager_lock = threading.Lock()

def get_time_window_manager(serial_port=None, **reader_kwargs):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω.
    –ü–µ—Ä–≤—ã–π –≤—ã–∑–æ–≤ –º–æ–∂–µ—Ç –∑–∞–¥–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã serial_port/reader_kwargs; –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –≤—ã–∑–æ–≤—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä.
    """
    global _time_window_manager
    with _manager_lock:
        if _time_window_manager is None:
            _time_window_manager = TimeWindowManager(serial_port=serial_port or "/dev/tty.usbserial-210", **reader_kwargs)
        return _time_window_manager

def request_rs485_read_all(callback):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞"""
    manager = get_time_window_manager()
    manager.request_read_all(callback)

def request_rs485_read_register(register, callback):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ —á—Ç–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞ —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞"""
    manager = get_time_window_manager()
    manager.request_read_register(register, callback)

def get_rs485_window_status():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫–æ–Ω"""
    manager = get_time_window_manager()
    return manager.get_window_status()

if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(levelname)s %(message)s",
        handlers=[
            logging.FileHandler("time_window_manager.log", encoding="utf-8"),
            logging.StreamHandler(),
        ],
    )

    parser = argparse.ArgumentParser(description="TimeWindowManager for RS485 access")
    parser.add_argument("--port", dest="port", default="/dev/tty.usbserial-210", help="Serial port path, e.g. /dev/tty.usbserial-21230")
    parser.add_argument("--window", dest="window", type=int, default=5, help="Access window duration (sec)")
    parser.add_argument("--cooldown", dest="cooldown", type=int, default=10, help="Cooldown between windows (sec)")
    args = parser.parse_args()

    # –°–æ–∑–¥–∞—ë–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    get_time_window_manager(serial_port=args.port)
    logging.info(f"‚úÖ TimeWindowManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (port={args.port}, window={args.window}s, cooldown={args.cooldown}s)")

    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–∫–Ω–∞, –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞—é—Ç—Å—è –æ—Ç –¥–µ—Ñ–æ–ª—Ç–∞
    mgr = get_time_window_manager()
    mgr.window_duration = args.window
    mgr.cooldown_duration = args.cooldown

    # –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        logging.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TimeWindowManager –ø–æ Ctrl+C‚Ä¶")
        mgr.stop()