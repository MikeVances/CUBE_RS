"""
–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è Reader + Writer —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –ö–£–ë-1063
–¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á—Ç–µ–Ω–∏–µ–º –∏ –∑–∞–ø–∏—Å—å—é —Å –ø–æ–ª–Ω—ã–º –∞—É–¥–∏—Ç–æ–º
"""

import json
import logging
import threading
import time
from pathlib import Path
from typing import Dict, Any, Optional
from datetime import datetime

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
from .writer import KUB1063Writer, WriteCommand, CommandStatus
from .time_window_manager import (
    get_time_window_manager, 
    request_rs485_read_all, 
    request_rs485_read_register,
    request_rs485_write_register,
    get_rs485_window_status,
    get_rs485_statistics
)
from .modbus_storage import init_db, read_data, update_data

logger = logging.getLogger(__name__)

class UnifiedKUBSystem:
    """
    –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ Reader + Writer –¥–ª—è –ö–£–ë-1063
    
    –§—É–Ω–∫—Ü–∏–∏:
    - –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —á—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ Reader
    - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Writer  
    - –ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ RS485 —á–µ—Ä–µ–∑ TimeWindowManager
    - –ü–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –æ–ø–µ—Ä–∞—Ü–∏–π
    - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    """
    
    def __init__(self, config_file: str = "config.json"):
        self.config = self._load_config(config_file)
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã (—É–±—Ä–∞–ª–∏ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Reader)
        self.writer = None
        self.time_window_manager = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        self.is_running = False
        self.reader_thread = None
        self.stats_update_thread = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.system_stats = {
            'start_time': None,
            'uptime_seconds': 0,
            'reader_cycles': 0,
            'writer_commands': 0,
            'last_successful_read': None,
            'last_successful_write': None,
            'rs485_conflicts': 0
        }
        
        logger.info("üéØ UnifiedKUBSystem –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def _load_config(self, config_file: str) -> dict:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        config_path = Path(config_file)
        
        if config_path.exists():
            try:
                with open(config_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        
        # –î–µ—Ñ–æ–ª—Ç–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        return {
            "rs485": {
                "port": "/dev/tty.usbserial-21230",
                "baudrate": 9600,
                "timeout": 2.0,
                "slave_id": 1,
                "window_duration": 5,
                "cooldown_duration": 10
            },
            "reader": {
                "enabled": True,
                "read_interval": 10,
                "retry_on_error": True,
                "max_retries": 3
            },
            "writer": {
                "enabled": True,
                "max_commands_per_cycle": 5,
                "command_timeout": 30,
                "max_retries": 3
            },
            "database": {
                "data_file": "kub_data.db",
                "commands_file": "kub_commands.db",
                "backup_enabled": True
            }
        }
    
    def initialize_components(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        
        rs485_config = self.config.get("rs485", {})
        
        try:
            # 1. TimeWindowManager - –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä –¥–æ—Å—Ç—É–ø–∞ –∫ RS485
            logger.info("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è TimeWindowManager (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞)...")
            self.time_window_manager = get_time_window_manager(
                serial_port=rs485_config.get("port", "/dev/tty.usbserial-21230"),
                window_duration=rs485_config.get("window_duration", 5),
                cooldown_duration=rs485_config.get("cooldown_duration", 10),
                baudrate=rs485_config.get("baudrate", 9600),
                slave_id=rs485_config.get("slave_id", 1)
            )
            logger.info("‚úÖ –í—Å–µ —á—Ç–µ–Ω–∏–µ –∏ –∑–∞–ø–∏—Å—å –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ TimeWindowManager")
            
            # 2. Writer - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å–∏ (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å TimeWindowManager)
            if self.config.get("writer", {}).get("enabled", True):
                logger.info("‚úçÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Writer (—á–µ—Ä–µ–∑ TimeWindowManager)...")
                self.writer = KUB1063Writer(
                    use_time_window_manager=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º TimeWindowManager –¥–ª—è –∑–∞–ø–∏—Å–∏
                )
            
            # 4. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
            logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
            init_db()
            
            logger.info("‚úÖ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤: {e}")
            raise
    
    def start(self):
        """–ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        if self.is_running:
            logger.warning("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞")
            return
        
        try:
            logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π Reader + Writer —Å–∏—Å—Ç–µ–º—ã...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            self.initialize_components()
            
            # –ó–∞–ø—É—Å–∫ Writer (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)
            if self.writer:
                self.writer.start()
                logger.info("‚úçÔ∏è Writer –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫ Reader —Ü–∏–∫–ª–∞ (—á–µ—Ä–µ–∑ TimeWindowManager)
            if self.config.get("reader", {}).get("enabled", True):
                self.is_running = True
                self.system_stats['start_time'] = datetime.now()
                
                # –ü–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TimeWindowManager
                self.reader_thread = threading.Thread(target=self._reader_loop, daemon=True)
                self.reader_thread.start()
                logger.info("üìñ Reader –∑–∞–ø—É—â–µ–Ω (—á–µ—Ä–µ–∑ TimeWindowManager)")
                
                # –ü–æ—Ç–æ–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.stats_update_thread = threading.Thread(target=self._stats_update_loop, daemon=True)
                self.stats_update_thread.start()
            
            logger.info("‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {e}")
            self.stop()
            raise
    
    def _reader_loop(self):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ü–∏–∫–ª —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ TimeWindowManager"""
        read_interval = self.config.get("reader", {}).get("read_interval", 10)
        max_retries = self.config.get("reader", {}).get("max_retries", 3)
        consecutive_errors = 0
        
        while self.is_running:
            try:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π TimeWindowManager
                data_result = [None]
                error_result = [None]
                
                def read_callback(data):
                    if data is None:
                        error_result[0] = "Timeout or connection error"
                    else:
                        data_result[0] = data
                
                # –ó–∞–ø—Ä–æ—Å —á—Ç–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫–Ω–∞
                request_rs485_read_all(read_callback)
                
                # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                start_time = time.time()
                timeout = 15  # –°–æ–∫—Ä–∞—Ç–∏–ª–∏ —Ç–∞–π–º–∞—É—Ç
                while data_result[0] is None and error_result[0] is None and time.time() - start_time < timeout:
                    time.sleep(0.1)
                
                if data_result[0]:
                    data = data_result[0]
                    
                    if data.get("connection_status") == "connected":
                        # –£—Å–ø–µ—à–Ω–æ–µ —á—Ç–µ–Ω–∏–µ
                        self.system_stats['reader_cycles'] += 1
                        self.system_stats['last_successful_read'] = datetime.now()
                        consecutive_errors = 0
                        
                        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                        try:
                            update_data(**data)
                            logger.debug("üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑—É")
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                        
                        # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        temp = data.get('temp_inside', 'N/A')
                        humidity = data.get('humidity', 'N/A')
                        co2 = data.get('co2', 'N/A')
                        logger.info(f"üìä –î–∞–Ω–Ω—ã–µ: T={temp}¬∞C, H={humidity}%, CO2={co2}ppm")
                    else:
                        consecutive_errors += 1
                        logger.warning(f"‚ö†Ô∏è –ù–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ö–£–ë-1063 (–æ—à–∏–±–∫–∞ {consecutive_errors}/{max_retries})")
                else:
                    consecutive_errors += 1
                    logger.warning(f"‚ö†Ô∏è –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–æ—à–∏–±–∫–∞ {consecutive_errors}/{max_retries})")
                
                # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if consecutive_errors >= max_retries:
                    error_interval = min(read_interval * 2, 60)  # –ú–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫
                    logger.error(f"‚ùå –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫ –ø–æ–¥—Ä—è–¥, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–æ {error_interval}—Å")
                    time.sleep(error_interval)
                    consecutive_errors = 0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Å–ª–µ –ø–∞—É–∑—ã
                else:
                    time.sleep(read_interval)
                
            except Exception as e:
                consecutive_errors += 1
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ —á—Ç–µ–Ω–∏—è: {e}")
                time.sleep(5)
    
    def _stats_update_loop(self):
        """–¶–∏–∫–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        while self.is_running:
            try:
                # –û–±–Ω–æ–≤–ª—è–µ–º uptime
                if self.system_stats['start_time']:
                    uptime = datetime.now() - self.system_stats['start_time']
                    self.system_stats['uptime_seconds'] = int(uptime.total_seconds())
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Writer
                if self.writer:
                    writer_stats = self.writer.get_statistics()
                    self.system_stats['writer_commands'] = writer_stats.get('commands_total', 0)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —É—Å–ø–µ—à–Ω—É—é –∑–∞–ø–∏—Å—å
                    if writer_stats.get('last_command_time'):
                        self.system_stats['last_successful_write'] = writer_stats['last_command_time']
                
                time.sleep(60)  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                time.sleep(60)
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
        
        self.is_running = False
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Writer
        if self.writer:
            self.writer.stop()
            logger.info("‚úçÔ∏è Writer –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ TimeWindowManager (–µ–¥–∏–Ω–∞—è —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞)
        if self.time_window_manager:
            self.time_window_manager.stop()
            logger.info("üîÑ TimeWindowManager –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        if self.reader_thread and self.reader_thread.is_alive():
            self.reader_thread.join(timeout=5)
        
        if self.stats_update_thread and self.stats_update_thread.is_alive():
            self.stats_update_thread.join(timeout=2)
        
        logger.info("‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    def add_write_command(self, register: int, value: int, 
                         source_ip: str = None, user_info: str = None, 
                         priority: int = 0) -> tuple[bool, str]:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ Writer (–∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å TimeWindowManager)"""
        if not self.writer:
            return False, "Writer –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω"
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ Writer
        is_valid, error_msg = self.writer.validate_command(register, value)
        if not is_valid:
            return False, error_msg
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —á–µ—Ä–µ–∑ Writer (–∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç TimeWindowManager)
        return self.writer.add_write_command(
            register=register,
            value=value,
            source_ip=source_ip,
            user_info=user_info,
            priority=priority
        )
    
    def get_current_data(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã"""
        try:
            return read_data()
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return {}
    
    def get_system_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
        stats = {
            "system": self.system_stats.copy(),
            "reader": {
                "enabled": self.config.get("reader", {}).get("enabled", True),
                "last_read": self.system_stats.get('last_successful_read'),
                "total_cycles": self.system_stats.get('reader_cycles', 0),
                "using_time_window_manager": True
            },
            "writer": {
                "enabled": self.writer is not None,
                "using_time_window_manager": True
            }
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É Writer –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.writer:
            writer_stats = self.writer.get_statistics()
            stats["writer"].update(writer_stats)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TimeWindowManager
        try:
            twm_stats = get_rs485_statistics()
            stats["time_window_manager"] = twm_stats
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É TimeWindowManager: {e}")
        
        return stats
    
    def get_writable_registers(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤"""
        if self.writer:
            return self.writer.WRITABLE_REGISTERS
        return {}
    
    def validate_write_command(self, register: int, value: int) -> tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏"""
        if not self.writer:
            return False, "Writer –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
        
        return self.writer.validate_command(register, value)

# =============================================================================
# –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø –û–ë–™–ï–î–ò–ù–ï–ù–ù–û–ô –°–ò–°–¢–ï–ú–´
# =============================================================================

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(levelname)s [%(name)s] %(message)s",
        handlers=[
            logging.FileHandler("unified_kub_system.log", encoding="utf-8"),
            logging.StreamHandler()
        ]
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    system = UnifiedKUBSystem("config.json")
    
    try:
        system.start()
        
        # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ñ—É–Ω–∫—Ü–∏–π
        print("\n" + "=" * 60)
        print("üéØ –û–ë–™–ï–î–ò–ù–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ö–£–ë-1063 –ó–ê–ü–£–©–ï–ù–ê")
        print("=" * 60)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
        writable = system.get_writable_registers()
        print(f"üìù –î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏: {len(writable)} —Ä–µ–≥–∏—Å—Ç—Ä–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
        current_data = system.get_current_data()
        if current_data:
            print(f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current_data.get('temp_inside')}¬∞C")
            print(f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {current_data.get('humidity')}%")
            print(f"ü´Å CO2: {current_data.get('co2')} ppm")
        
        # –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏
        print(f"\n‚úçÔ∏è –¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø–∏—Å–∏...")
        success, result = system.add_write_command(
            register=0x0020,  # –°–±—Ä–æ—Å –∞–≤–∞—Ä–∏–π
            value=1,
            source_ip="127.0.0.1",
            user_info="admin_test"
        )
        print(f"–ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {'‚úÖ' if success else '‚ùå'} {result}")
        
        print(f"\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:")
        stats = system.get_system_statistics()
        print(f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {stats['system']['uptime_seconds']} —Å–µ–∫")
        print(f"–¶–∏–∫–ª–æ–≤ —á—Ç–µ–Ω–∏—è: {stats['reader']['total_cycles']}")
        print(f"–ö–æ–º–∞–Ω–¥ –∑–∞–ø–∏—Å–∏: {stats['writer'].get('commands_total', 0)}")
        
        print(f"\n‚ö†Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            time.sleep(10)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            stats = system.get_system_statistics()
            print(f"üìä Uptime: {stats['system']['uptime_seconds']}s, "
                  f"Reads: {stats['reader']['total_cycles']}, "
                  f"Writes: {stats['writer'].get('commands_total', 0)}")
    
    except KeyboardInterrupt:
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    
    finally:
        system.stop()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()
