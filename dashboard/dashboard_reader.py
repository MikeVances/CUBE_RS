"""
Dashboard Reader –¥–ª—è –ö–£–ë-1063 - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
"""

import sys
import os
import time
import logging
from datetime import datetime, timedelta
from typing import Dict, Any, Optional
from threading import Lock

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å (–∫–∞–∫ –≤ app.py)
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã —Å fallback
try:
    from modbus.modbus_storage import read_data
except ImportError:
    try:
        from .modbus_storage import read_data
    except ImportError:
        # Fallback –¥–ª—è –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        import modbus_storage
        read_data = modbus_storage.read_data

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class DashboardReader:
    """–ß–∏—Ç–∞—Ç–µ–ª—å —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è –¥–∞—à–±–æ—Ä–¥–∞"""
    
    def __init__(self):
        self.cache = {}
        self.cache_time = {}
        self.cache_duration = 2  # —Å–æ–∫—Ä–∞—Ç–∏–ª –¥–æ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ —á–∞—Å—Ç–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.lock = Lock()
        self.stats = {
            'success_count': 0,
            'error_count': 0,
            'last_success': None,
            'last_error': None,
            'is_running': True
        }
    
    def read_all(self) -> Dict[str, Any]:
        """–ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏–∑ SQLite –ë–î"""
        with self.lock:
            current_time = time.time()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à (—Å–æ–∫—Ä–∞—Ç–∏–ª –≤—Ä–µ–º—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è)
            if (self.cache and 
                current_time - self.cache_time.get('timestamp', 0) < self.cache_duration):
                logger.debug("üìã –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
                return self.cache.copy()
            
            try:
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ SQLite –ë–î (–∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è gateway1)
                logger.debug("üîÑ –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î...")
                data = read_data()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –µ—Å—Ç—å –∏ —Å–≤–µ–∂–∏–µ
                if data and self._is_data_valid(data):
                    self.stats['success_count'] += 1
                    self.stats['last_success'] = datetime.now()
                    data['connection_status'] = 'connected'
                    
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    self.cache = data
                    self.cache_time['timestamp'] = current_time
                    
                    logger.debug(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: temp={data.get('temp_inside')}¬∞C")
                    return data
                    
                else:
                    self.stats['error_count'] += 1
                    self.stats['last_error'] = datetime.now()
                    
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑ –∫—ç—à–∞ —Å –ø–æ–º–µ—Ç–∫–æ–π
                    if self.cache:
                        logger.warning("‚ö†Ô∏è –ù–µ—Ç —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à")
                        cache_copy = self.cache.copy()
                        cache_copy['connection_status'] = 'stale_data'
                        return cache_copy
                    else:
                        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î")
                        return {
                            'timestamp': datetime.now(),
                            'connection_status': 'no_data',
                            'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î'
                        }
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
                self.stats['error_count'] += 1
                self.stats['last_error'] = datetime.now()
                
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à –µ—Å–ª–∏ –µ—Å—Ç—å
                if self.cache:
                    logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ë–î, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à")
                    cache_copy = self.cache.copy()
                    cache_copy['connection_status'] = 'error'
                    return cache_copy
                else:
                    return {
                        'timestamp': datetime.now(),
                        'connection_status': 'error',
                        'error': str(e)
                    }
    
    def _is_data_valid(self, data: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã –∏ —Å–≤–µ–∂–∏–µ"""
        if not data:
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–ª–µ–π
        if data.get('temp_inside') is None:
            logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã")
            return False
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–≤–µ–∂–µ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        updated_at = data.get('updated_at')
        if updated_at:
            try:
                if isinstance(updated_at, str):
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                    update_time = datetime.fromisoformat(updated_at.replace('Z', '+00:00'))
                elif hasattr(updated_at, 'strftime'):
                    # –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ datetime –æ–±—ä–µ–∫—Ç
                    update_time = updated_at
                else:
                    logger.warning("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                    return True  # –°—á–∏—Ç–∞–µ–º –≤–∞–ª–∏–¥–Ω—ã–º –µ—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å
                
                now = datetime.now()
                age_seconds = (now - update_time).total_seconds()
                
                # –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞–µ–º —Å–≤–µ–∂–∏–º–∏ –µ—Å–ª–∏ –∏–º –º–µ–Ω—å—à–µ 30 —Å–µ–∫—É–Ω–¥
                if age_seconds > 30:
                    logger.warning(f"‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏: {age_seconds:.0f}—Å –Ω–∞–∑–∞–¥")
                    return False
                    
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è –ù–µ –º–æ–≥—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ–º –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Ä–µ–º—è, —Å—á–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã–º–∏
                return True
        
        return True
    
    def get_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        with self.lock:
            total_attempts = self.stats['success_count'] + self.stats['error_count']
            success_rate = (self.stats['success_count'] / total_attempts 
                          if total_attempts > 0 else 0)
            
            return {
                'success_count': self.stats['success_count'],
                'error_count': self.stats['error_count'],
                'success_rate': success_rate,
                'is_running': self.stats['is_running'],
                'last_success': self.stats['last_success'],
                'last_error': self.stats['last_error'],
                'cache_age': time.time() - self.cache_time.get('timestamp', 0) if self.cache else None
            }
    
    def clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ (–¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)"""
        with self.lock:
            self.cache = {}
            self.cache_time = {}
            logger.info("üßπ –ö—ç—à –æ—á–∏—â–µ–Ω")
    
    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∏—Ç–∞—Ç–µ–ª—è"""
        with self.lock:
            self.stats['is_running'] = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
_dashboard_reader = DashboardReader()

def get_dashboard_reader() -> DashboardReader:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —á–∏—Ç–∞—Ç–µ–ª—è"""
    return _dashboard_reader

def read_all() -> Dict[str, Any]:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    return _dashboard_reader.read_all()

def get_statistics() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    return _dashboard_reader.get_statistics()

def clear_cache():
    """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞"""
    _dashboard_reader.clear_cache()

def test_dashboard_reader():
    """–¢–µ—Å—Ç dashboard reader"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û Dashboard Reader")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –∫—ç—à –¥–ª—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    clear_cache()
    
    data = read_all()
    print("üìä –î–∞–Ω–Ω—ã–µ:")
    for key, value in data.items():
        if key != 'timestamp':
            print(f"  {key}: {value}")
    
    stats = get_statistics()
    print("\nüìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    for key, value in stats.items():
        print(f"  {key}: {value}")
    
    print(f"\nüîç –ü—É—Ç—å –ø–æ–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π:")
    for i, path in enumerate(sys.path[:3]):
        print(f"  {i}: {path}")

if __name__ == "__main__":
    test_dashboard_reader()